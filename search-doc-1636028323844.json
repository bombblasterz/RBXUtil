[{"title":"ClientRemoteSignal","type":0,"sectionRef":"#","url":"api/ClientRemoteSignal","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#functions","content":" "},{"title":"IsA","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#IsA","content":"&lt;/&gt; ClientRemoteSignal.IsA(self: any) → boolean A method which is used to check if self is a client remote signal or not.  "},{"title":"new","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#new","content":"&lt;/&gt; ClientRemoteSignal.new() → ClientRemoteSignal Creates and returns a new client remote signal.  "},{"title":"Connect","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#Connect","content":"ClientRemoteSignal &lt;/&gt; ClientRemoteSignal:Connect(callback: function) → RBXScriptConnection Same as self._remote:Connect(callback).  "},{"title":"Destroy","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#Destroy","content":"ClientRemoteSignal &lt;/&gt; ClientRemoteSignal:Destroy(...: any) → () Destroys the client remote signal and makes it unusuable. note The client remote signal will also be destroyed if the remote signal it was bound to was destroyed. warning Trivial errors will occur if your code unintentionally works on a destroyed client remote signal, only call this method when you're done working with it!  "},{"title":"FireServer","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#FireServer","content":"ClientRemoteSignal &lt;/&gt; ClientRemoteSignal:FireServer(...: any) → () Same as self._remote:FireServer(...).  "},{"title":"IsBoundToServer","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#IsBoundToServer","content":"ClientRemoteSignal &lt;/&gt; ClientRemoteSignal:IsBoundToServer() → boolean Returns a boolean indicating if the client remote signal is bound to the server (remote signal).  "},{"title":"Wait","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#Wait","content":"&lt;/&gt; ClientRemoteSignal:Wait() → ...any Same as self._remote.OnClientEvent:Wait(). "},{"title":"ClientRemoteProperty","type":0,"sectionRef":"#","url":"api/ClientRemoteProperty","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#properties","content":" "},{"title":"OnValueUpdate","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#OnValueUpdate","content":"&lt;/&gt; ClientRemoteProperty.OnValueUpdate: Signal&lt;newValue: any&gt; A signal which is fired whenever the value of the client remote property is updated. "},{"title":"Functions","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#functions","content":" "},{"title":"IsA","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#IsA","content":"&lt;/&gt; ClientRemoteProperty.IsA(self: any) → boolean A method which is used to check if self is a client remote property or not.  "},{"title":"new","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#new","content":"&lt;/&gt; ClientRemoteProperty.new() → ClientRemoteProperty Creates and returns a new client remote property.  "},{"title":"Destroy","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#Destroy","content":"ClientRemoteProperty &lt;/&gt; ClientRemoteProperty:Destroy() → () Destroys the client remote property and makes it unusable. note The client remote property will also be destroyed if the remote property it was bound to was destroyed. warning Trivial errors will occur if your code unintentionally works on a destroyed client remote property, only call this method when you're done working with it!  "},{"title":"GetValue","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#GetValue","content":"ClientRemoteProperty &lt;/&gt; ClientRemoteProperty:GetValue() → any Returns the value of the client remote property. If bound by the server, then it will retrieve the value of the client from it's serverside counter part and if there is no value set specifically for the client, then the value retured will be the current value of the serverside counter part.  "},{"title":"IsBoundToServer","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#IsBoundToServer","content":"ClientRemoteProperty &lt;/&gt; ClientRemoteProperty:IsBoundToServer() → boolean Returns a boolean indicating if the client remote property is bound to the server (remote property).  "},{"title":"SetValue","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#SetValue","content":"ClientRemoteProperty &lt;/&gt; ClientRemoteProperty:SetValue(newValue: any) → () Sets the value of the client remote property to newValue. warning This method is illegal to call if the client remote property is bound to the server. "},{"title":"CommunicationSignal","type":0,"sectionRef":"#","url":"api/CommunicationSignal","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#functions","content":" "},{"title":"GetSignal","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#GetSignal","content":"&lt;/&gt; CommunicationSignal.GetSignal(identifier: string) → CommunicationSignal | nil Returns the communication signal whose identifier is identifier.  "},{"title":"IsA","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#IsA","content":"&lt;/&gt; CommunicationSignal.IsA(self: any) → boolean A method which is used to check if self is a communication signal or not.  "},{"title":"new","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#new","content":"&lt;/&gt; CommunicationSignal.new(identifier: string) → CommunicationSignal Creates and returns a new communication signal with the identifier of identifier.  "},{"title":"BindKeyValuePair","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#BindKeyValuePair","content":"CommunicationSignal &lt;/&gt; CommunicationSignal:BindKeyValuePair( key: string | number, value: RemoteSignal | RemoteProperty | function | boolean | string | number | Instance | table ) → () Binds and exposes a new key key with value value to the client. note Remote function limitations apply. For more information, see Remote Functions and Events.  "},{"title":"Destroy","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#Destroy","content":"ClientRemoteProperty &lt;/&gt; CommunicationSignal:Destroy() → () Destroys the communication signal and makes it unusable. warning Trivial errors will occur if your code unintentionally works on a destroyed communication signal, only call this method when you're done working with it! "},{"title":"ClientCommunicationSignal","type":0,"sectionRef":"#","url":"api/ClientCommunicationSignal","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#properties","content":" "},{"title":"Members","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#Members","content":"ClientCommunicationSignal &lt;/&gt; ClientCommunicationSignal.Members: table A dictionary of all members binded to the signal.  "},{"title":"Members","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#Members","content":"ClientCommunicationSignal &lt;/&gt; ClientCommunicationSignal.Members: table A dictionary of all members binded to the signal.  "},{"title":"RemoteProperties","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#RemoteProperties","content":"ClientCommunicationSignal &lt;/&gt; ClientCommunicationSignal.RemoteProperties: table A dictionary of all remote properties binded to the signal.  "},{"title":"RemoteProperties","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#RemoteProperties","content":"ClientCommunicationSignal &lt;/&gt; ClientCommunicationSignal.RemoteProperties: table A dictionary of all remote properties binded to the signal.  "},{"title":"RemoteSignals","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#RemoteSignals","content":"ClientCommunicationSignal &lt;/&gt; ClientCommunicationSignal.RemoteSignals: table A dictionary of all remote signals binded to the signal.  "},{"title":"RemoteSignals","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#RemoteSignals","content":"ClientCommunicationSignal &lt;/&gt; ClientCommunicationSignal.RemoteSignals: table A dictionary of all remote signals binded to the signal. "},{"title":"Functions","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#functions","content":" "},{"title":"GetSignal","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#GetSignal","content":"&lt;/&gt; ClientCommunicationSignal.GetSignal( identifier: string, timeout: number | nil ) → Promsie Creates a new client communication signal and binds it with it's server counterpart. Returns a promise which is resolved once the signal is successfully created. The method will wait for timeout (or 1 if not specified) seconds for the server counterpart to exist before assuming that it doesn't. -- On the server: local signal = CommunicationSignal.new(&quot;Signal&quot;) signal:BindKeyValuePair(&quot;bo&quot;, true) -- On the client: CommunicationSignal.GetSignal(&quot;Signal&quot;):andThen(function(signal) print(signal.Members.bo) --&gt; true end) warning The returned signal will be unsuable once the signal's serverside counterpart is destroyed, for e.g: -- On the server: local signal = CommunicationSignal.new(&quot;Signal&quot;) signal:BindKeyValuePair(&quot;test&quot;, 1) task.delay(5, function() signal:Destroy() end)) -- On the client local sig = CommunicationSignal.GetSignal(&quot;Signal&quot;):expect() print(CommunicationSignal.Members.test) --&gt; 1 task.wait(6) -- wait for it to be destroyed on the server print(CommunicationSignal.Members) --&gt; nil   "},{"title":"IsA","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#IsA","content":"&lt;/&gt; ClientCommunicationSignal.IsA(self: any) → boolean A method which is used to check if self is a client communication signal or not.  "},{"title":"Dispatch","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#Dispatch","content":"&lt;/&gt; ClientCommunicationSignal:Dispatch() → table A method which dispatches the client communication signal for client-side use. For e.g: -- On the server: local signal = CommunicationSignal.new(&quot;Signal&quot;) signal:BindKeyValuePair(&quot;Table&quot;, {1,2,3}) -- On the client: local clientCommunicationSignal = CommunicationSignal.GetSignal(&quot;Signal&quot;):expect() local dispatchedSignal = clientCommunicationSignal:Dispatch() -- Normally to access members you would do: print(clientCommunicationSignal.Members.Table) --&gt; {1, 2, 3} -- Dispatched signal: print(dispatchedSignal.Table) --&gt; {1, 2, 3} tip The dispatched signal will be updated as new members, remote signals or remote properties are binded. "},{"title":"Keyboard","type":0,"sectionRef":"#","url":"api/Keyboard","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"Keyboard","url":"api/Keyboard#functions","content":" "},{"title":"AreAllKeysDown","type":1,"pageTitle":"Keyboard","url":"api/Keyboard#AreAllKeysDown","content":"&lt;/&gt; Keyboard.AreAllKeysDown(...: EnumItem) → boolean A method which returns a boolean indicating if all keys in ... are held down.  "},{"title":"AreAnyKeysDown","type":1,"pageTitle":"Keyboard","url":"api/Keyboard#AreAnyKeysDown","content":"&lt;/&gt; Keyboard.AreAnyKeysDown(...: EnumItem) → boolean A method which returns a boolean indicating if any keys in ... are held down.  "},{"title":"IsKeyDown","type":1,"pageTitle":"Keyboard","url":"api/Keyboard#IsKeyDown","content":"&lt;/&gt; Keyboard.IsKeyDown(keycode: EnumItem) → boolean A method which returns a boolean indicating if keycode is held down. "},{"title":"Maid","type":0,"sectionRef":"#","url":"api/Maid","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"Maid","url":"api/Maid#functions","content":" "},{"title":"IsA","type":1,"pageTitle":"Maid","url":"api/Maid#IsA","content":"&lt;/&gt; Maid.IsA(self: any) → boolean A method which is used to check if the given argument is a maid or not.  "},{"title":"new","type":1,"pageTitle":"Maid","url":"api/Maid#new","content":"&lt;/&gt; Maid.new() → Maid A constructor method which creates and returns a new maid.  "},{"title":"AddTask","type":1,"pageTitle":"Maid","url":"api/Maid#AddTask","content":"Maid &lt;/&gt; Maid:AddTask(task: function | RBXScriptConnection | table | Instance) → task Adds a task for the maid to cleanup. note If table is passed as a task, it must have a Destroy or Disconnect method so that it can be cleaned up.  "},{"title":"Cleanup","type":1,"pageTitle":"Maid","url":"api/Maid#Cleanup","content":"Maid &lt;/&gt; Maid:Cleanup() → () Cleans up all the added tasks. Task Type function The function will be called. table Any Destroy or Disconnect method in the table will be called. Instance The instance will be destroyed. RBXScriptConnection The connection will be disconnected.   "},{"title":"Destroy","type":1,"pageTitle":"Maid","url":"api/Maid#Destroy","content":"Maid &lt;/&gt; Maid:Destroy() → () Destroys the maid and makes it unusuable. warning Trivial errors will occur if your code unintentionally works on a destroyed maid, only call this method when you're done working with the maid.  "},{"title":"LinkToInstance","type":1,"pageTitle":"Maid","url":"api/Maid#LinkToInstance","content":"&lt;/&gt; Maid:LinkToInstance( instance: Instance, callback: function | nil ) → Connection Links the given instance to the maid so that the maid will clean up all the tasks once the instance has been removed from the game i.e parented to nil. If callback is specified, it will be called before cleaning up the maid (when the instance is parented to nil) and if the function upon being called doesn't return a truthy value, the maid will not cleanup. For e.g: local instance = ... -- some instance parented to workspace local maid = Maid.new() maid:AddTask(function() warn(&quot;cleaned up&quot;) end) maid:LinkToInstance(instance) instance.Parent = nil -- Now the maid will cleanup as the instance is parented to nil. Here's an alternate case: local instance = ... -- some instance parented to workspace local maid = Maid.new() maid:AddTask(function() warn(&quot;cleaned up&quot;) end) maid:LinkToInstance(instance, function() if instance:GetAttribute(&quot;DontHaveTheMaidCleanedupYetPlease&quot;) then return false end -- If the instance doesn't have that attribute, we can clean it up: return true end)) instance:SetAttribute(&quot;DontHaveTheMaidCleanedupYetPlease&quot;, true) instance.Parent = nil -- The instance is parented to nil, but the maid hasn't cleaned up! A connection is returned so that once it is disconnected, the maid will unlink from the instance. The connection contains the following methods: Methods Description Disconnect The connection will be disconnected and the maid will unlink to the instance it was linked to. IsConnected Returns a boolean indicating if the connection has been disconnected. note This connection will be disconnected when the maid is destroyed, so be careful with how you work with them.  "},{"title":"RemoveTask","type":1,"pageTitle":"Maid","url":"api/Maid#RemoveTask","content":"Maid &lt;/&gt; Maid:RemoveTask(task: function | RBXScriptConnection | table | Instance) → () Removes the task (assuming it was added as an task for the maid to cleanup) so that it will not be cleaned up.  "},{"title":"RemoveTaskAndCleanup","type":1,"pageTitle":"Maid","url":"api/Maid#RemoveTaskAndCleanup","content":"Maid &lt;/&gt; Maid:RemoveTaskAndCleanup(task: function | RBXScriptConnection | table | Instance) → () Works the same as Maid:RemoveTask, but also cleans up task for the last time. "},{"title":"Component","type":0,"sectionRef":"#","url":"api/Component","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"Component","url":"api/Component#properties","content":" "},{"title":"Objects","type":1,"pageTitle":"Component","url":"api/Component#Objects","content":"Component &lt;/&gt; Component.Objects: table A table which contains all the active objects of the component.  "},{"title":"OnComponentAdded","type":1,"pageTitle":"Component","url":"api/Component#OnComponentAdded","content":"&lt;/&gt; Component.OnComponentAdded: Signal&lt;componentAdded: Component&gt; A signal which is fired whenever a component is added.  "},{"title":"OnComponentDestroyed","type":1,"pageTitle":"Component","url":"api/Component#OnComponentDestroyed","content":"&lt;/&gt; Component.OnComponentDestroyed: Signal&lt;componentDestroyed: Component&gt; A signal which is fired whenever a component is destroyed.  "},{"title":"OnObjectAdded","type":1,"pageTitle":"Component","url":"api/Component#OnObjectAdded","content":"Component &lt;/&gt; Component.OnObjectAdded: Signal&lt;objectAdded: table&gt; A signal which is fired whenever a new object is created in the component.  "},{"title":"OnObjectDestroyed","type":1,"pageTitle":"Component","url":"api/Component#OnObjectDestroyed","content":"Component &lt;/&gt; Component.OnObjectDestroyed: Signal&lt;objectDestroyed: table&gt; A signal which is fired whenever an object of the component is destroyed.  "},{"title":"Tags","type":1,"pageTitle":"Component","url":"api/Component#Tags","content":"Component &lt;/&gt; Component.Tags: table A table which contains the tags of the component i.e Component.RequiredTags or Component.OptionalTags. "},{"title":"Functions","type":1,"pageTitle":"Component","url":"api/Component#functions","content":" "},{"title":"BindComponentsFolder","type":1,"pageTitle":"Component","url":"api/Component#BindComponentsFolder","content":"&lt;/&gt; Component.BindComponentsFolder(componentsFolder: Folder) → () Binds all the descendants (module scripts) in componentsFolder such that each will binded to it's own component through Component.new when Component.Start is called. note If the required module script in componentsFolder doesn't have a IsComponent member, it will be dismissed.  "},{"title":"GetComponentFromTags","type":1,"pageTitle":"Component","url":"api/Component#GetComponentFromTags","content":"&lt;/&gt; Component.GetComponentFromTags(tags: table) → table | nil A method which returns a component whose RequiredTags or OptionalTags match tags. Tag members Description OptionalTags This member will be compared against the OptionalTags member of the component (if it has one). If they are equal, the component will be returned. RequiredTags This member will be compared against the RequiredTags member of the component (if it has one). If they are equal, the component will be returned. note The tags table must contain only of these members which must be a table. local tags = { RequiredTags = { &quot;A&quot;, &quot;B&quot; } } -- Will get a component whose RequiredTags is the same as tags.RequiredTags local component = Component.GetComponentFromTags(tags)   "},{"title":"GetComponentObjectFromInstance","type":1,"pageTitle":"Component","url":"api/Component#GetComponentObjectFromInstance","content":"&lt;/&gt; Component.GetComponentObjectFromInstance( instance: Instance, component: Component | nil ) → table | nil A method which returns an component object binded to instance. If component is provided, then the method will return an object only in the component binded to instance.  "},{"title":"IsA","type":1,"pageTitle":"Component","url":"api/Component#IsA","content":"&lt;/&gt; Component.IsA(self: any) → boolean Returns a boolean indicating if the given argument is a component or not.  "},{"title":"new","type":1,"pageTitle":"Component","url":"api/Component#new","content":"&lt;/&gt; Component.new(module: ModuleScript) → () Creates and binds module to a new component, module must have these members and methods: Required members and methods Description .new A constructor method which will be called whenever a new object is to be binded to the component. :Destroy A method which will be called on a object to be destroyed. OptionalTags or RequiredTags The tags that an instance must have in order to be binded to the component module can also have these optional lifecycle methods and members: Optional lifecycle methods and members Description PreRenderUpdatePriority An EnumItem. Learn more about it here. :Start A method which will be called on an object added, after .new is called for it. :Stop A method which will be called on an object just before its destroyed. PostSimulationUpdate A method called every RunService.Heartbeat on an object. PreSimulationUpdate A method called every RunService.Stepped on an object. PreRenderUpdate A method called every RunService.RenderStepped on an object. note module must have a IsComponent member in order to have it's component created and binded to it.  "},{"title":"Start","type":1,"pageTitle":"Component","url":"api/Component#Start","content":"&lt;/&gt; Component.Start() → () Creates and binds a component to each module script in the folder provided as argument to Component.BindComponentsFolder.  "},{"title":"WaitForComponentFromTags","type":1,"pageTitle":"Component","url":"api/Component#WaitForComponentFromTags","content":"&lt;/&gt; Component.WaitForComponentFromTags( tags: tags, timeout: number | nil ) → Component | nil Works the same as Component.GetComponentFromTags, except yields the thread until a valid component is found under timeout seconds (if provided).  "},{"title":"Destroy","type":1,"pageTitle":"Component","url":"api/Component#Destroy","content":"Component &lt;/&gt; Component:Destroy() → () Destroys the component it self i.e cleaning up all signals and destroying all objects.  "},{"title":"DestroyAllObjects","type":1,"pageTitle":"Component","url":"api/Component#DestroyAllObjects","content":"Component &lt;/&gt; Component:DestroyAllObjects() → () Destroys all objects in the component.  "},{"title":"GetAllObjects","type":1,"pageTitle":"Component","url":"api/Component#GetAllObjects","content":"Component &lt;/&gt; Component:GetAllObjects() → table Returns all the objects in the component. "},{"title":"Mouse","type":0,"sectionRef":"#","url":"api/Mouse","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"Mouse","url":"api/Mouse#properties","content":" "},{"title":"Hit","type":1,"pageTitle":"Mouse","url":"api/Mouse#Hit","content":"&lt;/&gt; Mouse.Hit: CFrame The cframe the mouse hit in the 3D world.  "},{"title":"IgnoreCharacter","type":1,"pageTitle":"Mouse","url":"api/Mouse#IgnoreCharacter","content":"&lt;/&gt; Mouse.IgnoreCharacter: boolean Used as an indication to ignore the local player's character or not in retrieving Mouse.Target and Mouse.Hit.  "},{"title":"OnLeftClick","type":1,"pageTitle":"Mouse","url":"api/Mouse#OnLeftClick","content":"&lt;/&gt; Mouse.OnLeftClick: Signal&lt;isInputProcessed: boolean&gt; A signal fired whenever the user left clicks on their mouse.  "},{"title":"OnMove","type":1,"pageTitle":"Mouse","url":"api/Mouse#OnMove","content":"&lt;/&gt; Mouse.OnMove: Signal&lt;deltaPosition: Vector2&gt; A signal fired whenever the user moves their mouse.  "},{"title":"OnRightClick","type":1,"pageTitle":"Mouse","url":"api/Mouse#OnRightClick","content":"&lt;/&gt; Mouse.OnRightClick: Signal&lt;isInputProcessed: boolean&gt; A signal fired whenever the user right clicks on their mouse.  "},{"title":"OnScrollClick","type":1,"pageTitle":"Mouse","url":"api/Mouse#OnScrollClick","content":"&lt;/&gt; Mouse.OnScrollClick: Signal&lt;isInputProcessed: boolean&gt; A signal fired whenever the user scroll clicks on their mouse.  "},{"title":"OnTargetChanged","type":1,"pageTitle":"Mouse","url":"api/Mouse#OnTargetChanged","content":"&lt;/&gt; Mouse.OnTargetChanged: Signal&lt;newTarget: Instance | nil&gt; A signal fired whenever Mouse.Target changes.  "},{"title":"Origin","type":1,"pageTitle":"Mouse","url":"api/Mouse#Origin","content":"&lt;/&gt; Mouse.Origin: Vector3 The origin of the mouse i.e Workspace.CurrentCamera.CFrame.Position.  "},{"title":"Target","type":1,"pageTitle":"Mouse","url":"api/Mouse#Target","content":"&lt;/&gt; Mouse.Target: Instance | nil The instance the mouse hit in the 3D world.  "},{"title":"TargetFilters","type":1,"pageTitle":"Mouse","url":"api/Mouse#TargetFilters","content":"&lt;/&gt; Mouse.TargetFilters: table A table of target filters, used in retrieving Mouse.Target and Mouse.Hit.  "},{"title":"TargetFilterType","type":1,"pageTitle":"Mouse","url":"api/Mouse#TargetFilterType","content":"&lt;/&gt; Mouse.TargetFilterType: RaycastFilterType By default, the value is Enum.RaycastFilterType.Blacklist. Used as the filter type in retrieving Mouse.Target and Mouse.Hit. note This member should only be set to Enum.RaycastFilterType.Blacklist or Enum.RaycastFilterType.Whitelist.  "},{"title":"UnitRay","type":1,"pageTitle":"Mouse","url":"api/Mouse#UnitRay","content":"&lt;/&gt; Mouse.UnitRay: Ray The unit ray from the mouse's 2D position to the 3D world.  "},{"title":"X","type":1,"pageTitle":"Mouse","url":"api/Mouse#X","content":"&lt;/&gt; Mouse.X: number The X coordinate of the mouse's 2D position on the screen.  "},{"title":"X","type":1,"pageTitle":"Mouse","url":"api/Mouse#X","content":"&lt;/&gt; Mouse.X: number The Y coordinate of the mouse's 2D position on the screen. "},{"title":"Functions","type":1,"pageTitle":"Mouse","url":"api/Mouse#functions","content":" "},{"title":"CastRay","type":1,"pageTitle":"Mouse","url":"api/Mouse#CastRay","content":"&lt;/&gt; Mouse.CastRay( raycastParams: RaycastParams | nil, distance: number ) → RaycastResult | nil Casts a ray from the mouse's current position to it's position extended distance studs, respecting raycastParams if provided.  "},{"title":"GetDeltaPosition","type":1,"pageTitle":"Mouse","url":"api/Mouse#GetDeltaPosition","content":"&lt;/&gt; Mouse.GetDeltaPosition() → Vector3 Returns the position of the mouse from the last frame to the current.  "},{"title":"LockCurrentPosition","type":1,"pageTitle":"Mouse","url":"api/Mouse#LockCurrentPosition","content":"&lt;/&gt; Mouse.LockCurrentPosition() → () Locks the mouse to it's current position, same as UserInputService.MouseBehavior = Enum.MouseBehavior.LockCurrentPosition.  "},{"title":"SetLockOnCenter","type":1,"pageTitle":"Mouse","url":"api/Mouse#SetLockOnCenter","content":"&lt;/&gt; Mouse.SetLockOnCenter() → () Locks the mouse to the center, same as UserInputService.MouseBehavior = Enum.MouseBehavior.LockCenter.  "},{"title":"Unlock","type":1,"pageTitle":"Mouse","url":"api/Mouse#Unlock","content":"&lt;/&gt; Mouse.Unlock() → () Unlocks the mouse, same as UserInputService.MouseBehavior = Enum.MouseBehavior.Default. "},{"title":"RemoteSignal","type":0,"sectionRef":"#","url":"api/RemoteSignal","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#functions","content":" "},{"title":"IsA","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#IsA","content":"&lt;/&gt; RemoteSignal.IsA(self: any) → boolean A method which is used to check if self is a remote signal or not.  "},{"title":"new","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#new","content":"&lt;/&gt; RemoteSignal.new() → RemoteSignal Creates and returns a new remote signal.  "},{"title":"Connect","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#Connect","content":"RemoteSignal &lt;/&gt; RemoteSignal:Connect() → RBXScriptConnection Works the same as self._remote:Connect(callback).  "},{"title":"Destroy","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#Destroy","content":"RemoteSignal &lt;/&gt; RemoteSignal:Destroy() → () Destroys the remote signal and makes it unusuable, also destroys the client remote signal binded to it. warning Trivial errors will occur if your code unintentionally works on a destroyed remote signal, only call this method when you're done working with it!  "},{"title":"FireAllClients","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#FireAllClients","content":"RemoteSignal &lt;/&gt; RemoteSignal:FireAllClients(...: any) → () Works the same as self._remote:FireAllClients(player, ...).  "},{"title":"FireClient","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#FireClient","content":"RemoteSignal &lt;/&gt; RemoteSignal:FireClient( client: Player, ...: any ) → () Works the same as self._remote:FireClient(client, ...).  "},{"title":"FireSpecificClients","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#FireSpecificClients","content":"RemoteSignal &lt;/&gt; RemoteSignal:FireSpecificClients( clients: table, ...: any ) → () Works the same as self._remote:FireClient(player, ...), but for all players in the clients table.  "},{"title":"IsBoundToClient","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#IsBoundToClient","content":"RemoteSignal &lt;/&gt; RemoteSignal:IsBoundToClient() → boolean Returns a boolean indicating if the remote signal is bound to the client. "},{"title":"NumberUtil","type":0,"sectionRef":"#","url":"api/NumberUtil","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#properties","content":" "},{"title":"e","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#e","content":"&lt;/&gt; NumberUtil.e: number Known as Euler's number, is a mathematical constant approximately equal to 2.7182818284590.  "},{"title":"NaN","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#NaN","content":"&lt;/&gt; NumberUtil.NaN: NaN An NaN (Not a Number) value.  "},{"title":"Phi","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#Phi","content":"&lt;/&gt; NumberUtil.Phi: number An irrational number which is often known as the golden ratio or the most beautiful number in maths.  "},{"title":"Tau","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#Tau","content":"&lt;/&gt; NumberUtil.Tau: number The circle constant representing the ratio between circumference and radius. The constant is equal to math.pi * 2 approximately. "},{"title":"Functions","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#functions","content":" "},{"title":"Factorial","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#Factorial","content":"&lt;/&gt; NumberUtil.Factorial(number: number) → number Returns the factorial of the number.  "},{"title":"GetFactorsOf","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#GetFactorsOf","content":"&lt;/&gt; NumberUtil.GetFactorsOf(number: number) → table Returns all the factors of the number.  "},{"title":"InverseLerp","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#InverseLerp","content":"&lt;/&gt; NumberUtil.InverseLerp( min: number, max: number, alpha: number ) → number Inversely lerps min to goal, with alpha being the multiplier.  "},{"title":"IsCloseTo","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#IsCloseTo","content":"&lt;/&gt; NumberUtil.IsCloseTo( number: number, to: number, eplison: number | nil ) → boolean Returns a boolean if the provided number is close to to under eplision (or the default eplison i.e 1e-5). print(0.1 + 0.2 == 0.3) --&gt; false (due to floating point imprecision) print(NumberUtil.IsCloseTo(0.1 + 0.2, 0.3)) --&gt; true   "},{"title":"IsInfinite","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#IsInfinite","content":"&lt;/&gt; NumberUtil.IsInfinite(number: number) → boolean Returns a boolean indicating if the number is infinite (math.huge) or not.  "},{"title":"IsNaN","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#IsNaN","content":"&lt;/&gt; NumberUtil.IsNaN(number: number) → boolean Returns a boolean if the provided number is NaN (Not a Number).  "},{"title":"Lerp","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#Lerp","content":"&lt;/&gt; NumberUtil.Lerp( number: number, goal: number, alpha: number ) → number Used for smoothly interpolating a number to goal, with alpha being the multiplier. For e.g: local number = 0 local goal = 3 while number &lt; goal do local alpha = task.wait(0.1) * 2 number = NumberUtil.Lerp(number, goal, alpha) print(number) end   "},{"title":"Map","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#Map","content":"&lt;/&gt; NumberUtil.Map( number: number, inMin: number, inMax: number, outMin: number, outMax: number ) → number Maps number between inMin, inMax, outMin and outMax.  "},{"title":"QuadraticLerp","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#QuadraticLerp","content":"&lt;/&gt; NumberUtil.QuadraticLerp( number: number, goal: number, alpha: number ) → number Same as NumberUtil.Lerp, except the lerp is quadratic.  "},{"title":"Root","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#Root","content":"&lt;/&gt; NumberUtil.Root( number: number, root: number ) → number Returns the root of the number. print(NumberUtil.Root(2, 2)) --&gt; 1.4142135623731 (Square root) print(NumberUtil.Root(2, 3)) --&gt; 1.2599210498949 (Cube root)   "},{"title":"RoundTo","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#RoundTo","content":"&lt;/&gt; NumberUtil.RoundTo( number: number, to: number ) → number Rounds number to to. "},{"title":"Ray","type":0,"sectionRef":"#","url":"api/Ray","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"Ray","url":"api/Ray#properties","content":" "},{"title":"Direction","type":1,"pageTitle":"Ray","url":"api/Ray#Direction","content":"Ray &lt;/&gt; Ray.Direction: Vector3 The direction of the ray, relative to it's origin.  "},{"title":"OnInstanceHit","type":1,"pageTitle":"Ray","url":"api/Ray#OnInstanceHit","content":"Ray &lt;/&gt; Ray.OnInstanceHit: Signal&lt;instanceHit: Instance&gt; A signal which is fired whenever an instance &quot;hits&quot; the ray, respecting raycast params (if provided).  "},{"title":"Origin","type":1,"pageTitle":"Ray","url":"api/Ray#Origin","content":"Ray &lt;/&gt; Ray.Origin: Vector3 The origin of the ray.  "},{"title":"Results","type":1,"pageTitle":"Ray","url":"api/Ray#Results","content":"Ray &lt;/&gt; Ray.Results: table A table of raycast results. Results Description Instance The BasePart or Terrain cell that the ray intersected. Position The world space point at which the intersection occurred, usually a point directly on the surface of the instance. Material The Material at the intersection point. For normal parts this is the BasePart.Material; for Terrain this can vary depending on terrain data. Normal The normal vector of the intersected face.   "},{"title":"Size","type":1,"pageTitle":"Ray","url":"api/Ray#Size","content":"Ray &lt;/&gt; Ray.Size: number The size of the ray from it's origin to it's final position.  "},{"title":"Unit","type":1,"pageTitle":"Ray","url":"api/Ray#Unit","content":"Ray &lt;/&gt; Ray.Unit: Vector3 The unit vector of the direction. Note that in a certain edge case where the direction is Vector3.new(0, 0, 0), then this will be Vector3.new(0, 1, 0).  "},{"title":"Visualizer","type":1,"pageTitle":"Ray","url":"api/Ray#Visualizer","content":"Ray &lt;/&gt; Ray.Visualizer: Instance An instance which is used to visualize the ray. note Ray visualizers will never be 100% accurate, due to how small rays actually are. However, they will be accurate up to 99.2% if their thickness is the default (i.e not set through Ray:SetVisualizerThickness). "},{"title":"Functions","type":1,"pageTitle":"Ray","url":"api/Ray#functions","content":" "},{"title":"IsA","type":1,"pageTitle":"Ray","url":"api/Ray#IsA","content":"&lt;/&gt; Ray.IsA(self: any) → boolean A method which is used to check if self is a ray or not.  "},{"title":"new","type":1,"pageTitle":"Ray","url":"api/Ray#new","content":"&lt;/&gt; Ray.new( origin: Vector3 | nil, direction: Vector3, params: RaycastParams | nil ) → Ray A constructor which creates and returns a new ray from origin, direction and params (if provided).  "},{"title":"Destroy","type":1,"pageTitle":"Ray","url":"api/Ray#Destroy","content":"Ray &lt;/&gt; Ray:Destroy() → () Destroys the ray and makes it unusable. warning Trivial errors will occur if your code unintentionally works on a destroyed ray, only call this method when you're done working with the ray!  "},{"title":"GetTouchingParts","type":1,"pageTitle":"Ray","url":"api/Ray#GetTouchingParts","content":"Ray &lt;/&gt; Ray:GetTouchingParts(maxTouchingParts: number) → table Gets and returns all the parts the ray is touching within a specified limit maxTouchingParts (or 10 if not provided), respecting the raycast params provided to the constructor.  "},{"title":"SetVisualizerThickness","type":1,"pageTitle":"Ray","url":"api/Ray#SetVisualizerThickness","content":"Ray &lt;/&gt; Ray:SetVisualizerThickness() → () Sets the thickness of the ray visualizer.  "},{"title":"Unvisualize","type":1,"pageTitle":"Ray","url":"api/Ray#Unvisualize","content":"Ray &lt;/&gt; Ray:Unvisualize() → () Unvisualizes the ray.  "},{"title":"Update","type":1,"pageTitle":"Ray","url":"api/Ray#Update","content":"Ray &lt;/&gt; Ray:Update(data: table) → () A very useful method which is used for dynamically updating the origin, direction or the size of the ray. Data members Description Origin If specified, must be a Vector3. Direction If specified, must be a Vector3. Size If specified, must be a number. note Note that at least 1 of the members must be specified. tip Other neccesary data (such as the ray visualizer and other properties) wil be updated as well to accommodate the new changes.  "},{"title":"Visualize","type":1,"pageTitle":"Ray","url":"api/Ray#Visualize","content":"Ray &lt;/&gt; Ray:Visualize() → () Visualizes the ray. "},{"title":"Signal","type":0,"sectionRef":"#","url":"api/Signal","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"Signal","url":"api/Signal#properties","content":" "},{"title":"ActiveConnectionCount","type":1,"pageTitle":"Signal","url":"api/Signal#ActiveConnectionCount","content":"Signal &lt;/&gt; Signal.ActiveConnectionCount: number The number of active connections. "},{"title":"Functions","type":1,"pageTitle":"Signal","url":"api/Signal#functions","content":" "},{"title":"IsA","type":1,"pageTitle":"Signal","url":"api/Signal#IsA","content":"&lt;/&gt; Signal.IsA(self: any) → boolean Returns a boolean indicating if the provided argument is a signal or not.  "},{"title":"new","type":1,"pageTitle":"Signal","url":"api/Signal#new","content":"&lt;/&gt; Signal.new() → Signal Creates and returns a new signal.  "},{"title":"CleanupConnections","type":1,"pageTitle":"Signal","url":"api/Signal#CleanupConnections","content":"Signal &lt;/&gt; Signal:CleanupConnections() → () Disconnects all active connections.  "},{"title":"Connect","type":1,"pageTitle":"Signal","url":"api/Signal#Connect","content":"Signal &lt;/&gt; Signal:Connect(callback: function) → Connection Connects callback to the signal so that it will be called when Signal:Fire or Signal:DeferredFire are called, and the arguments passed to them will be passed to callback. This method returns a connection which contains the following methods: Methods Description Disconnect The connection will be disconnected and callback will be disregarded. IsConnected Returns a boolean indicating if the connection has been disconnected.   "},{"title":"DeferredFire","type":1,"pageTitle":"Signal","url":"api/Signal#DeferredFire","content":"Signal &lt;/&gt; Signal:DeferredFire(...: any) → () Works the same as Signal:Fire, but calls every connection's callback in the next engine execution step, passing in ... as the argument.  "},{"title":"Destroy","type":1,"pageTitle":"Signal","url":"api/Signal#Destroy","content":"Signal &lt;/&gt; Signal:Destroy() → () Destroys the signal and makes it unusuable. warning Trivial errors will occur if your code unintentionally works on a destroyed signal, only call this method when you're done working with the signal.  "},{"title":"Fire","type":1,"pageTitle":"Signal","url":"api/Signal#Fire","content":"Signal &lt;/&gt; Signal:Fire(...: any) → () Resumes any yielded threads and calls every connection's callback passing in ... as the argument.  "},{"title":"Wait","type":1,"pageTitle":"Signal","url":"api/Signal#Wait","content":"Signal &lt;/&gt; Signal:Wait() → () Yields the current Luau thread that called it until the signal is fired through Signal:Fire or Signal:DeferredFire. All arguments passed to them will be returned.  "},{"title":"WaitUntilArgumentsPassed","type":1,"pageTitle":"Signal","url":"api/Signal#WaitUntilArgumentsPassed","content":"Signal &lt;/&gt; Signal:WaitUntilArgumentsPassed(...: any) → ...any Works the same as Signal:Wait, but will only resume the Luau thread when ... have been passed as arguments to Signal:Fire or Signal:DeferredFire. "},{"title":"RemoteProperty","type":0,"sectionRef":"#","url":"api/RemoteProperty","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#properties","content":" "},{"title":"OnPlayerValueUpdate","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#OnPlayerValueUpdate","content":"RemoteProperty &lt;/&gt; RemoteProperty.OnPlayerValueUpdate: Signal&lt;player: Player,newValue: any&gt; A signal which is fired whenever the value of a player is updated to a new one. remoteProperty.OnPlayerValueUpdate:Connect(function(player, newValue) print((&quot;%s's value was updated to %s&quot;):format(tostring(newValue))) end)   "},{"title":"OnValueUpdate","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#OnValueUpdate","content":"RemoteProperty &lt;/&gt; RemoteProperty.OnValueUpdate: Signal&lt;newValue: any&gt; A signal which is fired whenever the value stored in the remote property is updated to a new one. remoteProperty.ValueUpdate:Connect(function(newValue) print((&quot;Value was updated to %s&quot;):format(tostring(newValue))) end)  "},{"title":"Functions","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#functions","content":" "},{"title":"IsA","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#IsA","content":"&lt;/&gt; RemoteProperty.IsA(self: any) → boolean A method which is used to check if self is a remote property or not.  "},{"title":"new","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#new","content":"&lt;/&gt; RemoteProperty.new(defaultValue: any) → RemoteProperty Creates and returns a new remote property.  "},{"title":"Destroy","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#Destroy","content":"RemoteProperty &lt;/&gt; RemoteProperty:Destroy() → () Destroys the remote property and makes it unusable, also destroys the client remote property binded to it. warning Trivial errors will occur if your code unintentionally works on a destroyed remote property, only call this method when you're done working with it!  "},{"title":"GetInitialValue","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#GetInitialValue","content":"RemoteProperty &lt;/&gt; RemoteProperty:GetInitialValue() → any Returns the initial value of the remote property passed during it's creation. For e.g: local remoteProperty = RemoteProperty.new(50) remoteProperty:SetValue(100) print(remoteProperty:GetInitialValue()) --&gt; 50   "},{"title":"GetPlayerValue","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#GetPlayerValue","content":"RemoteProperty &lt;/&gt; RemoteProperty:GetPlayerValue(player: Player) → any Returns the specific value of player stored in the remote property, or the current value of the remote property.  "},{"title":"GetValue","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#GetValue","content":"RemoteProperty &lt;/&gt; RemoteProperty:GetValue() → any Returns the current value of the remote property.  "},{"title":"IsBoundToClient","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#IsBoundToClient","content":"RemoteProperty &lt;/&gt; RemoteProperty:IsBoundToClient() → boolean Returns a boolean indicating if the remote property is bound to the client (client remote property).  "},{"title":"SetAllPlayerValues","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#SetAllPlayerValues","content":"RemoteProperty &lt;/&gt; RemoteProperty:SetAllPlayerValues(newValue: any) → () Sets the value of each player (stored in the remote property) to newValue. New players who don't have their values set, will have it set to this new value. note Remote function limitations apply. For more information, see Remote Functions and Events. warning This method is illegal to call if the remote property isn't bound to the client!  "},{"title":"SetPlayerValue","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#SetPlayerValue","content":"RemoteProperty &lt;/&gt; RemoteProperty:SetPlayerValue( player: Player, newValue: any ) → () Sets the value of player (stored in the remote property) to newValue. note Remote function limitations apply. For more information, see Remote Functions and Events. warning This method is illegal to call if the remote property isn't bound to the client!  "},{"title":"SetSpecificPlayerValues","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#SetSpecificPlayerValues","content":"RemoteProperty &lt;/&gt; RemoteProperty:SetSpecificPlayerValues( players: table, newValue: any ) → () Sets the value of each player (stored in the remote property) in players to newValue. warning This method is illegal to call if the remote property isn't bound to the client! "},{"title":"UserInput","type":0,"sectionRef":"#","url":"api/UserInput","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"UserInput","url":"api/UserInput#properties","content":" "},{"title":"InputType","type":1,"pageTitle":"UserInput","url":"api/UserInput#InputType","content":"&lt;/&gt; UserInput.InputType: table A dictionary of input types. InputType Mouse Keyboard Gamepad Touch Accelerometer Gyro Focus TextInput InputMethod   "},{"title":"OnInputTypeChange","type":1,"pageTitle":"UserInput","url":"api/UserInput#OnInputTypeChange","content":"&lt;/&gt; UserInput.OnInputTypeChange: Signal&lt;newInputType: string | nil&gt; A signal which is fired whenever the input type of the client changes. "},{"title":"Functions","type":1,"pageTitle":"UserInput","url":"api/UserInput#functions","content":" "},{"title":"Get","type":1,"pageTitle":"UserInput","url":"api/UserInput#Get","content":"&lt;/&gt; UserInput.Get(moduleName: string) → table Requires the module moduleName (if retrievable) and returns it. Retrievable modules Mouse Keyboard local keyboard = UserInput.Get(&quot;Keyboard&quot;) keyboard.OnKeyDown:Connect(function(key, processed) print(key) end)   "},{"title":"GetLastInputType","type":1,"pageTitle":"UserInput","url":"api/UserInput#GetLastInputType","content":"&lt;/&gt; UserInput.GetLastInputType() → string | nil Returns the last input type of the client. "},{"title":"Timer","type":0,"sectionRef":"#","url":"api/Timer","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"Timer","url":"api/Timer#properties","content":" "},{"title":"Boost","type":1,"pageTitle":"Timer","url":"api/Timer#Boost","content":"Timer &lt;/&gt; Timer.Boost: number A value which by default is 0 if there was no initial boost specified during the creation of the timer. This value is added to the delta time the timer is updated every approximate frame, so increasing it will lead to faster timer updates.  "},{"title":"OnTick","type":1,"pageTitle":"Timer","url":"api/Timer#OnTick","content":"Timer &lt;/&gt; Timer.OnTick: Signal&lt;deltaTime: number&gt; A signal which is fired whenever the timer &quot;ticks&quot; (when started). timer.OnTick:Connect(function(deltaTime) warn((&quot;After %d seconds, tick!&quot;):format(deltaTime)) end) timer:Start()  "},{"title":"Functions","type":1,"pageTitle":"Timer","url":"api/Timer#functions","content":" "},{"title":"IsA","type":1,"pageTitle":"Timer","url":"api/Timer#IsA","content":"&lt;/&gt; Timer.IsA(self: any) → boolean Returns a boolean indicating if the provided argument is a timer or not.  "},{"title":"new","type":1,"pageTitle":"Timer","url":"api/Timer#new","content":"&lt;/&gt; Timer.new( timer: number, initialBoost: number | nil ) → Timer Creates and returns a new timer. If initialBoost is specified, it will be set to the timer's Boost member.  "},{"title":"Destroy","type":1,"pageTitle":"Timer","url":"api/Timer#Destroy","content":"Timer &lt;/&gt; Timer:Destroy() → () Destroys the timer and makes it unusuable. warning Trivial errors will occur if your code unintentionally works on a destroyed timer, only call this method when you're done working with the timer.  "},{"title":"IsPaused","type":1,"pageTitle":"Timer","url":"api/Timer#IsPaused","content":"Timer &lt;/&gt; Timer:IsPaused() → boolean Returns a boolean indicating if the timer has being paused.  "},{"title":"IsStopped","type":1,"pageTitle":"Timer","url":"api/Timer#IsStopped","content":"Timer &lt;/&gt; Timer:IsStopped() → boolean Returns a boolean indicating if the timer has stopped.  "},{"title":"Pause","type":1,"pageTitle":"Timer","url":"api/Timer#Pause","content":"Timer &lt;/&gt; Timer:Pause() → () Pauses the timer.  "},{"title":"Reset","type":1,"pageTitle":"Timer","url":"api/Timer#Reset","content":"Timer &lt;/&gt; Timer:Reset() → () Resets the timer.  "},{"title":"Start","type":1,"pageTitle":"Timer","url":"api/Timer#Start","content":"Timer &lt;/&gt; Timer:Start() → () Starts the timer.  "},{"title":"Stop","type":1,"pageTitle":"Timer","url":"api/Timer#Stop","content":"Timer &lt;/&gt; Timer:Stop() → () Stops the timer.  "},{"title":"Unpause","type":1,"pageTitle":"Timer","url":"api/Timer#Unpause","content":"Timer &lt;/&gt; Timer:Unpause() → () Unpauses the timer. "},{"title":"Getting started","type":0,"sectionRef":"#","url":"docs/intro","content":"","keywords":""},{"title":"Wally Setup","type":1,"pageTitle":"Getting started","url":"docs/intro#wally-setup","content":"Run wally init on your project's directory, and then add the various utility modules through the wally.toml file. For e.g, the following would be a wally.toml file for a project that needs a signal and a maid module: [package]name = &quot;finobinos/Project&quot;version = &quot;0.1.0&quot;registry = &quot;https://github.com/UpliftGames/wally-index&quot;realm = &quot;shared&quot; [dependencies]Signal = &quot;finobinos/signal@3.0.1&quot;Maid = &quot;finobinos/maid@3.0.0&quot; Copy These dependencies can be then installed to your project through wally install, which will create a folder Packages in your project containing the dependencies. "},{"title":"Rojo setup","type":1,"pageTitle":"Getting started","url":"docs/intro#rojo-setup","content":"The package folder created can then be synced into Roblox Studio through Rojo. The following default.project.json file would be used to sync the package folder into Roblox Studio: { &quot;name&quot;: &quot;Project&quot;, &quot;tree&quot;: { &quot;$className&quot;: &quot;DataModel&quot;, &quot;ReplicatedStorage&quot;: { &quot;$className&quot;: &quot;ReplicatedStorage&quot;, &quot;Packages&quot;: { &quot;$path&quot;: &quot;Packages&quot; } } }} Copy "},{"title":"TableUtil","type":0,"sectionRef":"#","url":"api/TableUtil","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#functions","content":" "},{"title":"AreTablesSame","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#AreTablesSame","content":"&lt;/&gt; TableUtil.AreTablesSame( tabl: table, otherTable: table ) → boolean A method which checks if both tabl and otherTable are exactly equal. Also accounts for nested values. local t1 = {1, 2, 3, 4, 5, {a = 4}} local t2 = {1, 2, 3, 4, 5, {a = 3}} print(TableUtil.AreTablesSame(t1, t2)) --&gt; false local t1 = {1, 2, 3, 4, 5, {a = 4}} local t2 = {1, 2, 3, 4, 5, {a = 4}} print(TableUtil.AreTablesSame(t1, t2)) --&gt; true tip This method accounts for cyclic tables, and is handles a lot of edge cases.  "},{"title":"CombineTables","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#CombineTables","content":"&lt;/&gt; TableUtil.CombineTables(...: table) → table A method which combines all tables ... into 1 single mega table. local t = {1, 2, 3, 4, 5} local t1 = {7, 8, 9} local t2 = {10, 11, 12} local combinedTable = TableUtil.CombineTables(t, t1, t2) print(combinedTable) --&gt; {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}   "},{"title":"ConvertTableIndicesToStartFrom","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#ConvertTableIndicesToStartFrom","content":"&lt;/&gt; TableUtil.ConvertTableIndicesToStartFrom( tabl: table, index: number ) → table A method which maps all numerical indices of the values in tabl to start from index. This method also accounts for nested tables. Returns tabl. local t = {1, 2, 3, 4, 5} TableUtil.ConvertTableIndicesToStartFrom(t, 0) print(t[0], t[1], t[2], t[3]) --&gt; 1, 2, 3, 4 tip This method accounts for cyclic tables.  "},{"title":"DeepCopyTable","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#DeepCopyTable","content":"&lt;/&gt; TableUtil.DeepCopyTable(tabl: table) → table Unfreezes tabl via table.unfreeze, and all other nested tables in tabl. tip This method accounts for cyclic tables.  "},{"title":"DeepFreezeTable","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#DeepFreezeTable","content":"&lt;/&gt; TableUtil.DeepFreezeTable(tabl: table) → table Freezes tabl via table.freeze, and all other nested tables in tabl. tip This method accounts for cyclic tables.  "},{"title":"EmptyTable","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#EmptyTable","content":"&lt;/&gt; TableUtil.EmptyTable(tabl: table) → () Clears out all keys in tabl. local t = {1, 2, 3, 4, 5} TableUtil.EmptyTable(t) print(t) --&gt; {}   "},{"title":"GetCount","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#GetCount","content":"&lt;/&gt; TableUtil.GetCount(tabl: table) → number A method which returns a number of all the elements in tabl. local t = {1, 2, 3, 4, 5, a = 5, b = 6} print(TableUtil.GetCount(t)) --&gt; 7   "},{"title":"GetKeyFromValue","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#GetKeyFromValue","content":"&lt;/&gt; TableUtil.GetKeyFromValue( tabl: table, value: any ) → any A method which returns the key in which value is stored at in tabl. local t = {a = 5, b = 10} print(TableUtil.GetKeyFromValue(t, 5)) --&gt; &quot;a&quot; note This method will not work well for different keys which have the same value, and doesn't account for nested values.  "},{"title":"IsTableEmpty","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#IsTableEmpty","content":"&lt;/&gt; TableUtil.IsTableEmpty(tabl: table) → ( boolean, table ) Returns a boolean indicating if tabl is empty i.e it is basically {}. For arrays with no holes, the # operator should be used instead.  "},{"title":"Map","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#Map","content":"&lt;/&gt; TableUtil.Map( tabl: table, callback: function ) → table Performs a map against tabl, which can be used to map new values based on the old values at given indices. Returns tabl. local t = {1, 2, 3, 4, 5} local t2 = TableUtil.Map(t, function(key, value) return value * 2 end) print(t2) --&gt; {2, 4, 6, 8, 10}   "},{"title":"ReconcileTable","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#ReconcileTable","content":"&lt;/&gt; TableUtil.ReconcileTable( tabl: table, templateTable: table ) → table Adds all missing elements from templateTable to tabl, and also sets the metatable of tabl to templateTable. Returns tabl. local t1 = {} local templateTable = {1, 2, 3} TableUtil.ReconcileTable(t1, templateTable) print(t1) --&gt; {1, 2, 3}   "},{"title":"ReverseTable","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#ReverseTable","content":"&lt;/&gt; TableUtil.ReverseTable(tabl: table) → table A method which reverses tabl. Returns tabl. note This method assumes that tabl is an array with no holes. local t = {1, 2, 3, 4, 5} TableUtil.ReverseTable(t) print(t) --&gt; {5, 4, 3, 2, 2, 1}   "},{"title":"ShallowCopyTable","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#ShallowCopyTable","content":"&lt;/&gt; TableUtil.ShallowCopyTable(tabl: table) → table Shallow copies all elements in tabl to a new table, i.e only the &quot;children&quot; of tabl are considered and not their descendants. local t1 = { 1, 2, 3, { a = {} } } print(TableUtil.ShallowCopyTable(t1))   "},{"title":"ShuffleTable","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#ShuffleTable","content":"&lt;/&gt; TableUtil.ShuffleTable( tabl: table, randomObject: Random | nil ) → table Shuffles tabl such that the indices will have values of other indices in tabl in a random way. If randomObject is specified, it will be used instead to shuffle tabl. Returns tabl. note This method assumes that tabl is an array with no holes. local t1 = {1, 2, 3, 4, 5} local shuffledTable = TableUtil.ShuffleTable(t1) print(shuffledTable) --&gt; {3, 2, 4, 5, 1, 6}   "},{"title":"SyncTable","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#SyncTable","content":"&lt;/&gt; TableUtil.SyncTable( tabl: table, templateSyncTable: table ) → table Syncs tabl to templateSyncTable such that tabl will have exactly the same keys and values that are in templateSyncTable. Returns tabl. local t = {a = 5, b = {}} local templateT = {a = {}, b = 5} TableUtil.SyncTable(t, templateT) print(t) --&gt; {a = {}, b = 5} tip This method accounts for cyclic tables. "}]