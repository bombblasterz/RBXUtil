[{"title":"Keyboard","type":0,"sectionRef":"#","url":"api/Keyboard","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"Keyboard","url":"api/Keyboard#functions","content":" "},{"title":"AreAllKeysDown","type":1,"pageTitle":"Keyboard","url":"api/Keyboard#AreAllKeysDown","content":"&lt;/&gt; Keyboard.AreAllKeysDown(...: EnumItem) → boolean A method which returns a boolean indicating if all keys in ... are held down.  "},{"title":"AreAnyKeysDown","type":1,"pageTitle":"Keyboard","url":"api/Keyboard#AreAnyKeysDown","content":"&lt;/&gt; Keyboard.AreAnyKeysDown(...: EnumItem) → boolean A method which returns a boolean indicating if any keys in ... are held down.  "},{"title":"IsKeyDown","type":1,"pageTitle":"Keyboard","url":"api/Keyboard#IsKeyDown","content":"&lt;/&gt; Keyboard.IsKeyDown(keycode: EnumItem) → boolean A method which returns a boolean indicating if keycode is held down. "},{"title":"CommunicationSignal","type":0,"sectionRef":"#","url":"api/CommunicationSignal","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#functions","content":" "},{"title":"new","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#new","content":"&lt;/&gt; CommunicationSignal.new(identifier: string) → CommunicationSignal Creates and returns a new communication signal with the identifier of identifier.  "},{"title":"GetSignal","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#GetSignal","content":"&lt;/&gt; CommunicationSignal.GetSignal(identifier: string) → CommunicationSignal? Returns the communication signal whose identifier is identifier.  "},{"title":"IsA","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#IsA","content":"&lt;/&gt; CommunicationSignal.IsA(self: any) → boolean A method which returns a boolean indicating if self is a communication signal or not.  "},{"title":"Bind","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#Bind","content":"CommunicationSignal &lt;/&gt; CommunicationSignal:Bind( key: string, value: RemoteSignal | RemoteProperty | function | boolean | string | number | Instance | table ) → () Binds and exposes a new key key with value value to the client. note Remote function limitations apply, see Remote Functions and Events. warning It is not safe to access value if the communication signal has been destroyed as the binded value will also be destroyed (assuming it is a remote signal or remote property).  "},{"title":"DispatchToClient","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#DispatchToClient","content":"CommunicationSignal &lt;/&gt; CommunicationSignal:DispatchToClient() → () Dispatches the communication signal to the client.  "},{"title":"IsDispatchedToClient","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#IsDispatchedToClient","content":"CommunicationSignal &lt;/&gt; CommunicationSignal:IsDispatchedToClient() → boolean Returns a boolean indicating if the communication signal has been dispatched to the client.  "},{"title":"Destroy","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#Destroy","content":"CommunicationSignal &lt;/&gt; CommunicationSignal:Destroy() → () Destroys the communication signal and makes it unusable, also destroys the client counterpart and makes it unusuable. warning Trivial errors will occur if your code unintentionally works on a destroyed communication signal, only call this method when you're done working with it! "},{"title":"ClientRemoteProperty","type":0,"sectionRef":"#","url":"api/ClientRemoteProperty","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#properties","content":" "},{"title":"OnValueUpdate","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#OnValueUpdate","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ClientRemoteProperty.OnValueUpdate: Signal&lt;newValue: any&gt; A signal which is fired whenever the value of the client remote property is updated. "},{"title":"Functions","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#functions","content":" "},{"title":"IsA","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#IsA","content":"&lt;/&gt; ClientRemoteProperty.IsA(self: any) → boolean A method which returns a boolean indicating if self is a client remote property or not.  "},{"title":"new","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#new","content":"&lt;/&gt; ClientRemoteProperty.new(currentValue: any) → ClientRemoteProperty Creates and returns a new client remote property.  "},{"title":"IsBoundToServer","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#IsBoundToServer","content":"ClientRemoteProperty &lt;/&gt; ClientRemoteProperty:IsBoundToServer() → boolean Returns a boolean indicating if the client remote property is bound to the server (remote property).  "},{"title":"Destroy","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#Destroy","content":"ClientRemoteProperty &lt;/&gt; ClientRemoteProperty:Destroy() → () Destroys the client remote property and makes it unusable. note The client remote property will also be destroyed if the remote property it was bound to is destroyed. It is undefined behavior to destroy a client remote property if it is bound to the server. warning Trivial errors will occur if your code unintentionally works on a destroyed client remote property, only call this method when you're done working with it!  "},{"title":"SetValue","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#SetValue","content":"ClientRemoteProperty &lt;/&gt; ClientRemoteProperty:SetValue(newValue: any) → () Sets the value of the client remote property to newValue. warning This method is illegal to call if the client remote property is bound to the server.  "},{"title":"GetValue","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#GetValue","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields ClientRemoteProperty &lt;/&gt; ClientRemoteProperty:GetValue() → any Returns the value of the client remote property. If bound by the server, then it will retrieve the value of the client from it's serverside counter part and if there is no value set specifically for the client, then the value retured will be the current value of the serverside counter part. note This method may temporarily yield the thread. "},{"title":"Maid","type":0,"sectionRef":"#","url":"api/Maid","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"Maid","url":"api/Maid#functions","content":" "},{"title":"new","type":1,"pageTitle":"Maid","url":"api/Maid#new","content":"&lt;/&gt; Maid.new() → Maid A constructor method which creates and returns a new maid.  "},{"title":"IsA","type":1,"pageTitle":"Maid","url":"api/Maid#IsA","content":"&lt;/&gt; Maid.IsA(self: any) → boolean A method which is used to check if the given argument is a maid or not.  "},{"title":"AddTask","type":1,"pageTitle":"Maid","url":"api/Maid#AddTask","content":"Maid &lt;/&gt; Maid:AddTask(task: function | RBXScriptConnection | table | Instance) → task Adds a task for the maid to cleanup. note If table is passed as a task, it must have a Destroy or Disconnect method so that it can be cleaned up.  "},{"title":"RemoveTask","type":1,"pageTitle":"Maid","url":"api/Maid#RemoveTask","content":"Maid &lt;/&gt; Maid:RemoveTask(task: task) → () Removes the task (assuming it was added as an task for the maid to cleanup) so that it will not be cleaned up.  "},{"title":"RemoveTaskAndCleanup","type":1,"pageTitle":"Maid","url":"api/Maid#RemoveTaskAndCleanup","content":"Maid &lt;/&gt; Maid:RemoveTaskAndCleanup(task: task) → () Works the same as Maid:RemoveTask, but also cleans up task for the last time.  "},{"title":"Cleanup","type":1,"pageTitle":"Maid","url":"api/Maid#Cleanup","content":"Maid &lt;/&gt; Maid:Cleanup() → () Cleans up all the added tasks. Task Type function The function will be called. table Any Destroy or Disconnect method in the table will be called. Instance The instance will be destroyed. RBXScriptConnection The connection will be disconnected.   "},{"title":"Destroy","type":1,"pageTitle":"Maid","url":"api/Maid#Destroy","content":"Maid &lt;/&gt; Maid:Destroy() → () Destroys the maid and makes it unusuable. warning Trivial errors will occur if your code unintentionally works on a destroyed maid, only call this method when you're done working with the maid.  "},{"title":"LinkToInstance","type":1,"pageTitle":"Maid","url":"api/Maid#LinkToInstance","content":"&lt;/&gt; Maid:LinkToInstance( instance: Instance, callback: function? ) → Instance,Connection Links the given instance to the maid so that the maid will be destroyed once the instance has been removed from the game i.e parented to nil. If callback is specified, it will be called before destroying the maid (when the instance is parented to nil) and if the function upon being called doesn't return a truthy value, the maid will not be destroyed. For e.g: local instance = ... -- some instance parented to workspace local maid = Maid.new() maid:AddTask(function() warn(&quot;cleaned up&quot;) end) maid:LinkToInstance(instance) instance.Parent = nil -- Now the maid will cleanup as the instance is parented to nil. Here's an alternate case: local instance = ... -- some instance parented to workspace local maid = Maid.new() maid:AddTask(function() warn(&quot;cleaned up&quot;) end) maid:LinkToInstance(instance, function() return not instance:GetAttribute(&quot;DontHaveTheMaidCleanedupYetPlease&quot;) end)) instance:SetAttribute(&quot;DontHaveTheMaidCleanedupYetPlease&quot;, true) instance.Parent = nil -- The instance is parented to nil, but the maid hasn't cleaned up! A connection is returned so that once it is disconnected, the maid will unlink from the instance. The connection will automatically be disconnected once the maid is destroyed and contains the following methods: Methods Description Disconnect The connection will be disconnected and the maid will unlink to the instance it was linked to. IsConnected Returns a boolean indicating if the connection has been disconnected.  "},{"title":"ClientRemoteSignal","type":0,"sectionRef":"#","url":"api/ClientRemoteSignal","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#functions","content":" "},{"title":"IsA","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#IsA","content":"&lt;/&gt; ClientRemoteSignal.IsA(self: any) → boolean A method which returns a boolean indicating if self is a client remote signal or not.  "},{"title":"new","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#new","content":"&lt;/&gt; ClientRemoteSignal.new() → ClientRemoteSignal Creates and returns a new client remote signal.  "},{"title":"IsBoundToServer","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#IsBoundToServer","content":"ClientRemoteSignal &lt;/&gt; ClientRemoteSignal:IsBoundToServer() → boolean Returns a boolean indicating if the client remote signal is bound to the server (remote signal).  "},{"title":"Connect","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#Connect","content":"ClientRemoteSignal &lt;/&gt; ClientRemoteSignal:Connect(callback: function) → RBXScriptConnection Same as self._remote:Connect(callback).  "},{"title":"FireServer","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#FireServer","content":"ClientRemoteSignal &lt;/&gt; ClientRemoteSignal:FireServer(...: any) → () Same as self._remote:FireServer(...).  "},{"title":"Destroy","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#Destroy","content":"ClientRemoteSignal &lt;/&gt; ClientRemoteSignal:Destroy(...: any) → () Destroys the client remote signal and makes it unusuable. note The client remote signal will also be destroyed if the remote signal it was bound to was destroyed. note It is undefined behavior to destroy a client remote signal if it is bound to the server. warning Trivial errors will occur if your code unintentionally works on a destroyed client remote signal, only call this method when you're done working with it!  "},{"title":"Wait","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#Wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ClientRemoteSignal:Wait() → ... Same as self._remote.OnClientEvent:Wait(). "},{"title":"Ray","type":0,"sectionRef":"#","url":"api/Ray","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"Ray","url":"api/Ray#properties","content":" "},{"title":"Origin","type":1,"pageTitle":"Ray","url":"api/Ray#Origin","content":"This item is read only and cannot be modified. Read Only Ray &lt;/&gt; Ray.Origin: Vector3 The origin of the ray.  "},{"title":"Direction","type":1,"pageTitle":"Ray","url":"api/Ray#Direction","content":"This item is read only and cannot be modified. Read Only Ray &lt;/&gt; Ray.Direction: Vector3 The direction of the ray, relative to it's origin.  "},{"title":"Unit","type":1,"pageTitle":"Ray","url":"api/Ray#Unit","content":"This item is read only and cannot be modified. Read Only Ray &lt;/&gt; Ray.Unit: Vector3 The unit vector of the direction. Note that in a certain edge case where the direction is Vector3.new(0, 0, 0), then this will be Vector3.new(0, 1, 0).  "},{"title":"Size","type":1,"pageTitle":"Ray","url":"api/Ray#Size","content":"This item is read only and cannot be modified. Read Only Ray &lt;/&gt; Ray.Size: number The size of the ray from it's origin to it's final position.  "},{"title":"OnInstanceHit","type":1,"pageTitle":"Ray","url":"api/Ray#OnInstanceHit","content":"This item is read only and cannot be modified. Read Only Ray &lt;/&gt; Ray.OnInstanceHit: Signal&lt;instanceHit: Instance&gt; A signal which is fired whenever an instance &quot;hits&quot; the ray, respecting raycast params (if provided).  "},{"title":"Visualizer","type":1,"pageTitle":"Ray","url":"api/Ray#Visualizer","content":"Ray &lt;/&gt; Ray.Visualizer: Instance An instance which is used to visualize the ray. note Ray visualizers will never be 100% accurate, due to how small rays actually are. However, they will be accurate up to 99.2% if their thickness is the default (i.e not set through Ray:SetVisualizerThickness).  "},{"title":"Results","type":1,"pageTitle":"Ray","url":"api/Ray#Results","content":"This item is read only and cannot be modified. Read Only Ray &lt;/&gt; Ray.Results: table A table of raycast results. Results Description Instance The BasePart or Terrain cell that the ray intersected. Position The world space point at which the intersection occurred, usually a point directly on the surface of the instance. Material The Material at the intersection point. For normal parts this is the BasePart.Material; for Terrain this can vary depending on terrain data. Normal The normal vector of the intersected face.  "},{"title":"Functions","type":1,"pageTitle":"Ray","url":"api/Ray#functions","content":" "},{"title":"IsA","type":1,"pageTitle":"Ray","url":"api/Ray#IsA","content":"&lt;/&gt; Ray.IsA(self: any) → boolean A method which returns a boolean indicating if self is a ray or not.  "},{"title":"new","type":1,"pageTitle":"Ray","url":"api/Ray#new","content":"&lt;/&gt; Ray.new( origin: Vector3?, direction: Vector3, params: RaycastParams? ) → Ray A constructor which creates and returns a new ray from origin, direction and params (if provided). note origin and direction must not be equal to prevent certain CFrame edge cases.  "},{"title":"Visualize","type":1,"pageTitle":"Ray","url":"api/Ray#Visualize","content":"Ray &lt;/&gt; Ray:Visualize() → () Visualizes the ray.  "},{"title":"SetVisualizerThickness","type":1,"pageTitle":"Ray","url":"api/Ray#SetVisualizerThickness","content":"Ray &lt;/&gt; Ray:SetVisualizerThickness() → () Sets the thickness of the ray visualizer.  "},{"title":"Unvisualize","type":1,"pageTitle":"Ray","url":"api/Ray#Unvisualize","content":"Ray &lt;/&gt; Ray:Unvisualize() → () Unvisualizes the ray.  "},{"title":"GetTouchingParts","type":1,"pageTitle":"Ray","url":"api/Ray#GetTouchingParts","content":"Ray &lt;/&gt; Ray:GetTouchingParts(maxTouchingParts: number) → table Gets and returns all the parts the ray is touching within a specified limit maxTouchingParts (or 10 if not provided), respecting the raycast params provided to the constructor.  "},{"title":"AddTargetFilter","type":1,"pageTitle":"Ray","url":"api/Ray#AddTargetFilter","content":"&lt;/&gt; Ray:AddTargetFilter(targetFilters: table) → () Adds all instances in targetFilter so that they will be filtered out when calculating the instances the ray is touching.  "},{"title":"SetTargetFilterType","type":1,"pageTitle":"Ray","url":"api/Ray#SetTargetFilterType","content":"Ray &lt;/&gt; Ray:SetTargetFilterType(targetFilterType: EnumItem) → () Sets the filter type to targetFilterType which is used internally in filtering instances added through Ray:AddTargetFilter when calculating the parts the ray is touching. EnumItem Description Enum.RaycastFilterType.Whitelist Only the instances added through Ray:AddTargetFilter will be respected. Enum.RaycastFilterType.Blacklist The instances added through Ray:AddTargetFilter will be ignored. By default, the filter type used internally is set to Enum.RaycastFilterType.Blacklist. note targetFilterType must be Enum.RaycastFilterType.Whitelist or Enum.RaycastFilterType.Blacklist.  "},{"title":"RemoveTargetFilter","type":1,"pageTitle":"Ray","url":"api/Ray#RemoveTargetFilter","content":"Ray &lt;/&gt; Ray:RemoveTargetFilter(targetFilter: table) → () Removes all instances in targetFilter so that they will not be filtered out when calculating the instances the ray is touching.  "},{"title":"Update","type":1,"pageTitle":"Ray","url":"api/Ray#Update","content":"Ray &lt;/&gt; Ray:Update(data: table) → () A very useful method which is used for dynamically updating the origin, direction or the size of the ray. Data members Description Origin : Vector3 The new origin to update to. Direction : Vector3 The new direction to update to. Size : number The new size to update to. note Note that at least 1 of these members must be specified. tip Other neccesary data such as the ray visualizer and other properties wil be updated as well to accommodate the new changes.  "},{"title":"Destroy","type":1,"pageTitle":"Ray","url":"api/Ray#Destroy","content":"Ray &lt;/&gt; Ray:Destroy() → () Destroys the ray and makes it unusable. warning Trivial errors will occur if your code unintentionally works on a destroyed ray, only call this method when you're done working with the ray! "},{"title":"RemoteSignal","type":0,"sectionRef":"#","url":"api/RemoteSignal","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#functions","content":" "},{"title":"IsA","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#IsA","content":"&lt;/&gt; RemoteSignal.IsA(self: any) → boolean A method which returns a boolean indicating if self is a remote signal or not.  "},{"title":"new","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#new","content":"&lt;/&gt; RemoteSignal.new() → RemoteSignal Creates and returns a new remote signal.  "},{"title":"IsBoundToClient","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#IsBoundToClient","content":"RemoteSignal &lt;/&gt; RemoteSignal:IsBoundToClient() → boolean Returns a boolean indicating if the remote signal is bound to the client.  "},{"title":"Destroy","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#Destroy","content":"RemoteSignal &lt;/&gt; RemoteSignal:Destroy() → () Destroys the remote signal and makes it unusuable, also destroys the client remote signal binded to it. warning Trivial errors will occur if your code unintentionally works on a destroyed remote signal, only call this method when you're done working with it!  "},{"title":"Connect","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#Connect","content":"RemoteSignal &lt;/&gt; RemoteSignal:Connect() → RBXScriptConnection Works the same as self._remote:Connect(callback).  "},{"title":"FireClient","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#FireClient","content":"RemoteSignal &lt;/&gt; RemoteSignal:FireClient( client: Player, ...: any ) → () Works the same as self._remote:FireClient(client, ...).  "},{"title":"FireAllClients","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#FireAllClients","content":"RemoteSignal &lt;/&gt; RemoteSignal:FireAllClients(...: any) → () Works the same as self._remote:FireAllClients(player, ...).  "},{"title":"FireSpecificClients","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#FireSpecificClients","content":"RemoteSignal &lt;/&gt; RemoteSignal:FireSpecificClients( clients: table, ...: any ) → () Works the same as self._remote:FireClient(player, ...), but for all players in the clients table. "},{"title":"ClientCommunicationSignal","type":0,"sectionRef":"#","url":"api/ClientCommunicationSignal","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#properties","content":" "},{"title":"Members","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#Members","content":"This item is read only and cannot be modified. Read Only ClientCommunicationSignal &lt;/&gt; ClientCommunicationSignal.Members: table A dictionary of all members binded to the signal.  "},{"title":"RemoteSignals","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#RemoteSignals","content":"This item is read only and cannot be modified. Read Only ClientCommunicationSignal &lt;/&gt; ClientCommunicationSignal.RemoteSignals: table A dictionary of all remote signals binded to the signal.  "},{"title":"RemoteProperties","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#RemoteProperties","content":"This item is read only and cannot be modified. Read Only ClientCommunicationSignal &lt;/&gt; ClientCommunicationSignal.RemoteProperties: table A dictionary of all remote properties binded to the signal.  "},{"title":"Members","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#Members","content":"This item is read only and cannot be modified. Read Only ClientCommunicationSignal &lt;/&gt; ClientCommunicationSignal.Members: table A dictionary of all members binded to the signal.  "},{"title":"RemoteSignals","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#RemoteSignals","content":"This item is read only and cannot be modified. Read Only ClientCommunicationSignal &lt;/&gt; ClientCommunicationSignal.RemoteSignals: table A dictionary of all remote signals binded to the signal.  "},{"title":"RemoteProperties","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#RemoteProperties","content":"This item is read only and cannot be modified. Read Only ClientCommunicationSignal &lt;/&gt; ClientCommunicationSignal.RemoteProperties: table A dictionary of all remote properties binded to the signal. "},{"title":"Functions","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#functions","content":" "},{"title":"GetDispatchedSignal","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#GetDispatchedSignal","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ClientCommunicationSignal.GetDispatchedSignal( identifier: string, timeout: number? ) → Promise Returns a promise which is resolved with the serverside dispatched signal if found. If timeout is specified, then the method will wait for timeout seconds for the serverside dispatched signal to exist before assuming that it doesn't and rejecting with a nil value. -- On the server: local signal = CommunicationSignal.new(&quot;Signal&quot;) signal:Bind(&quot;bo&quot;, true) -- On the client: ClientCommunicationSignal.GetDispatchedSignal(&quot;Signal&quot;):andThen(function(signal) print(signal.Members.bo) --&gt; true end) tip Calling this method for the same dispatched signal will return cached results. For e.g: -- On the server: local signal = CommunicationSignal.new(&quot;Signal&quot;) signal:Bind(&quot;bo&quot;, true) signal:DispatchToClient() -- On the client: local s = ClientCommunicationSignal.GetDispatchedSignal(&quot;Signal&quot;):expect() local o = ClientCommunicationSignal.GetDispatchedSignal(&quot;Signal&quot;):expect() print(s == o) warning The returned communication signal will also be destroyed once the dispatched signal's serverside counterpart is destroyed. For e.g: -- On the server: local signal = CommunicationSignal.new(&quot;Signal&quot;) signal:DispatchToClient() task.delay(5, function() signal:Destroy() end)) -- On the client local sig = ClientCommunicationSignal.GetDispatchedSignal(&quot;Signal&quot;):expect() print(typeof(sig.Members)) --&gt; &quot;table&quot; task.wait(5) -- wait for it to be destroyed on the server print(typeof(sig.Members)) --&gt; &quot;nil&quot;   "},{"title":"IsA","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#IsA","content":"&lt;/&gt; ClientCommunicationSignal.IsA(self: any) → boolean A method which returns a boolean indicating if self is a client communication signal or not.  "},{"title":"Build","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#Build","content":"&lt;/&gt; ClientCommunicationSignal:Build() → table A method which builds the communication signal for client-side use. For e.g: -- On the server: local signal = CommunicationSignal.new(&quot;Signal&quot;) signal:Bind(&quot;Table&quot;, {1,2,3}) signal:DispatchToClient() -- On the client: local clientCommunicationSignal = ClientCommunicationSignal.GetDispatchedSignal(&quot;Signal&quot;):expect() local builtDispatchedSignal = clientCommunicationSignal:Build() -- Normally to access members you would do: print(clientCommunicationSignal.Members.Table) --&gt; {1, 2, 3} -- Via dispatched signal: print(builtDispatchedSignal.Table) --&gt; {1, 2, 3} tip Calling this method again will return cached results. For e.g: local s = clientCommunicationSignal:Build() local o = clientCommunicationSignal:Build() print(s == o) --&gt; true   "},{"title":"GetMethod","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#GetMethod","content":"&lt;/&gt; ClientCommunicationSignal:GetMethod(name: string) → function? A method which returns a method of key name in the signal. "},{"title":"RemoteProperty","type":0,"sectionRef":"#","url":"api/RemoteProperty","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#properties","content":" "},{"title":"OnValueUpdate","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#OnValueUpdate","content":"This item is read only and cannot be modified. Read Only RemoteProperty &lt;/&gt; RemoteProperty.OnValueUpdate: Signal&lt;newValue: any&gt; A signal which is fired whenever the value stored in the remote property is updated to a new one. remoteProperty.ValueUpdate:Connect(function(newValue) print((&quot;Value was updated to %s&quot;):format(tostring(newValue))) end)   "},{"title":"OnPlayerValueUpdate","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#OnPlayerValueUpdate","content":"This item is read only and cannot be modified. Read Only RemoteProperty &lt;/&gt; RemoteProperty.OnPlayerValueUpdate: Signal&lt;player: Player,newValue: any&gt; A signal which is fired whenever the value of a player is updated to a new one. remoteProperty.OnPlayerValueUpdate:Connect(function(player, newValue) print((&quot;%s's value was updated to %s&quot;):format(tostring(newValue))) end)  "},{"title":"Functions","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#functions","content":" "},{"title":"IsA","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#IsA","content":"&lt;/&gt; RemoteProperty.IsA(self: any) → boolean A method which returns a boolean indicating if self is a remote property or not.  "},{"title":"new","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#new","content":"&lt;/&gt; RemoteProperty.new(initialValue: any) → RemoteProperty Creates and returns a new remote property.  "},{"title":"IsBoundToClient","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#IsBoundToClient","content":"RemoteProperty &lt;/&gt; RemoteProperty:IsBoundToClient() → boolean Returns a boolean indicating if the remote property is bound to the client (client remote property).  "},{"title":"Destroy","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#Destroy","content":"RemoteProperty &lt;/&gt; RemoteProperty:Destroy() → () Destroys the remote property and makes it unusable, also destroys the client remote property binded to it. warning Trivial errors will occur if your code unintentionally works on a destroyed remote property, only call this method when you're done working with it!  "},{"title":"GetPlayerValue","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#GetPlayerValue","content":"RemoteProperty &lt;/&gt; RemoteProperty:GetPlayerValue(player: Player) → any Returns the specific value of player stored in the remote property, or the current value of the remote property.  "},{"title":"GetInitialValue","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#GetInitialValue","content":"RemoteProperty &lt;/&gt; RemoteProperty:GetInitialValue() → any Returns the initial value of the remote property passed during it's creation. For e.g: local remoteProperty = RemoteProperty.new(50) remoteProperty:SetValue(100) print(remoteProperty:GetInitialValue()) --&gt; 50   "},{"title":"SetSpecificPlayerValues","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#SetSpecificPlayerValues","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields RemoteProperty &lt;/&gt; RemoteProperty:SetSpecificPlayerValues( players: table, newValue: any ) → () Sets the value of each player (stored in the remote property) in players to newValue. warning This method is illegal to call if the remote property isn't bound to the client!  "},{"title":"SetAllPlayerValues","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#SetAllPlayerValues","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields RemoteProperty &lt;/&gt; RemoteProperty:SetAllPlayerValues(newValue: any) → () Sets the value of each player (stored in the remote property) to newValue. New players who don't have their values set, will have it set to this new value. note Remote function limitations apply. For more information, see Remote Functions and Events. warning This method is illegal to call if the remote property isn't bound to the client!  "},{"title":"SetPlayerValue","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#SetPlayerValue","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields RemoteProperty &lt;/&gt; RemoteProperty:SetPlayerValue( player: Player, newValue: any ) → () Sets the value of player (stored in the remote property) to newValue. note Remote function limitations apply. For more information, see Remote Functions and Events. warning This method is illegal to call if the remote property isn't bound to the client!  "},{"title":"GetValue","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#GetValue","content":"RemoteProperty &lt;/&gt; RemoteProperty:GetValue() → any Returns the current value of the remote property. "},{"title":"NumberUtil","type":0,"sectionRef":"#","url":"api/NumberUtil","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#properties","content":" "},{"title":"e","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#e","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; NumberUtil.e: number Known as Euler's number, is a mathematical constant approximately equal to 2.7182818284590.  "},{"title":"Tau","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#Tau","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; NumberUtil.Tau: number The circle constant representing the ratio between circumference and radius. The constant is equal to math.pi * 2 approximately.  "},{"title":"Phi","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#Phi","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; NumberUtil.Phi: number An irrational number which is often known as the golden ratio or the most beautiful number in maths.  "},{"title":"NaN","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#NaN","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; NumberUtil.NaN: NaN An NaN (Not a Number) value. "},{"title":"Functions","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#functions","content":" "},{"title":"Lerp","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#Lerp","content":"&lt;/&gt; NumberUtil.Lerp( number: number, goal: number, alpha: number ) → number Used for smoothly interpolating a number to goal, with alpha being the multiplier. For e.g: local number = 0 local goal = 3 while number &lt; goal do local alpha = task.wait(0.1) * 2 number = NumberUtil.Lerp(number, goal, alpha) print(number) end   "},{"title":"QuadraticLerp","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#QuadraticLerp","content":"&lt;/&gt; NumberUtil.QuadraticLerp( number: number, goal: number, alpha: number ) → number Same as NumberUtil.Lerp, except the lerp is quadratic.  "},{"title":"InverseLerp","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#InverseLerp","content":"&lt;/&gt; NumberUtil.InverseLerp( min: number, max: number, alpha: number ) → number Inversely lerps min to goal, with alpha being the multiplier.  "},{"title":"Map","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#Map","content":"&lt;/&gt; NumberUtil.Map( number: number, inMin: number, inMax: number, outMin: number, outMax: number ) → number Maps number between inMin, inMax, outMin and outMax.  "},{"title":"RoundTo","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#RoundTo","content":"&lt;/&gt; NumberUtil.RoundTo( number: number, to: number ) → number Rounds number to to.  "},{"title":"IsNaN","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#IsNaN","content":"&lt;/&gt; NumberUtil.IsNaN(number: number) → boolean Returns a boolean if the provided number is NaN (Not a Number).  "},{"title":"IsCloseTo","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#IsCloseTo","content":"&lt;/&gt; NumberUtil.IsCloseTo( number: number, to: number, eplison: number? ) → boolean Returns a boolean if the provided number is close to to under eplision (or the default eplison i.e 1e-5). print(0.1 + 0.2 == 0.3) --&gt; false (due to floating point imprecision) print(NumberUtil.IsCloseTo(0.1 + 0.2, 0.3)) --&gt; true   "},{"title":"Root","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#Root","content":"&lt;/&gt; NumberUtil.Root( number: number, root: number ) → number Returns the root of the number. print(NumberUtil.Root(2, 2)) --&gt; 1.4142135623731 (Square root) print(NumberUtil.Root(2, 3)) --&gt; 1.2599210498949 (Cube root)   "},{"title":"Factorial","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#Factorial","content":"&lt;/&gt; NumberUtil.Factorial(number: number) → number Returns the factorial of the number.  "},{"title":"GetFactorsOf","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#GetFactorsOf","content":"&lt;/&gt; NumberUtil.GetFactorsOf(number: number) → table Returns all the factors of the number.  "},{"title":"IsInfinite","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#IsInfinite","content":"&lt;/&gt; NumberUtil.IsInfinite(number: number) → boolean Returns a boolean indicating if the number is infinite i.e math.huge or not. "},{"title":"Mouse","type":0,"sectionRef":"#","url":"api/Mouse","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"Mouse","url":"api/Mouse#properties","content":" "},{"title":"OnLeftClick","type":1,"pageTitle":"Mouse","url":"api/Mouse#OnLeftClick","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Mouse.OnLeftClick: Signal&lt;isInputProcessed: boolean&gt; A signal fired whenever the user left clicks on their mouse.  "},{"title":"OnRightClick","type":1,"pageTitle":"Mouse","url":"api/Mouse#OnRightClick","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Mouse.OnRightClick: Signal&lt;isInputProcessed: boolean&gt; A signal fired whenever the user right clicks on their mouse.  "},{"title":"OnScrollClick","type":1,"pageTitle":"Mouse","url":"api/Mouse#OnScrollClick","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Mouse.OnScrollClick: Signal&lt;isInputProcessed: boolean&gt; A signal fired whenever the user scroll clicks on their mouse.  "},{"title":"OnMove","type":1,"pageTitle":"Mouse","url":"api/Mouse#OnMove","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Mouse.OnMove: Signal&lt;deltaPosition: Vector2&gt; A signal fired whenever the user moves their mouse.  "},{"title":"OnTargetChanged","type":1,"pageTitle":"Mouse","url":"api/Mouse#OnTargetChanged","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Mouse.OnTargetChanged: Signal&lt;newTarget: Instance?&gt; A signal fired whenever Mouse.Target changes.  "},{"title":"TargetFilters","type":1,"pageTitle":"Mouse","url":"api/Mouse#TargetFilters","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Mouse.TargetFilters: table A table of target filters, used in retrieving Mouse.Target and Mouse.Hit.  "},{"title":"TargetFilterType","type":1,"pageTitle":"Mouse","url":"api/Mouse#TargetFilterType","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Mouse.TargetFilterType: RaycastFilterType By default, the value is Enum.RaycastFilterType.Blacklist. Used as the filter type in retrieving Mouse.Target and Mouse.Hit. note This member should only be set to Enum.RaycastFilterType.Blacklist or Enum.RaycastFilterType.Whitelist.  "},{"title":"Hit","type":1,"pageTitle":"Mouse","url":"api/Mouse#Hit","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Mouse.Hit: CFrame The cframe the mouse hit in the 3D world.  "},{"title":"UnitRay","type":1,"pageTitle":"Mouse","url":"api/Mouse#UnitRay","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Mouse.UnitRay: Ray The unit ray from the mouse's 2D position to the 3D world.  "},{"title":"X","type":1,"pageTitle":"Mouse","url":"api/Mouse#X","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Mouse.X: number The X coordinate of the mouse's 2D position on the screen.  "},{"title":"X","type":1,"pageTitle":"Mouse","url":"api/Mouse#X","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Mouse.X: number The Y coordinate of the mouse's 2D position on the screen.  "},{"title":"Target","type":1,"pageTitle":"Mouse","url":"api/Mouse#Target","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Mouse.Target: Instance? The instance the mouse hit in the 3D world.  "},{"title":"Origin","type":1,"pageTitle":"Mouse","url":"api/Mouse#Origin","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Mouse.Origin: Vector3 The origin of the mouse i.e Workspace.CurrentCamera.CFrame.Position. "},{"title":"Functions","type":1,"pageTitle":"Mouse","url":"api/Mouse#functions","content":" "},{"title":"GetDeltaPosition","type":1,"pageTitle":"Mouse","url":"api/Mouse#GetDeltaPosition","content":"&lt;/&gt; Mouse.GetDeltaPosition() → Vector3 Returns the position of the mouse from the last frame to the current.  "},{"title":"CastRay","type":1,"pageTitle":"Mouse","url":"api/Mouse#CastRay","content":"&lt;/&gt; Mouse.CastRay( raycastParams: RaycastParams?, distance: number ) → RaycastResult? Casts a ray from the mouse's current position to it's position extended distance studs, respecting raycastParams if provided.  "},{"title":"LockCurrentPosition","type":1,"pageTitle":"Mouse","url":"api/Mouse#LockCurrentPosition","content":"&lt;/&gt; Mouse.LockCurrentPosition() → () Locks the mouse to it's current position, same as UserInputService.MouseBehavior = Enum.MouseBehavior.LockCurrentPosition.  "},{"title":"Unlock","type":1,"pageTitle":"Mouse","url":"api/Mouse#Unlock","content":"&lt;/&gt; Mouse.Unlock() → () Unlocks the mouse, same as UserInputService.MouseBehavior = Enum.MouseBehavior.Default.  "},{"title":"SetLockOnCenter","type":1,"pageTitle":"Mouse","url":"api/Mouse#SetLockOnCenter","content":"&lt;/&gt; Mouse.SetLockOnCenter() → () Locks the mouse to the center, same as UserInputService.MouseBehavior = Enum.MouseBehavior.LockCenter.  "},{"title":"AddTargetFilter","type":1,"pageTitle":"Mouse","url":"api/Mouse#AddTargetFilter","content":"&lt;/&gt; Mouse.AddTargetFilter(targetFilters: table) → () Adds all instances in targetFilter so that they will be filtered out when calculating Mouse.Hit and Mouse.Target.  "},{"title":"SetTargetFilterType","type":1,"pageTitle":"Mouse","url":"api/Mouse#SetTargetFilterType","content":"&lt;/&gt; Mouse.SetTargetFilterType(targetFilterType: EnumItem) → () Sets the filter type to targetFilterType which is used internally in filtering instances added through Mouse.AddTargetFilter when calculating Mouse.Hit and Mouse.Target. EnumItem Description Enum.RaycastFilterType.Whitelist Only the instances added through Mouse.AddTargetFilter will be respected. Enum.RaycastFilterType.Blacklist The instances added through Mouse.AddTargetFilter will be ignored. By default, the filter type is Enum.RaycastFilterType.Blacklist. note targetFilterType must be Enum.RaycastFilterType.Whitelist or Enum.RaycastFilterType.Blacklist.  "},{"title":"RemoveTargetFilter","type":1,"pageTitle":"Mouse","url":"api/Mouse#RemoveTargetFilter","content":"&lt;/&gt; Mouse.RemoveTargetFilter(targetFilter: table) → () Removes all instances in targetFilter so that they will not be filtered out when calculating Mouse.Hit and Mouse.Target. "},{"title":"UserInput","type":0,"sectionRef":"#","url":"api/UserInput","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"UserInput","url":"api/UserInput#properties","content":" "},{"title":"OnInputTypeChange","type":1,"pageTitle":"UserInput","url":"api/UserInput#OnInputTypeChange","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; UserInput.OnInputTypeChange: Signal&lt;newInputType: string?&gt; A signal which is fired whenever the input type of the client changes.  "},{"title":"Mouse","type":1,"pageTitle":"UserInput","url":"api/UserInput#Mouse","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; UserInput.Mouse: table The required mouse module.  "},{"title":"Keyboard","type":1,"pageTitle":"UserInput","url":"api/UserInput#Keyboard","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; UserInput.Keyboard: table The required keyboard module.  "},{"title":"InputType","type":1,"pageTitle":"UserInput","url":"api/UserInput#InputType","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; UserInput.InputType: table A dictionary of input types. InputType Mouse Keyboard Gamepad Touch Accelerometer Gyro Focus TextInput InputMethod  "},{"title":"Functions","type":1,"pageTitle":"UserInput","url":"api/UserInput#functions","content":" "},{"title":"GetLastInputType","type":1,"pageTitle":"UserInput","url":"api/UserInput#GetLastInputType","content":"&lt;/&gt; UserInput.GetLastInputType() → string? Returns the last input type of the client. "},{"title":"Getting started","type":0,"sectionRef":"#","url":"docs/intro","content":"","keywords":""},{"title":"Wally / Rojo workflow","type":1,"pageTitle":"Getting started","url":"docs/intro#wally--rojo-workflow","content":"Package\tDependency\tDescriptionNumberUtil\t&quot;finobinos/numberutil@1.1.1&quot;\tNumberUtil UserInput\t&quot;finobinos/userinput@1.1.6&quot;\tUserInputUtil TableUtil\t&quot;finobinos/tableutil@1.1.3&quot;\tTableUtil Component\t&quot;finobinos/component@1.3.6&quot;\tComponent class Maid\t&quot;finobinos/Maid@1.1.3&quot;\tMaid class Ray\t&quot;finobinos/raycast@1.1.6&quot;\tRay class Timer\t&quot;finobinos/timer@1.1.5&quot;\tTimer class Signal\t&quot;finobinos/signal@1.1.4&quot;\tSignal class Remote\t&quot;finobinos/remote@1.2.3&quot;\tRemoteUtil Run wally init on your project's directory, and then add the various utility modules through the wally.toml file. For e.g, the following would be a wally.toml file for a project that needs a signal and a maid module: [package]name = &quot;finobinos/Project&quot;version = &quot;0.1.0&quot;registry = &quot;https://github.com/UpliftGames/wally-index&quot;realm = &quot;shared&quot; [dependencies]Signal = &quot;finobinos/signal@1.1.3&quot;Maid = &quot;finobinos/maid@1.1.2&quot; Copy These dependencies can be then installed to your project through wally install, which will create a folder Packages in your project containing the dependencies. The package folder created can then be synced into Roblox Studio through Rojo. The following default.project.json file would be used to sync the package folder into Roblox Studio: { &quot;name&quot;: &quot;Project&quot;, &quot;tree&quot;: { &quot;$className&quot;: &quot;DataModel&quot;, &quot;ReplicatedStorage&quot;: { &quot;$className&quot;: &quot;ReplicatedStorage&quot;, &quot;Packages&quot;: { &quot;$path&quot;: &quot;Packages&quot; } } }} Copy "},{"title":"Roblox based workflow","type":1,"pageTitle":"Getting started","url":"docs/intro#roblox-based-workflow","content":"You can retrieve the packages from here. "},{"title":"Signal","type":0,"sectionRef":"#","url":"api/Signal","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"Signal","url":"api/Signal#properties","content":" "},{"title":"ActiveConnectionCount","type":1,"pageTitle":"Signal","url":"api/Signal#ActiveConnectionCount","content":"This item is read only and cannot be modified. Read Only Signal &lt;/&gt; Signal.ActiveConnectionCount: number The number of active connections. "},{"title":"Functions","type":1,"pageTitle":"Signal","url":"api/Signal#functions","content":" "},{"title":"IsA","type":1,"pageTitle":"Signal","url":"api/Signal#IsA","content":"&lt;/&gt; Signal.IsA(self: any) → boolean A method which returns a boolean indicating if self is a signal or not.  "},{"title":"new","type":1,"pageTitle":"Signal","url":"api/Signal#new","content":"&lt;/&gt; Signal.new() → Signal Creates and returns a new signal.  "},{"title":"Connect","type":1,"pageTitle":"Signal","url":"api/Signal#Connect","content":"Signal &lt;/&gt; Signal:Connect(callback: function) → Connection Connects callback to the signal so that it will be called when Signal:Fire or Signal:DeferredFire are called, and the arguments passed to them will be passed to callback. This method returns a connection which contains the following methods: Methods Description Disconnect The connection will be disconnected and callback will be disregarded. IsConnected Returns a boolean indicating if the connection has been disconnected.   "},{"title":"CleanupConnections","type":1,"pageTitle":"Signal","url":"api/Signal#CleanupConnections","content":"Signal &lt;/&gt; Signal:CleanupConnections() → () Disconnects all active connections.  "},{"title":"Destroy","type":1,"pageTitle":"Signal","url":"api/Signal#Destroy","content":"Signal &lt;/&gt; Signal:Destroy() → () Destroys the signal and makes it unusuable. warning Trivial errors will occur if your code unintentionally works on a destroyed signal, only call this method when you're done working with the signal.  "},{"title":"Wait","type":1,"pageTitle":"Signal","url":"api/Signal#Wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Signal &lt;/&gt; Signal:Wait() → () Yields the current Luau thread that called it until the signal is fired through Signal:Fire or Signal:DeferredFire. All arguments passed to them will be returned.  "},{"title":"Fire","type":1,"pageTitle":"Signal","url":"api/Signal#Fire","content":"Signal &lt;/&gt; Signal:Fire(...: any) → () Resumes any yielded threads and calls every connection's callback passing in ... as the argument.  "},{"title":"DeferredFire","type":1,"pageTitle":"Signal","url":"api/Signal#DeferredFire","content":"Signal &lt;/&gt; Signal:DeferredFire(...: any) → () Works the same as Signal:Fire, but calls every connection's callback in the next engine execution step, passing in ... as the argument. "},{"title":"Timer","type":0,"sectionRef":"#","url":"api/Timer","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"Timer","url":"api/Timer#properties","content":" "},{"title":"Boost","type":1,"pageTitle":"Timer","url":"api/Timer#Boost","content":"This item is read only and cannot be modified. Read Only Timer &lt;/&gt; Timer.Boost: number A value which by default is 0. This value is added to the delta time of every approximate frame the timer is updated (or if an update signal was specified, which in case the numebr fired to the update signal). Increasing it will lead to faster timer updates. local timer = Timer.new(5) timer.Boost = 4 timer:Start() timer.OnTick:Connect(function(deltaTime) print(deltaTime) --&gt; 8 (approx) end)   "},{"title":"OnTick","type":1,"pageTitle":"Timer","url":"api/Timer#OnTick","content":"This item is read only and cannot be modified. Read Only Timer &lt;/&gt; Timer.OnTick: Signal&lt;deltaTime: number&gt; A signal which is fired whenever the timer &quot;ticks&quot; (when started). timer.OnTick:Connect(function(deltaTime) warn((&quot;After %d seconds, tick!&quot;):format(deltaTime)) end) timer:Start()  "},{"title":"Functions","type":1,"pageTitle":"Timer","url":"api/Timer#functions","content":" "},{"title":"IsA","type":1,"pageTitle":"Timer","url":"api/Timer#IsA","content":"&lt;/&gt; Timer.IsA(self: any) → boolean A method which returns a boolean indicating if self is a timer or not.  "},{"title":"new","type":1,"pageTitle":"Timer","url":"api/Timer#new","content":"&lt;/&gt; Timer.new( timer: number, updateSignal: RBXScriptSignal? ) → Timer Creates and returns a new timer. If updateSignal is specified, it will be used instead to update the timer or RunService.Heartbeat if not specified. note If updateSignal is specified, it must be fired with a number as the first argument so that the timer is updated based on that number. For e.g: local updateSignal = Instance.new(&quot;BindableEvent&quot;) local timer = Timer.new(5, updateSignal.Event) while true do -- The timer will be updated by exactly 5 seconds every second: updateSignal:Fire(5) task.wait(1) end   "},{"title":"Reset","type":1,"pageTitle":"Timer","url":"api/Timer#Reset","content":"Timer &lt;/&gt; Timer:Reset() → () Resets the timer.  "},{"title":"Start","type":1,"pageTitle":"Timer","url":"api/Timer#Start","content":"Timer &lt;/&gt; Timer:Start() → () Starts the timer.  "},{"title":"IsStopped","type":1,"pageTitle":"Timer","url":"api/Timer#IsStopped","content":"Timer &lt;/&gt; Timer:IsStopped() → boolean Returns a boolean indicating if the timer has stopped.  "},{"title":"Pause","type":1,"pageTitle":"Timer","url":"api/Timer#Pause","content":"Timer &lt;/&gt; Timer:Pause() → () Pauses the timer.  "},{"title":"Unpause","type":1,"pageTitle":"Timer","url":"api/Timer#Unpause","content":"Timer &lt;/&gt; Timer:Unpause() → () Unpauses the timer.  "},{"title":"IsPaused","type":1,"pageTitle":"Timer","url":"api/Timer#IsPaused","content":"Timer &lt;/&gt; Timer:IsPaused() → boolean Returns a boolean indicating if the timer has being paused.  "},{"title":"Destroy","type":1,"pageTitle":"Timer","url":"api/Timer#Destroy","content":"Timer &lt;/&gt; Timer:Destroy() → () Destroys the timer and makes it unusuable. warning Trivial errors will occur if your code unintentionally works on a destroyed timer, only call this method when you're done working with the timer.  "},{"title":"Stop","type":1,"pageTitle":"Timer","url":"api/Timer#Stop","content":"Timer &lt;/&gt; Timer:Stop() → () Stops the timer. "},{"title":"Component","type":0,"sectionRef":"#","url":"api/Component","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"Component","url":"api/Component#properties","content":" "},{"title":"ActiveObjects","type":1,"pageTitle":"Component","url":"api/Component#ActiveObjects","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Component.ActiveObjects: table A dictionary of all component objects that are currently active and not destroyed yet.  "},{"title":"OnComponentAdded","type":1,"pageTitle":"Component","url":"api/Component#OnComponentAdded","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Component.OnComponentAdded: Signal&lt;componentAdded: Component&gt; A signal which is fired whenever a component is added.  "},{"title":"OnComponentDestroyed","type":1,"pageTitle":"Component","url":"api/Component#OnComponentDestroyed","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Component.OnComponentDestroyed: Signal&lt;componentDestroyedName: string&gt; A signal which is fired whenever a component is destroyed.  "},{"title":"OnObjectAdded","type":1,"pageTitle":"Component","url":"api/Component#OnObjectAdded","content":"This item is read only and cannot be modified. Read Only Component &lt;/&gt; Component.OnObjectAdded: Signal&lt;objectAdded: table&gt; A signal which is fired whenever an object is created and returned through the constructor method of the class bound to the component.  "},{"title":"OnObjectDestroyed","type":1,"pageTitle":"Component","url":"api/Component#OnObjectDestroyed","content":"This item is read only and cannot be modified. Read Only Component &lt;/&gt; Component.OnObjectDestroyed: Signal&lt;instance: Instance&gt; A signal which is fired whenever an object of the class bound to the component is destroyed. note The object destroyed is not passed as the argument, but rather the instance it was bound to. For e.g: someComponent.OnObjectDestroyed:Connect(function(instance) print((&quot;object bound to %s was destroyed&quot;):format(instance.Name)) end)   "},{"title":"Tags","type":1,"pageTitle":"Component","url":"api/Component#Tags","content":"This item is read only and cannot be modified. Read Only Component &lt;/&gt; Component.Tags: table The reference to the Tags table in the class bound to the component.  "},{"title":"Name","type":1,"pageTitle":"Component","url":"api/Component#Name","content":"This item is read only and cannot be modified. Read Only Component &lt;/&gt; Component.Name: string The reference to the Name member in the class bound to the component. "},{"title":"Functions","type":1,"pageTitle":"Component","url":"api/Component#functions","content":" "},{"title":"RegisterComponentsIn","type":1,"pageTitle":"Component","url":"api/Component#RegisterComponentsIn","content":"&lt;/&gt; Component.RegisterComponentsIn(componentsFolder: Folder) → () Registers all the module scripts in componentsFolder, so that the table returned from each module script will be binded to a new component. note Descendants will be ignored. However, folders will be accounted and as well as nested folders.  "},{"title":"IsA","type":1,"pageTitle":"Component","url":"api/Component#IsA","content":"&lt;/&gt; Component.IsA(self: any) → boolean Returns a boolean indicating if self is a component or not.  "},{"title":"GetAll","type":1,"pageTitle":"Component","url":"api/Component#GetAll","content":"&lt;/&gt; Component.GetAll() → table Returns an array of all components.  "},{"title":"GetFromTags","type":1,"pageTitle":"Component","url":"api/Component#GetFromTags","content":"&lt;/&gt; Component.GetFromTags(tags: table) → Component? Returns a component from tags. For e.g: local class = {} class.Tags = {&quot;1&quot;} --- Component.new(class) print(Component.GetFromTags(class.Tags)) --&gt; {Tags = {&quot;1&quot;}}   "},{"title":"GetFromName","type":1,"pageTitle":"Component","url":"api/Component#GetFromName","content":"&lt;/&gt; Component.GetFromName(name: string) → Component? Returns a component of name, if found.  "},{"title":"GetServersideComponent","type":1,"pageTitle":"Component","url":"api/Component#GetServersideComponent","content":"&lt;/&gt; Component.GetServersideComponent( class: table, serversideComponentName: string ) → Promise Returns a promise which is resolved once a serverside component serversideComponentName is found or rejected if not found. note The serverside component retrieved must have a Client table, or the method will assume it doesn't exist. Example client component interacting with a server component: -- Client component local Block = { Name = &quot;Block&quot;, Tags = {&quot;Block&quot;} } Block.__index = Block local BlockServer function Block.Init() BlockServer = Block.Component.GetServersideComponent(&quot;BlockServer&quot;):expect() end function Block.new(instance) local self = setmetatable({}, Block) if not BlockServer.IsGoodBlock(instance) then return end return self end function Block:Destroy() end -- Server component local Block = { Name = &quot;Block&quot;, Tags = {&quot;Block&quot;}, Client = {} } function Block.new(instance) return setmetatable({}, Block) end function Block:PostSimulationUpdate(deltaTime) instance.CFrame *= CFrame.Angles(0, math.rad(35) * deltaTime, 0) end function Block:Destroy() self.Instance:Destroy() end function Block.Client.IsGoodBlock(player, block) return block.Name == player end   "},{"title":"ObserveFromTags","type":1,"pageTitle":"Component","url":"api/Component#ObserveFromTags","content":"&lt;/&gt; Component.ObserveFromTags( tags: tags, timeout: number? ) → Promise Works the same as Component.GetFromTags,except returns a promise which is resolved with the valid component found under timeout seconds, if specified. If timeout is specified and a valid component was still not found, then the promise will reject with a nil value. For e.g: -- Get a component whose Tags table is exactly {&quot;Example&quot;} in under 5 seconds: local compFromTags = Component.ObserveFromTags({&quot;Example&quot;}, 5):expect()   "},{"title":"ObserveFromName","type":1,"pageTitle":"Component","url":"api/Component#ObserveFromName","content":"&lt;/&gt; Component.ObserveFromName( name: string, timeout: number? ) → Promise Works the same as Component.ObserveFromTags, but operates on a string (name) rather than a tags table. For e.g: -- Get a component from name &quot;ExN&quot; local comp = Component.ObserveFromName(&quot;ExN&quot;):expect()   "},{"title":"new","type":1,"pageTitle":"Component","url":"api/Component#new","content":"&lt;/&gt; Component.new(class: table) → () Creates and binds a new component to class. Required class members and methods Description Tags An array of collection service tags (strings). .new A constructor method which is called whenever an instance is added or found whose CollectionService tags match Tags. The instance is passed as the only argument to this method and is considered &quot;bound&quot; to the object returned by this method. :Destroy A method which which is called on an object (returned by the constructor method) bound to an instance which no longer has matching tags. Name A string, representing the name of the class. Client A table, only required if the component should be accessed on the client. This table should only ever exist on a serverside component. note It is expected that the constructor method .new returns an object (a table which &quot;inherits&quot; from class). However, it is also safe to return nothing from the constructor method, however, it is undefined behavior to do this. Optional class lifecycle methods and members Description .PreRenderUpdatePriority An EnumItem used in calling the PreRenderUpdate method, learn more about it here. .WhiteListedInstanceServices An array of all white listed services that an instance must be a descendant of before considering it's tags. .Init() A method which is called just after the creation of the component of the class. :Start() A method which is called on an object just after it is created and returned from the constructor method. :Stop() A method which is called on an object bound to an instance whose CollectionService tags no longer matches Tags. :PostSimulationUpdate() A method called every RunService.Heartbeat on an object. :PreSimulationUpdate() A method called every RunService.Stepped on an object. :PreRenderUpdate() A method called every RunService.RenderStepped on an object. Injected class members Description Component The reference to the global component class. This is member is injected before the Init method is called. This member will be unaccessible i.e nil after the component of the class is destroyed. Injected object members Description Instance A reference to an instance (bound to some object) injected to the object. This member will be unnaccessible i.e nil after the object is destroyed. Example component class: Any part with the Part tag will have it's brick color change to green and smoothly rotate. Once the Part tag is removed, the part will no longer rotate and have it's brick color change to red. There are no limiations to how many parts can be binded to a component, which means you can have many parts with Part tag bound to this funtionality of the class. local Part = { Tags = {&quot;Part&quot;}, Name = &quot;Part&quot;, } Part.__index = Part local MAX_Y_ROTATION = 70 function Part.new(part) return setmetatable({}, {__index = Part}) end function Part:Start() -- self.Instance is the reference injected to this object self.Instance.BrickColor = BrickColor.Green() end function Part:PostSimulationUpdate(deltaTime) self.Instance.CFrame *= CFrame.Angles(0, math.rad(MAX_Y_ROTATION) * deltaTime, 0) end function Part:Stop() self.Instance.BrickColor = BrickColor.Red() end function Part:Destroy() -- The instance no longer had the &quot;Part&quot; tag (either it was parented to `nil`, destroyed or just -- doesn't have it anymore), we can perform some cleanup.. -- You also don't have to do self.Instance = nil as it is redundant, because it is already done internally by -- the component class! end return Part   "},{"title":"GetObjectFromInstance","type":1,"pageTitle":"Component","url":"api/Component#GetObjectFromInstance","content":"Component &lt;/&gt; Component:GetObjectFromInstance(instance: ?) → table Returns an object of the component bound to instance.  "},{"title":"Destroy","type":1,"pageTitle":"Component","url":"api/Component#Destroy","content":"Component &lt;/&gt; Component:Destroy() → () Destroys the component and renders it unusuable. warning Trivial errors will occur if your code unintentionally works on a destroyed component, only call this method when you're done working with the component! "},{"title":"TableUtil","type":0,"sectionRef":"#","url":"api/TableUtil","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#functions","content":" "},{"title":"DeepFreezeTable","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#DeepFreezeTable","content":"&lt;/&gt; TableUtil.DeepFreezeTable(tabl: table) → table-- The first argument passed to this method Freezes tabl via table.freeze, and all other nested tables in tabl.  "},{"title":"DeepCopyTable","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#DeepCopyTable","content":"&lt;/&gt; TableUtil.DeepCopyTable(tabl: table) → table Unfreezes tabl via table.unfreeze, and all other nested tables in tabl.  "},{"title":"ShallowCopyTable","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#ShallowCopyTable","content":"&lt;/&gt; TableUtil.ShallowCopyTable(tabl: table) → table Shallow copies all elements in tabl to a new table, i.e only the &quot;children&quot; of tabl are considered and not their descendants. local t1 = { 1, 2, 3, { a = {} } } print(TableUtil.ShallowCopyTable(t1))   "},{"title":"ReconcileTable","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#ReconcileTable","content":"&lt;/&gt; TableUtil.ReconcileTable( tabl: table, templateTable: table ) → table-- The first argument passed to this method Adds all missing elements from templateTable to tabl, and also sets the metatable of tabl to templateTable. local t1 = {} local templateTable = {1, 2, 3} print(TableUtil.ReconcileTable(t1, templateTable)) --&gt; {1,2,3}   "},{"title":"ShuffleTable","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#ShuffleTable","content":"&lt;/&gt; TableUtil.ShuffleTable( tabl: table, randomObject: Random? ) → table-- The first argument passed to this method Shuffles tabl such that the indices will have values of other indices in tabl in a random way. If randomObject is specified, it will be used instead to shuffle tabl. note This method assumes that tabl is an array with no holes. local t1 = {1, 2, 3, 4, 5} local shuffledTable = TableUtil.ShuffleTable(t1) print(shuffledTable) --&gt; {3, 2, 4, 5, 1, 6}   "},{"title":"IsTableEmpty","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#IsTableEmpty","content":"&lt;/&gt; TableUtil.IsTableEmpty(tabl: table) → ( boolean, table ) Returns a boolean indicating if tabl is empty i.e it is basically {}. For arrays with no holes, the # operator should be used instead.  "},{"title":"Map","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#Map","content":"&lt;/&gt; TableUtil.Map( tabl: table, callback: function ) → table-- The first argument passed to this method Performs a map against tabl, which can be used to map new values based on the old values at given indices. local t = {1, 2, 3, 4, 5} local t2 = TableUtil.Map(t, function(key, value) return value * 2 end) print(t2) --&gt; {2, 4, 6, 8, 10}   "},{"title":"ConvertTableIndicesToStartFrom","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#ConvertTableIndicesToStartFrom","content":"&lt;/&gt; TableUtil.ConvertTableIndicesToStartFrom( tabl: table, index: number ) → table-- The first argument passed to this method A method which maps all numerical indices of the values in tabl to start from index. This method also accounts for nested tables. local t = {1, 2, 3, 4, 5} TableUtil.ConvertTableIndicesToStartFrom(t, 0) print(t[0], t[1], t[2], t[3]) --&gt; 1, 2, 3, 4   "},{"title":"CombineTables","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#CombineTables","content":"&lt;/&gt; TableUtil.CombineTables(...: table) → table A method which combines all tables ... into 1 single mega table. local t = {1, 2, 3, 4, 5} local t1 = {7, 8, 9} local t2 = {10, 11, 12} local combinedTable = TableUtil.CombineTables(t, t1, t2) print(combinedTable) --&gt; {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}   "},{"title":"EmptyTable","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#EmptyTable","content":"&lt;/&gt; TableUtil.EmptyTable(tabl: table) → () Clears out all keys in tabl. local t = {1, 2, 3, 4, 5} TableUtil.EmptyTable(t) print(t) --&gt; {}   "},{"title":"ReverseTable","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#ReverseTable","content":"&lt;/&gt; TableUtil.ReverseTable(tabl: table) → table-- The first argument passed to this method A method which reverses tabl. note This method assumes that tabl is an array with no holes. local t = {1, 2, 3, 4, 5} TableUtil.ReverseTable(t) print(t) --&gt; {5, 4, 3, 2, 2, 1}   "},{"title":"GetCount","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#GetCount","content":"&lt;/&gt; TableUtil.GetCount(tabl: table) → number A method which returns a number of all the elements in tabl. local t = {1, 2, 3, 4, 5, a = 5, b = 6} print(TableUtil.GetCount(t)) --&gt; 7   "},{"title":"GetKeyFromValue","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#GetKeyFromValue","content":"&lt;/&gt; TableUtil.GetKeyFromValue( tabl: table, value: any ) → any? A method which returns the key in which value is stored at in tabl. local t = {a = 5, b = 10} print(TableUtil.GetKeyFromValue(t, 5)) --&gt; &quot;a&quot; note This method will not work well for different keys which have the same value, and doesn't account for nested values.  "},{"title":"AreTablesSame","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#AreTablesSame","content":"&lt;/&gt; TableUtil.AreTablesSame( tabl: table, otherTable: table ) → boolean A method which checks if both tabl and otherTable are exactly equal. Also accounts for nested values. local t1 = {1, 2, 3, 4, 5, {a = 4}} local t2 = {1, 2, 3, 4, 5, {a = 3}} print(TableUtil.AreTablesSame(t1, t2)) --&gt; false local t1 = {1, 2, 3, 4, 5, {a = 4}} local t2 = {1, 2, 3, 4, 5, {a = 4}} print(TableUtil.AreTablesSame(t1, t2)) --&gt; true note This method only works best on tables with only primitive values except for userdata and thread. This method also ignores key and only checks values. For e.g: local t = { [{}] = 5, } local b = { [{}] = 5, } print(TableUtil.AreTablesSame(t, b)) --&gt; false (expected behavior: true)  "}]