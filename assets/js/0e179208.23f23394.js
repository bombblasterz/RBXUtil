"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[512],{98147:function(e){e.exports=JSON.parse('{"functions":[{"name":"IsTimer","desc":"Returns a boolean indicating if the provided argument is a timer or not.","params":[{"name":"self","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":77,"path":"packages/Timer/init.lua"}},{"name":"new","desc":"Creates and returns a new timer. If `customUpdateSignal` is specified, it will be used\\nto update the timer when started. Else if not specified, [RunService.Heartbeat](https://developer.roblox.com/en-us/api-reference/event/RunService/Heartbeat) will be used instead.","params":[{"name":"timer","desc":"","lua_type":"number"},{"name":"customUpdateSignal","desc":"","lua_type":"RBXScriptSignal | nil"}],"returns":[{"desc":"","lua_type":"Timer"}],"function_type":"static","source":{"line":90,"path":"packages/Timer/init.lua"}},{"name":"Reset","desc":"Resets the timer.","params":[],"returns":[],"function_type":"method","tags":["Timer"],"source":{"line":123,"path":"packages/Timer/init.lua"}},{"name":"Start","desc":"Starts the timer.","params":[],"returns":[],"function_type":"method","tags":["Timer"],"source":{"line":132,"path":"packages/Timer/init.lua"}},{"name":"IsStopped","desc":"Returns a boolean indicating if the timer has stopped.","params":[],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","tags":["Timer"],"source":{"line":157,"path":"packages/Timer/init.lua"}},{"name":"Pause","desc":"Pauses the timer.","params":[],"returns":[],"function_type":"method","tags":["Timer"],"source":{"line":166,"path":"packages/Timer/init.lua"}},{"name":"Unpause","desc":"Unpauses the timer.","params":[],"returns":[],"function_type":"method","tags":["Timer"],"source":{"line":175,"path":"packages/Timer/init.lua"}},{"name":"IsPaused","desc":"Returns a boolean indicating if the timer has being paused.","params":[],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","tags":["Timer"],"source":{"line":185,"path":"packages/Timer/init.lua"}},{"name":"Destroy","desc":"Destroys the timer and makes it unusuable.\\n\\n:::warning\\nTrivial errors will occur if your code unintentionally works on a destroyed timer, only call this method when you\'re done working with the timer.\\n:::","params":[],"returns":[],"function_type":"method","tags":["Timer"],"source":{"line":199,"path":"packages/Timer/init.lua"}},{"name":"Stop","desc":"Stops the timer.","params":[],"returns":[],"function_type":"method","tags":["Timer"],"source":{"line":216,"path":"packages/Timer/init.lua"}}],"properties":[{"name":"OnTick","desc":"A signal which is fired whenever the timer \\"ticks\\" (when started). \\n\\n```lua\\ntimer.OnTick:Connect(function(deltaTime)\\n\\twarn((\\"After %d seconds, tick!\\"):format(deltaTime))\\nend)\\n\\ntimer:Start()\\n```","lua_type":"Signal","tags":["Timer"],"source":{"line":56,"path":"packages/Timer/init.lua"}}],"types":[],"name":"Timer","desc":"Timers are objects designed to work like alarms and are used to run code\\nat a specific later time.\\n\\nFor e.g:\\n```lua\\nlocal timer = Timer.new()\\ntimer.OnTick:Connect(function(deltaTime)\\n\\twarn((\\"Approximately %d seconds have passed\\"):format(deltaTime))\\nend)\\n\\ntimer:Start()\\n```","source":{"line":40,"path":"packages/Timer/init.lua"}}')}}]);