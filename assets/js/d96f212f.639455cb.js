"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[241],{8050:function(e){e.exports=JSON.parse('{"functions":[{"name":"DeepFreeze","desc":"Freezes all keys and values in `tabl` via `table.freeze`, as well as in all other nested tables in `tabl`.","params":[{"name":"tabl","desc":"","lua_type":"table"}],"returns":[],"function_type":"static","source":{"line":49,"path":"packages/TableUtil/init.lua"}},{"name":"DeepCopy","desc":"Returns a deep copy of `tabl`, also accounting for nested keys and values.","params":[{"name":"tabl","desc":"","lua_type":"table"}],"returns":[{"desc":"","lua_type":"table"}],"function_type":"static","source":{"line":75,"path":"packages/TableUtil/init.lua"}},{"name":"ShallowCopy","desc":"Works the same as `TableUtil.DeepCopy`, but doesn\'t account for nested keys and values. ","params":[{"name":"tabl","desc":"","lua_type":"table"}],"returns":[{"desc":"","lua_type":"table"}],"function_type":"static","source":{"line":102,"path":"packages/TableUtil/init.lua"}},{"name":"Reconcile","desc":"Adds all missing elements from `templateTable` to `tabl`. \\n\\n```lua\\nlocal t1 = {}\\nlocal templateTable = {1, 2, 3}\\n\\nTableUtil.Reconcile(t1, templateTable)\\nprint(t1) --\x3e {1,2,3}\\n```","params":[{"name":"tabl","desc":"","lua_type":"table"},{"name":"templateTable","desc":"","lua_type":"table"}],"returns":[],"function_type":"static","source":{"line":132,"path":"packages/TableUtil/init.lua"}},{"name":"Shuffle","desc":"Shuffles `tabl` such that the indices will have values of other indices in `tabl` in a random way. If `randomObject` is specified,\\nit will be used instead to shuffle `tabl`. \\n\\n:::note\\nThis method assumes that `tabl` is an array with no holes.\\n:::\\n\\n```lua\\nlocal t1 = {1, 2, 3, 4, 5}\\n\\nTableUtil.Shuffle(t1)\\nprint(t1) --\x3e {3, 2, 4, 5, 1, 6}\\n```","params":[{"name":"tabl","desc":"","lua_type":"table"},{"name":"randomObject","desc":"","lua_type":"Random ?"}],"returns":[],"function_type":"static","source":{"line":173,"path":"packages/TableUtil/init.lua"}},{"name":"IsEmpty","desc":"Returns a boolean indicating if `tabl` is completely empty. ","params":[{"name":"tabl","desc":"","lua_type":"table"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":208,"path":"packages/TableUtil/init.lua"}},{"name":"Map","desc":"Performs a map against `tabl`, which can be used to map new values based on the old values at given indices. \\n\\n```lua\\nlocal t = {1, 2, 3, 4, 5}\\nTableUtil.Map(t, function(key, value)\\n\\treturn value * 2\\nend)\\nprint(t2) --\x3e {2, 4, 6, 8, 10}\\n```","params":[{"name":"tabl","desc":"","lua_type":"table"},{"name":"callback","desc":"","lua_type":"function"}],"returns":[],"function_type":"static","source":{"line":232,"path":"packages/TableUtil/init.lua"}},{"name":"Combine","desc":"A method which combines all tables `...` into 1 single mega table.\\n\\n```lua\\nlocal t = {1, 2, 3, 4, 5}\\nlocal t1 = {7, 8, 9}\\nlocal t2 = {10, 11, 12}\\n\\nlocal combinedTable = TableUtil.Combine(t, t1, t2)\\nprint(combinedTable) --\x3e {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}\\n```","params":[{"name":"...","desc":"","lua_type":"table"}],"returns":[{"desc":"","lua_type":"table"}],"function_type":"static","source":{"line":264,"path":"packages/TableUtil/init.lua"}},{"name":"Empty","desc":"Clears out all keys in `tabl`.\\n\\n```lua\\nlocal t = {1, 2, 3, 4, 5}\\nTableUtil.Empty(t)\\nprint(t) --\x3e {}\\n```","params":[{"name":"tabl","desc":"","lua_type":"table"}],"returns":[],"function_type":"static","source":{"line":292,"path":"packages/TableUtil/init.lua"}},{"name":"Reverse","desc":"A method which reverses `tabl`. \\n\\n:::note\\nThis method assumes that `tabl` is an array with no holes.\\n:::\\n\\n```lua\\nlocal t = {1, 2, 3, 4, 5}\\nTableUtil.Reverse(t)\\nprint(t) --\x3e {5, 4, 3, 2, 2, 1}\\n```","params":[{"name":"tabl","desc":"","lua_type":"table"}],"returns":[],"function_type":"static","source":{"line":319,"path":"packages/TableUtil/init.lua"}},{"name":"GetElementCount","desc":"A method which returns a number of all the elements in `tabl`.\\n\\n```lua\\nlocal t = {1, 2, 3, 4, 5, a = 5, b = 6}\\nprint(TableUtil.GetElementCount(t)) --\x3e 7\\n```","params":[{"name":"tabl","desc":"","lua_type":"table"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"static","source":{"line":345,"path":"packages/TableUtil/init.lua"}},{"name":"GetKeyFromValue","desc":"A method which returns the key in which `value` is stored at in `tabl`.\\n\\n```lua\\nlocal t = {a = 5, b = 10}\\nprint(TableUtil.GetKeyFromValue(t, 5)) --\x3e \\"a\\"\\n```\\n\\n:::note\\nThis method will not work well for different keys which have the same value, and doesn\'t account for nested key and values.\\n:::","params":[{"name":"tabl","desc":"","lua_type":"table"},{"name":"value","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"any  ?"}],"function_type":"static","source":{"line":377,"path":"packages/TableUtil/init.lua"}},{"name":"AreEqual","desc":"A method which checks if both `tabl` and `otherTable` are equal in terms of values.\\n\\n```lua\\nlocal t1 = {1, 2, 3, 4, 5, {a = 4}}\\nlocal t2 = {1, 2, 3, 4, 5, {a = 3}}\\n\\nprint(TableUtil.AreEqual(t1, t2)) --\x3e false\\n```\\n\\n```lua\\nlocal t1 = {1, 2, 3, 4, 5, {a = 4}}\\nlocal t2 = {1, 2, 3, 4, 5, {a = 4}}\\n\\nprint(TableUtil.AreEqual(t1, t2)) --\x3e true\\n```\\n\\n:::note\\n- This method works well on tables that contain only primitive values except for userdata and thread.\\n- This method also doesn\'t check keys.\\n\\nFor e.g:\\n\\n```lua\\nlocal t = {\\n\\t[{}] = 5,\\n}\\nlocal b = {\\n\\t[{}] = 5,\\n}\\n\\nprint(TableUtil.AreEqual(t, b)) --\x3e false \\n```\\n:::","params":[{"name":"tabl1","desc":"","lua_type":"table"},{"name":"tabl2","desc":"","lua_type":"table"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":432,"path":"packages/TableUtil/init.lua"}}],"properties":[],"types":[],"name":"TableUtil","desc":"A utility designed to provide a layer of abstraction along with useful methods when working with tables.\\n\\nA common use case would be to compare 2 tables via their elements, for e.g:\\n\\n```lua\\nlocal t1 = {1, 2, 3}\\nlocal t2 = {1, 2, 3}\\nlocal t3 = {1, 2}\\n\\nprint(TableUtil.AreEqual(t1, t2)) --\x3e true\\nprint(TableUtil.AreEqual(t1, t3)) --\x3e false\\n```","source":{"line":35,"path":"packages/TableUtil/init.lua"}}')}}]);