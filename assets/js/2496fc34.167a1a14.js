"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[225],{95972:function(n){n.exports=JSON.parse('{"functions":[{"name":"GetDispatchedCommunicationSignal","desc":"Returns a promise which is resolved with the serverside dispatched signal represented in a client communication signal.\\n`timeout` will default to `3` if not specified and the method will wait for `timeout` seconds \\nfor the serverside dispatched signal to exist before assuming that it doesn\'t and rejecting with a `nil` value.\\n\\n```lua\\n-- On the server:\\nlocal signal = CommunicationSignal.new(\\"Signal\\")\\nsignal:Bind(\\"bo\\", true)\\nsignal:DispatchToClient()\\n\\n-- On the client:\\nClientCommunicationSignal.GetDispatchedCommunicationSignal(\\"Signal\\"):andThen(function(signal)\\n\\tprint(signal.Members.bo) --\x3e true\\nend)\\n```\\n:::tip\\nThis method returns cached results when retrieving the same dispatched communication signal, _if it was successfully\\nretrieved in the first place_.\\n\\nFor e.g:\\n\\n```lua\\n-- On the server:\\nlocal signal = CommunicationSignal.new(\\"Signal\\")\\nsignal:DispatchToClient()\\n\\n-- On the client:\\nlocal clientSignal1 = ClientCommunicationSignal.GetDispatchedCommunicationSignal(\\"Signal\\"):expect()\\nlocal clientSignal2 = ClientCommunicationSignal.GetDispatchedCommunicationSignal(\\"Signal\\"):expect()\\nprint(clientSignal1 == clientSignal2) --\x3e true\\n```\\n:::","params":[{"name":"identifier","desc":"","lua_type":"string"},{"name":"timeout","desc":"","lua_type":"number ?"}],"returns":[{"desc":"","lua_type":"Promise"}],"function_type":"static","source":{"line":144,"path":"packages/Remote/Client/ClientCommunicationSignal.lua"}},{"name":"IsA","desc":"A method which returns a boolean indicating if `self` is a client communication signal or not.","params":[{"name":"self","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":220,"path":"packages/Remote/Client/ClientCommunicationSignal.lua"}},{"name":"Build","desc":"A method which builds the communication signal for client-side use.\\n\\nFor e.g:\\n\\n```lua\\nlocal builtSignal = clientCommunicationSignal:Build()\\n\\n-- Normally to access members you would do:\\nprint(clientSignal.Members.Table) --\x3e {1, 2, 3}\\n\\n-- Via dispatched signal:\\nprint(builtSignal.Table) --\x3e  {1, 2, 3} \\n```\\n\\n:::tip\\nThis method returns cached results if the client communication signal was already previously built.\\n\\nFor e.g:\\n\\n```lua\\nlocal s = clientCommunicationSignal:Build()\\nlocal o = clientCommunicationSignal:Build()\\nprint(s == o) --\x3e true\\n```\\n:::","params":[],"returns":[{"desc":"","lua_type":"table"}],"function_type":"method","tags":["ClientCommunicationSignal"],"source":{"line":256,"path":"packages/Remote/Client/ClientCommunicationSignal.lua"}},{"name":"GetMethod","desc":"A method which returns a binded method `name` to the client communication signal.\\n\\nFor e.g:\\n\\n```lua\\n-- On the server:\\nlocal signal = CommunicationSignal.new(\\"Signal\\")\\nsignal:Bind(\\"bo\\", function()\\n\\nend)\\nsignal:DispatchToClient()\\n\\n-- On the client:\\nlocal clientSignal = ClientCommunicationSignal.GetDispatchedCommunicationSignal(\\"Signal\\"):expect()\\nprint(typeof(clientSignal:GetMethod(\\"bo\\"))) --\x3e function\\n```","params":[{"name":"name","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"function ?"}],"function_type":"method","tags":["ClientCommunicationSignal"],"source":{"line":295,"path":"packages/Remote/Client/ClientCommunicationSignal.lua"}}],"properties":[{"name":"Members","desc":"A dictionary of all members binded to the client communication signal.","lua_type":"table","tags":["ClientCommunicationSignal"],"readonly":true,"source":{"line":68,"path":"packages/Remote/Client/ClientCommunicationSignal.lua"}},{"name":"RemoteSignals","desc":"A dictionary of all remote signals binded to the client communication signal.","lua_type":"table","tags":["ClientCommunicationSignal"],"readonly":true,"source":{"line":77,"path":"packages/Remote/Client/ClientCommunicationSignal.lua"}},{"name":"RemoteProperties","desc":"A dictionary of all remote properties binded to the client communication signal.","lua_type":"table","tags":["ClientCommunicationSignal"],"readonly":true,"source":{"line":86,"path":"packages/Remote/Client/ClientCommunicationSignal.lua"}}],"types":[],"name":"ClientCommunicationSignal","desc":"A client communication signal contains all the members, remote signals and remote properties binded to it\'s server\\ncounter part (a communication signal).\\n\\n```lua\\n-- On the server:\\nlocal signal = CommunicationSignal.new(\\"Bobo\\")\\nsignal:Bind(\\"Test\\", 123)\\nsignal:Bind(\\"T\\", {1, 2, 3})\\nsignal:DispatchToClient()\\n\\n-- On the client:\\nlocal clientSignal = ClientCommunicationSignal.GetDispatchedCommunicationSignal(\\"Bobo\\"):expect()\\n\\nprint(\\n\\tclientSignal.Members.Test,  --\x3e 123\\n\\tclientSignal.Members.T, --\x3e {1, 2, 3}\\n)\\n```\\n\\n:::note\\nRemote signals and remote properties exposed to the client are represented\\nas client remote properties and client remote signals, but are also binded to their serverside counter parts (remote\\nproperty and remote signal) respectively. \\n\\nFor e.g:\\n\\n```lua\\n-- On the server\\nlocal signal = CommunicationSignal.new(\\"ServersideService\\")\\nsignal:Bind(\\"Bo\\", RemoteSignal.new())\\nsignal:DispatchToClient()\\n\\n-- On the client\\nlocal clientSignal = ClientCommunicationSignal.GetDispatchedCommunicationSignal(\\"ServersideService\\"):expect() \\nprint(ClientRemoteSignal.IsA(clientSignal.RemoteSignals.Bo)) --\x3e true\\n```\\n:::","realm":["Client"],"source":{"line":59,"path":"packages/Remote/Client/ClientCommunicationSignal.lua"}}')}}]);