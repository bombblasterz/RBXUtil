"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[832],{25825:function(e){e.exports=JSON.parse('{"functions":[{"name":"IsA","desc":"A method which returns a boolean indicating if `self` is a client remote property or not.","params":[{"name":"self","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":73,"path":"packages/Remote/Client/ClientRemoteProperty.lua"}},{"name":"new","desc":"Creates and returns a new client remote property.","params":[{"name":"initialValue","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"ClientRemoteProperty"}],"function_type":"static","source":{"line":84,"path":"packages/Remote/Client/ClientRemoteProperty.lua"}},{"name":"IsBoundToServer","desc":"Returns a boolean indicating if the client remote property is bound to a remote property.","params":[],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","tags":["ClientRemoteProperty"],"source":{"line":105,"path":"packages/Remote/Client/ClientRemoteProperty.lua"}},{"name":"BindToServer","desc":"","params":[],"returns":[],"function_type":"method","ignore":true,"source":{"line":113,"path":"packages/Remote/Client/ClientRemoteProperty.lua"}},{"name":"Destroy","desc":"Destroys the client remote property, renders it unusable and cleans up everything.\\n\\n:::note\\nYou should only ever destroy the client remote property once you\'re completely done working with it to avoid\\nunexpected behavior.\\n:::","params":[],"returns":[],"function_type":"method","tags":["ClientRemoteProperty"],"source":{"line":136,"path":"packages/Remote/Client/ClientRemoteProperty.lua"}},{"name":"SetValue","desc":"Sets the value of the client remote property to `newValue`. If the client remote property is bound \\nto a remote property, then it will ask that remote property to set the value for the client\\nto `newValue`.","params":[{"name":"newValue","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["ClientRemoteProperty"],"yields":true,"source":{"line":150,"path":"packages/Remote/Client/ClientRemoteProperty.lua"}},{"name":"GetValue","desc":"Returns the current value of the client remote property. If bound to a remote property, \\nthen it will retrieve the value of the client from the remote property that this client remote\\nproperty is bound to and if there is no value set specifically for the client, \\nthen it will return the current value of that remote property.","params":[],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","tags":["ClientRemoteProperty"],"yields":true,"source":{"line":173,"path":"packages/Remote/Client/ClientRemoteProperty.lua"}}],"properties":[{"name":"OnValueUpdate","desc":" \\nA signal which is fired whenever the value of the client remote property is updated, either on the client\\nor on the server for the client, if the client remote property is bound to the server.","lua_type":"Signal <newValue: any>","tags":["ClientRemoteProperty"],"readonly":true,"source":{"line":53,"path":"packages/Remote/Client/ClientRemoteProperty.lua"}}],"types":[],"name":"ClientRemoteProperty","desc":"A client remote property works similar to a remote property and can either be\\nbound to a remote property by a communication signal for server-client relationship \\nor just work on the client.\\n\\n```lua\\nlocal clientRemoteProperty = ClientRemoteProperty.new(50)\\n\\nprint(clientRemoteProperty:GetValue()) --\x3e 50\\nclientRemoteProperty:SetValue(100)\\nprint(clientRemoteProperty:GetValue()) --\x3e 100\\n```\\n\\n:::note\\nRemote function limitations and behavior edge cases apply. For more information, see [Remote Functions and Events](https://developer.roblox.com/en-us/articles/Remote-Functions-and-Events).\\n:::","realm":["Client"],"source":{"line":43,"path":"packages/Remote/Client/ClientRemoteProperty.lua"}}')}}]);