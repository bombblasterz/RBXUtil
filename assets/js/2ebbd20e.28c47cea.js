"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[536],{13330:function(e){e.exports=JSON.parse('{"functions":[{"name":"IsSignal","desc":"A method which is used to check if `self` is a communication signal or not.","params":[{"name":"self","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":206,"path":"packages/Remote/CommunicationSignal/Client.lua"}},{"name":"new","desc":"Creates and returns a new communication signal with the identifier of `identifier`.","params":[{"name":"identifier","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"CommunicationSignal"}],"function_type":"static","source":{"line":59,"path":"packages/Remote/CommunicationSignal/Server.lua"}},{"name":"IsSignal","desc":"A method which is used to check if `self` is a communication signal or not.","params":[{"name":"self","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":101,"path":"packages/Remote/CommunicationSignal/Server.lua"}},{"name":"BindMember","desc":"Binds and exposes a new member of name `key` with value `value` to the client. ","params":[{"name":"key","desc":"","lua_type":"any"},{"name":"value","desc":"","lua_type":"value"}],"returns":[],"function_type":"method","tags":["CommunicationSignal"],"source":{"line":114,"path":"packages/Remote/CommunicationSignal/Server.lua"}},{"name":"BindRemoteSignal","desc":"Binds and exposes a `remoteSignal` of name `remoteSignalName` to the client. ","params":[{"name":"remoteSignalName","desc":"","lua_type":"string"},{"name":"remoteSignal","desc":"","lua_type":"RemoteSignal"}],"returns":[],"function_type":"method","tags":["CommunicationSignal"],"source":{"line":132,"path":"packages/Remote/CommunicationSignal/Server.lua"}},{"name":"BindRemoteProperty","desc":"Binds and exposes a `remoteSignal` of name `remotePropertyName` to the client. ","params":[{"name":"remotePropertyName","desc":"","lua_type":"string"},{"name":"remoteProperty","desc":"","lua_type":"RemoteProperty"}],"returns":[],"function_type":"method","tags":["CommunicationSignal"],"source":{"line":166,"path":"packages/Remote/CommunicationSignal/Server.lua"}},{"name":"BindMethod","desc":"Binds and exposes `method` of name `methodName` to the client. ","params":[{"name":"methodName","desc":"","lua_type":"string"},{"name":"method","desc":"","lua_type":"function"}],"returns":[],"function_type":"method","tags":["CommunicationSignal"],"source":{"line":200,"path":"packages/Remote/CommunicationSignal/Server.lua"}}],"properties":[],"types":[],"name":"CommunicationSignal","desc":"Communication signals are used to expose members, methods, remote signals and remote properties\\nto the client in a much easier and abstracted fashion.\\n\\n```lua\\n-- On the server\\nlocal communicationSignal = CommunicationSignal.new(\\"ServersideService\\")\\n\\n-- Bind method \\"Test\\" to the client:\\ncommunicationSignal:BindMethod(\\"Test\\", function(player, ...)\\n\\twarn((\\"%s said %s\\"):format(player.Name, tostring(...)))\\nend))\\n\\n-- On the client\\nlocal communicationSignal = CommunicationSignal.GetSignal(\\"ServersideService\\")\\n\\nlocal method = communicationSignal.Methods.Test\\nmethod(\\"Hi\\")\\n```","realm":["Server"],"source":{"line":42,"path":"packages/Remote/CommunicationSignal/Server.lua"}}')}}]);