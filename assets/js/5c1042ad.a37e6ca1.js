"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[680],{98147:function(e){e.exports=JSON.parse('{"functions":[{"name":"IsA","desc":"A method which returns a boolean indicating if `self` is a timer or not.","params":[{"name":"self","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":100,"path":"packages/Timer/init.lua"}},{"name":"new","desc":"Creates and returns a new timer. If `timer` is not specified, it will default to `0` i.e the timer will be updated\\nevery frame. If `updateSignal` is not specified, it will default to \\n[RunService.Heartbeat](https://developer.roblox.com/en-us/api-reference/event/RunService/Heartbeat).\\n\\n:::note\\nIf `updateSignal` is specified, it must be fired with a number as the first argument so that the timer is updated based on that number.\\n\\nFor e.g:\\n\\n```lua\\nlocal updateSignal = Instance.new(\\"BindableEvent\\")\\nlocal timer = Timer.new(5, updateSignal.Event)\\n\\nwhile true do\\n\\t-- The timer will be updated by exactly 5 seconds every approx second:\\n\\tupdateSignal:Fire(5)\\n\\ttask.wait(1)\\nend\\n```\\n:::","params":[{"name":"timer","desc":"","lua_type":"number ?"},{"name":"updateSignal","desc":"","lua_type":"RBXScriptSignal ?"}],"returns":[{"desc":"","lua_type":"Timer"}],"function_type":"static","source":{"line":131,"path":"packages/Timer/init.lua"}},{"name":"Reset","desc":"Resets the timer.","params":[],"returns":[],"function_type":"method","tags":["Timer"],"source":{"line":168,"path":"packages/Timer/init.lua"}},{"name":"Start","desc":"Starts the timer.","params":[],"returns":[],"function_type":"method","tags":["Timer"],"source":{"line":177,"path":"packages/Timer/init.lua"}},{"name":"IsStarted","desc":"Returns a boolean indicating if the timer has started.","params":[],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","tags":["Timer"],"source":{"line":202,"path":"packages/Timer/init.lua"}},{"name":"Pause","desc":"Pauses the timer.","params":[],"returns":[],"function_type":"method","tags":["Timer"],"source":{"line":211,"path":"packages/Timer/init.lua"}},{"name":"Unpause","desc":"Unpauses the timer.","params":[],"returns":[],"function_type":"method","tags":["Timer"],"source":{"line":222,"path":"packages/Timer/init.lua"}},{"name":"IsPaused","desc":"Returns a boolean indicating if the timer has being paused.","params":[],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","tags":["Timer"],"source":{"line":233,"path":"packages/Timer/init.lua"}},{"name":"Destroy","desc":"Destroys the timer, renders it unusuable and cleans up everything.","params":[],"returns":[],"function_type":"method","tags":["Timer"],"source":{"line":243,"path":"packages/Timer/init.lua"}},{"name":"Stop","desc":"Stops the timer.","params":[],"returns":[],"function_type":"method","tags":["Timer"],"source":{"line":259,"path":"packages/Timer/init.lua"}}],"properties":[{"name":"Boost","desc":"A value which by default is 0. This value is added to the delta time of every approximate frame the timer is updated (or if an update signal was specified, which in case \\nthe number fired to the custom update signal). Increasing it will lead to faster timer updates.\\n\\n```lua\\nlocal timer = Timer.new(5)\\ntimer.Boost = 4\\n\\ntimer:Start()\\n\\ntimer.OnTick:Connect(function(deltaTime)\\n\\tprint(deltaTime) --\x3e 8 (approx) \\nend)\\n```","lua_type":"number","tags":["Timer"],"readonly":true,"source":{"line":63,"path":"packages/Timer/init.lua"}},{"name":"OnTick","desc":"A signal which is fired whenever the timer \\"ticks\\" (when started). \\n\\n```lua\\ntimer.OnTick:Connect(function(deltaTime)\\n\\twarn((\\"After %d seconds, tick!\\"):format(deltaTime))\\nend)\\n\\ntimer:Start()\\n```","lua_type":"Signal <deltaTime: number>","tags":["Timer"],"readonly":true,"source":{"line":80,"path":"packages/Timer/init.lua"}}],"types":[],"name":"Timer","desc":"Timers designed to work like alarms and are used to run code\\nat a specific later time.\\n\\nFor e.g:\\n\\n```lua\\nlocal timer = Timer.new(2)\\ntimer.OnTick:Connect(function(deltaTime)\\n\\twarn((\\"Approximately %d seconds have passed\\"):format(deltaTime))\\nend)\\n\\ntimer:Start()\\n```","source":{"line":42,"path":"packages/Timer/init.lua"}}')}}]);