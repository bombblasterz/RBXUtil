"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5495],{65865:function(e){e.exports=JSON.parse('{"functions":[{"name":"Lerp","desc":"Used for smoothly interpolating a number to `goal`, with `alpha` being the multiplier. \\n\\nFor e.g:\\n\\n```lua\\nlocal number = 0\\nlocal goal = 3\\n\\nwhile number < goal do\\n\\tlocal alpha = task.wait(0.1) * 2\\n\\tnumber = NumberUtil.Lerp(number, goal, alpha)\\n\\tprint(number)\\nend\\n```","params":[{"name":"number","desc":"","lua_type":"number"},{"name":"goal","desc":"","lua_type":"number"},{"name":"alpha","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"static","source":{"line":107,"path":"packages/NumberUtil/init.lua"}},{"name":"QuadraticLerp","desc":"Same as `NumberUtil.Lerp`, except the lerp is quadratic.","params":[{"name":"number","desc":"","lua_type":"number"},{"name":"goal","desc":"","lua_type":"number"},{"name":"alpha","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"static","source":{"line":133,"path":"packages/NumberUtil/init.lua"}},{"name":"InverseLerp","desc":"Inversely lerps `min` to `goal`, with `alpha` being the multiplier.","params":[{"name":"min","desc":"","lua_type":"number"},{"name":"max","desc":"","lua_type":"number"},{"name":"alpha","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"static","source":{"line":159,"path":"packages/NumberUtil/init.lua"}},{"name":"Map","desc":"Maps `number` between `inMin`, `inMax`, `outMin` and `outMax`.","params":[{"name":"number","desc":"","lua_type":"number"},{"name":"inMin","desc":"","lua_type":"number"},{"name":"inMax","desc":"","lua_type":"number"},{"name":"outMin","desc":"","lua_type":"number"},{"name":"outMax","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"static","source":{"line":187,"path":"packages/NumberUtil/init.lua"}},{"name":"RoundTo","desc":"Rounds `number` to `to`.","params":[{"name":"number","desc":"","lua_type":"number"},{"name":"to","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"static","source":{"line":220,"path":"packages/NumberUtil/init.lua"}},{"name":"IsNaN","desc":"Returns a boolean if the provided number is `NaN` (Not a Number).","params":[{"name":"number","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":240,"path":"packages/NumberUtil/init.lua"}},{"name":"IsCloseTo","desc":"Returns a boolean if the provided number is close to `to` under `eplision` (or the default eplison i.e `1e-5`).\\n\\n```lua\\nprint(0.1 + 0.2 == 0.3) --\x3e false (due to floating point imprecision)\\nprint(NumberUtil.IsCloseTo(0.1 + 0.2, 0.3)) --\x3e true\\n```","params":[{"name":"number","desc":"","lua_type":"number"},{"name":"to","desc":"","lua_type":"number"},{"name":"eplison","desc":"","lua_type":"number ?"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":263,"path":"packages/NumberUtil/init.lua"}},{"name":"Root","desc":"Returns the `root` of the number.\\n\\n```lua\\nprint(NumberUtil.Root(2, 2)) --\x3e 1.4142135623731 (Square root)\\nprint(NumberUtil.Root(2, 3)) --\x3e 1.2599210498949 (Cube root)\\n```","params":[{"name":"number","desc":"","lua_type":"number"},{"name":"root","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"static","source":{"line":300,"path":"packages/NumberUtil/init.lua"}},{"name":"Factorial","desc":"Returns the factorial of the number. ","params":[{"name":"number","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"static","source":{"line":320,"path":"packages/NumberUtil/init.lua"}},{"name":"GetFactorsOf","desc":"Returns all the factors of the number. ","params":[{"name":"number","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"table"}],"function_type":"static","source":{"line":342,"path":"packages/NumberUtil/init.lua"}},{"name":"IsInfinite","desc":"Returns a boolean indicating if the number is infinite i.e `math.huge` or not.","params":[{"name":"number","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":370,"path":"packages/NumberUtil/init.lua"}}],"properties":[{"name":"e","desc":"Known as Euler\'s number, is a mathematical constant approximately equal to `2.7182818284590`.","lua_type":"number","readonly":true,"source":{"line":45,"path":"packages/NumberUtil/init.lua"}},{"name":"Tau","desc":"The circle constant representing the ratio between circumference and radius. \\nThe constant is equal to `math.pi * 2` approximately.","lua_type":"number","readonly":true,"source":{"line":53,"path":"packages/NumberUtil/init.lua"}},{"name":"Phi","desc":"An irrational number which is often known as the golden ratio or the most beautiful number in maths.","lua_type":"number","readonly":true,"source":{"line":60,"path":"packages/NumberUtil/init.lua"}},{"name":"NaN","desc":"An NaN (Not a Number) value.","lua_type":"NaN","readonly":true,"source":{"line":67,"path":"packages/NumberUtil/init.lua"}}],"types":[],"name":"NumberUtil","desc":"A useful number utility module which provides a lot of useful methods which are commonly used when\\nworking with numbers and handling certain edge cases.\\n\\nFor e.g:\\n\\n```lua\\nlocal nan = 0/0\\n\\nprint(NumberUtil.IsNaN(nan)) --\x3e true\\nprint(NumberUtil.IsCloseTo(0.1 + 0.2, 0.3)) --\x3e true\\n```","source":{"line":38,"path":"packages/NumberUtil/init.lua"}}')}}]);