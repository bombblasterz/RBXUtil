"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[832],{25825:function(e){e.exports=JSON.parse('{"functions":[{"name":"IsA","desc":"A method which returns a boolean indicating if `self` is a client remote property or not.","params":[{"name":"self","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":67,"path":"packages/Remote/Client/ClientRemoteProperty.lua"}},{"name":"new","desc":"Creates and returns a new client remote property.","params":[{"name":"currentValue","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"ClientRemoteProperty"}],"function_type":"static","source":{"line":78,"path":"packages/Remote/Client/ClientRemoteProperty.lua"}},{"name":"IsBoundToServer","desc":"Returns a boolean indicating if the client remote property is bound to a server remote property.","params":[],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","tags":["ClientRemoteProperty"],"source":{"line":99,"path":"packages/Remote/Client/ClientRemoteProperty.lua"}},{"name":"BindToRemote","desc":"","params":[],"returns":[],"function_type":"method","ignore":true,"source":{"line":107,"path":"packages/Remote/Client/ClientRemoteProperty.lua"}},{"name":"Destroy","desc":"Destroys the client remote property and renders it unusable.\\n\\n:::note\\nThe client remote property will also be destroyed if the remote property it was bound to is destroyed.\\n:::","params":[],"returns":[],"function_type":"method","tags":["ClientRemoteProperty"],"source":{"line":131,"path":"packages/Remote/Client/ClientRemoteProperty.lua"}},{"name":"SetValue","desc":"Sets the value of the client remote property to `newValue`. If the client remote property is bound \\nto a serverside remote property, then it will ask that remote property to set the value for the client\\nto `newValue`.\\n\\n:::note\\nSince this method never yields, if the client remote property is bound\\nto a serverside remote property, then it is not _safe_ to assume that the value will be updated immediately after\\nafter this method is called. For e.g:\\n\\n```lua\\n-- On the server:\\nlocal remoteProp = RemoteProperty.new(0, function(player, value)\\n\\treturn true\\nend)\\n-- Bind the remote prop to the client, etc...\\n\\nclientRemoteProp:SetValue(50)\\nprint(clientRemoteProp:GetValue()) --\x3e 0 (not updated immediately)\\ntask.wait(1) -- give sum time\\nprint(clientRemoteProp:GetValue()) --\x3e 50\\n```\\n:::","params":[{"name":"newValue","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["ClientRemoteProperty"],"source":{"line":163,"path":"packages/Remote/Client/ClientRemoteProperty.lua"}},{"name":"GetValue","desc":"Returns the value of the client remote property. If bound to a serverside remote property, \\nthen it will retrieve the value of the local player from that serverside remote property and if there is no value \\nset specifically for the local player, then the value returned will be the current value of that\\nserverside remote property.\\n\\n:::tip \\nThis method will return automatically return `nil` without yielding the thread if the remote property (the one that this client\\nremote property is bound to) is destroyed.\\n\\nFor e.g:\\n\\n```lua\\n-- On the server:\\nserversideRemoteProp:Destroy()\\n\\n-- On the client:\\nprint(clientRemoteProp:GetValue()) --\x3e nil\\n```\\n:::\\t","params":[],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","tags":["ClientRemoteProperty"],"yields":true,"source":{"line":206,"path":"packages/Remote/Client/ClientRemoteProperty.lua"}}],"properties":[{"name":"OnValueUpdate","desc":" \\nA signal which is fired whenever the value of the client remote property is updated, either on the client\\nor on the server if the client remote property is bound to the server.","lua_type":"Signal <newValue: any>","tags":["ClientRemoteProperty"],"readonly":true,"source":{"line":47,"path":"packages/Remote/Client/ClientRemoteProperty.lua"}}],"types":[],"name":"ClientRemoteProperty","desc":"A client remote property works similar to a serverside remote property and can either be\\nbound to serverside remote property by communication signals for server-client relationship or just work on the client.\\n\\n```lua\\nlocal clientRemoteProperty = ClientRemoteProperty.new(50)\\nprint(clientRemoteProperty:GetValue()) --\x3e 50\\nclientRemoteProperty:SetValue(clientRemoteProperty:GetValue() + 100)\\nprint(clientRemoteProperty:GetValue()) --\x3e 150\\n```","realm":["Client"],"source":{"line":37,"path":"packages/Remote/Client/ClientRemoteProperty.lua"}}')}}]);