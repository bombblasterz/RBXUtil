"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[301],{66827:function(e){e.exports=JSON.parse('{"functions":[{"name":"IsClientRemoteSignal","desc":"A method which is used to check if `self` is a client remote signal or not.","params":[{"name":"self","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":45,"path":"packages/Remote/ClientRemoteSignal.lua"}},{"name":"new","desc":"Creates and returns a new client remote signal.","params":[],"returns":[{"desc":"","lua_type":"ClientRemoteSignal"}],"function_type":"static","source":{"line":55,"path":"packages/Remote/ClientRemoteSignal.lua"}},{"name":"Connect","desc":"Same as `self._remoteEvent:Connect(callback)`.","params":[{"name":"callback","desc":"","lua_type":"function"}],"returns":[{"desc":"","lua_type":"RBXScriptConnection"}],"function_type":"method","tags":["ClientRemoteSignal"],"source":{"line":84,"path":"packages/Remote/ClientRemoteSignal.lua"}},{"name":"Fire","desc":"Same as `self._remoteEvent:FireServer(...)`.","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["ClientRemoteSignal"],"source":{"line":105,"path":"packages/Remote/ClientRemoteSignal.lua"}},{"name":"Destroy","desc":"Destroys the client remote signal and makes it unusuable.\\n\\n:::warning \\nTrivial errors will occur if your code unintentionally works on a destroyed client remote signal, only call this method when you\'re done working with it!\\n:::","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["ClientRemoteSignal"],"source":{"line":120,"path":"packages/Remote/ClientRemoteSignal.lua"}},{"name":"Wait","desc":"Same as `self._remoteEvent.OnClientEvent:Wait()`.","params":[],"returns":[{"desc":"","lua_type":"... any"}],"function_type":"method","source":{"line":130,"path":"packages/Remote/ClientRemoteSignal.lua"}}],"properties":[],"types":[],"name":"ClientRemoteSignal","desc":"Client remote signals should not be created by the user, and are used internally\\nby CommunicationSignals to expose remote signals to the client. They are basically an \\nabstraction of remote events.\\n\\n```lua\\n-- Same as clientRemoteSignal._remoteEvent:FireServer(\\"yo\\") !\\nclientRemoteSignal:Fire(\\"yo\\")\\n```","realm":["Client"],"source":{"line":31,"path":"packages/Remote/ClientRemoteSignal.lua"}}')}}]);