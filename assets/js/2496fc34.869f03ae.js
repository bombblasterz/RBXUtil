"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2225],{95972:function(n){n.exports=JSON.parse('{"functions":[{"name":"GetDispatchedSignal","desc":"Returns a promise which is resolved with the serverside dispatched signal if found. If `timeout` is specified, then \\nthe method will wait for `timeout` seconds for the serverside dispatched signal to exist before assuming that it doesn\'t\\nand rejecting with a `nil` value.\\n\\n```lua\\n-- On the server:\\nlocal signal = CommunicationSignal.new(\\"Signal\\")\\nsignal:Bind(\\"bo\\", true)\\n\\n-- On the client:\\nCommunicationSignal.GetDispatchedSignal(\\"Signal\\"):andThen(function(signal)\\n\\tprint(signal.Members.bo) --\x3e true\\nend)\\n```\\n:::tip\\nCalling this method for the same dispatched signal will return cached results.\\n\\nFor e.g:\\n\\n```lua\\n-- On the server:\\nlocal signal = CommunicationSignal.new(\\"Signal\\")\\nsignal:Bind(\\"bo\\", true)\\nsignal:DispatchToClient()\\n\\n-- On the client:\\nlocal s = CommunicationSignal.GetDispatchedSignal(\\"Signal\\"):expect()\\nlocal o = CommunicationSignal.GetDispatchedSignal(\\"Signal\\"):expect()\\nprint(s == o)\\n```\\n:::\\n\\n:::warning\\nThe returned communication signal will also be destroyed once the dispatched signal\'s serverside counterpart is destroyed. \\n\\nFor e.g:\\n\\n```lua\\n-- On the server:\\nlocal signal = CommunicationSignal.new(\\"Signal\\")\\nsignal:DispatchToClient()\\ntask.delay(5, function() signal:Destroy() end))\\n\\n-- On the client\\nlocal sig = CommunicationSignal.GetDispatchedSignal(\\"Signal\\"):expect()\\nprint(typeof(sig.Members)) --\x3e \\"table\\" \\ntask.wait(5) -- wait for it to be destroyed on the server\\nprint(typeof(sig.Members)) --\x3e \\"nil\\"\\n```\\n:::","params":[{"name":"identifier","desc":"","lua_type":"string"},{"name":"timeout","desc":"","lua_type":"number ?"}],"returns":[{"desc":"","lua_type":"Promise"}],"function_type":"static","yields":true,"source":{"line":164,"path":"packages/Remote/CommunicationSignal/Client.lua"}},{"name":"IsA","desc":"A method which returns a boolean indicating if `self` is a client communication signal or not.","params":[{"name":"self","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":240,"path":"packages/Remote/CommunicationSignal/Client.lua"}},{"name":"Build","desc":"A method which builds the communication signal for client-side use.\\n\\nFor e.g:\\n\\n```lua\\n-- On the server:\\nlocal signal = CommunicationSignal.new(\\"Signal\\")\\nsignal:Bind(\\"Table\\", {1,2,3})\\nsignal:DispatchToClient()\\n\\n-- On the client:\\nlocal clientCommunicationSignal = CommunicationSignal.GetDispatchedSignal(\\"Signal\\"):expect()\\nlocal builtDispatchedSignal = clientCommunicationSignal:BuildDispatchedSignal()\\n\\n-- Normally to access members you would do:\\nprint(clientCommunicationSignal.Members.Table) --\x3e {1, 2, 3}\\n\\n-- Via dispatched signal:\\nprint(builtDispatchedSignal.Table) --\x3e  {1, 2, 3} \\n```\\n\\n:::tip\\nCalling this method again will return cached results.\\n\\nFor e.g:\\n\\n```lua\\nlocal s = clientCommunicationSignal:Build()\\nlocal o = clientCommunicationSignal:Build()\\nprint(s == o) --\x3e true\\n```\\n:::","params":[],"returns":[{"desc":"","lua_type":"table"}],"function_type":"method","source":{"line":282,"path":"packages/Remote/CommunicationSignal/Client.lua"}},{"name":"GetMethod","desc":"A method which returns a method of key `name` in the signal.","params":[{"name":"name","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"function ?"}],"function_type":"method","source":{"line":306,"path":"packages/Remote/CommunicationSignal/Client.lua"}}],"properties":[{"name":"Members","desc":"A dictionary of all members binded to the signal.","lua_type":"table","tags":["ClientCommunicationSignal"],"readonly":true,"source":{"line":69,"path":"packages/Remote/CommunicationSignal/Client.lua"}},{"name":"RemoteSignals","desc":"A dictionary of all remote signals binded to the signal.","lua_type":"table","tags":["ClientCommunicationSignal"],"readonly":true,"source":{"line":78,"path":"packages/Remote/CommunicationSignal/Client.lua"}},{"name":"RemoteProperties","desc":"A dictionary of all remote properties binded to the signal.","lua_type":"table","tags":["ClientCommunicationSignal"],"readonly":true,"source":{"line":87,"path":"packages/Remote/CommunicationSignal/Client.lua"}},{"name":"Members","desc":"A dictionary of all members binded to the signal.","lua_type":"table","tags":["ClientCommunicationSignal"],"readonly":true,"source":{"line":63,"path":"packages/Remote/CommunicationSignal/Server.lua"}},{"name":"RemoteSignals","desc":"A dictionary of all remote signals binded to the signal.","lua_type":"table","tags":["ClientCommunicationSignal"],"readonly":true,"source":{"line":72,"path":"packages/Remote/CommunicationSignal/Server.lua"}},{"name":"RemoteProperties","desc":"A dictionary of all remote properties binded to the signal.","lua_type":"table","tags":["ClientCommunicationSignal"],"readonly":true,"source":{"line":81,"path":"packages/Remote/CommunicationSignal/Server.lua"}}],"types":[],"name":"ClientCommunicationSignal","desc":"A client communication signal contains all the members, remote signals and remote properties binded to it\'s server\\ncounter part.\\n\\n```lua\\n-- On the server:\\nlocal communicationSignal = CommunicationSignal.new(\\"ServersideService\\")\\ncommunicationSignal:Bind(\\"Test\\", 123)\\ncommunicationSignal:Bind(\\"T\\", {1, 2, 3})\\ncommunicationSignal:Bind(\\"Signal\\", RemoteSignal.new())\\ncommunicationSignal:DispatchToClient()\\n\\n-- On the client:\\nlocal communicationSignal = CommunicationSignal.GetDispatchedSignal(\\"ServersideService\\")\\n\\nprint(\\n\\tcommunicationSignal.Members.Test,  --\x3e 123\\n\\tcommunicationSignal.Members.T, --\x3e {1, 2, 3}\\n\\tcommunicationRemote.RemoteSignals.Signal \\n)\\n```\\n\\n:::note\\nRemote signals and remote properties exposed to the client are represented differently on the client. They are represented\\nas client remote properties and client remote signals, except they are also binded to their serverside counter parts. \\n\\nFor e.g:\\n\\n```lua\\n-- On the server\\nlocal communicationSignal = CommunicationSignal.new(\\"ServersideService\\")\\ncommunicationSignal:Bind(\\"Bo\\", RemoteSignal.new())\\ncommunicationSignal:DispatchToClient()\\n\\n-- On the client\\nlocal communicationSignal = CommunicationSignal.GetDispatchedSignal(\\"ServersideService\\"):expect() \\nprint(ClientRemoteSignal.IsA(communicationSignal:GetRemoteSignal(\\"Bo\\"))) --\x3e true\\n```\\n:::","realm":["Client"],"source":{"line":60,"path":"packages/Remote/CommunicationSignal/Client.lua"}}')}}]);