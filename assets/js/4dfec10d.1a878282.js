"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[38],{95972:function(n){n.exports=JSON.parse('{"functions":[{"name":"GetSignal","desc":"Creates and returns a new client communication signal and binds it with it\'s server counterpart.\\n\\n:::warning\\nThis method wil error if it couldn\'t find a serverside communication signal with the identifier of `identifier`.\\n:::","params":[{"name":"identifier","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"ClientCommunicationSignal"}],"function_type":"static","source":{"line":105,"path":"packages/Remote/CommunicationSignal/Client.lua"}},{"name":"IsSignal","desc":"A method which is used to check if `self` is a client communication signal or not.","params":[{"name":"self","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":140,"path":"packages/Remote/CommunicationSignal/Client.lua"}},{"name":"Dispatch","desc":"A method which dispatches the client communication signal for client-side use.\\n\\n```lua\\n-- On the server:\\nlocal signal = CommunicationSignal.new(\\"Signal\\")\\nsignal:Bind(\\"Table\\", {1,2,3})\\n\\n-- On the client:\\nlocal clientCommunicationSignal = CommunicationSignal.GetSignal(\\"Signal\\")\\nlocal dispatchedSignal = clientCommunicationSignal:Dispatch()\\n\\nprint(dispatchedSignal) --\x3e { Table = {1, 2, 3} }\\n```","params":[],"returns":[{"desc":"","lua_type":"table"}],"function_type":"method","source":{"line":163,"path":"packages/Remote/CommunicationSignal/Client.lua"}}],"properties":[{"name":"Members","desc":"A dictionary of all members binded to the signal.","lua_type":"table","tags":["ClientCommunicationSignal"],"source":{"line":64,"path":"packages/Remote/CommunicationSignal/Client.lua"}},{"name":"RemoteSignals","desc":"A dictionary of all remote signals binded to the signal.","lua_type":"table","tags":["ClientCommunicationSignal"],"source":{"line":72,"path":"packages/Remote/CommunicationSignal/Client.lua"}},{"name":"RemoteProperties","desc":"A dictionary of all remote properties binded to the signal.","lua_type":"table","tags":["ClientCommunicationSignal"],"source":{"line":80,"path":"packages/Remote/CommunicationSignal/Client.lua"}}],"types":[],"name":"ClientCommunicationSignal","desc":"A client communication signal contains all the members, remote signals and remote properties binded to it\'s server\\ncounter part.\\n\\n```lua\\n-- On the server:\\nlocal communicationSignal = CommunicationSignal.new(\\"ServersideService\\")\\ncommunicationSignal:Bind(\\"Test\\", 123)\\ncommunicationSignal:Bind(\\"T\\", {1, 2, 3})\\ncommunicationSignal:Bind(\\"Signal\\", RemoteSignal.new())\\n\\n-- On the client:\\nlocal communicationSignal = CommunicationSignal.GetSignal(\\"ServersideService\\")\\n\\nprint(\\n\\tcommunicationSignal.Members.Test,  --\x3e 123\\n\\tcommunicationSignal.Members.T, --\x3e {1, 2, 3}\\n\\tcommunicationRemote.RemoteSignals.Signal \\n)\\n```\\n:::note\\nRemote signals and remote properties (binded to a signal) are represented differently on the client. They are represented\\nas client remote properties and signals, except they are binded to their serverside counter parts. \\n\\nFor e.g:\\n\\n```lua\\n-- On the server\\nlocal communicationSignal = CommunicationSignal.new(\\"ServersideService\\")\\ncommunicationSignal:Bind(\\"Bo\\", RemoteSignal.new())\\n\\n-- On the client\\nlocal communicationSignal = CommunicationSignal.GetSignal(\\"ServersideService\\")\\nprint(ClientRemoteProperty.IsClientRemoteProperty(communicationSignal.RemoteSignals.Bo)) --\x3e true\\n```\\n:::","realm":["Client"],"source":{"line":56,"path":"packages/Remote/CommunicationSignal/Client.lua"}}')}}]);