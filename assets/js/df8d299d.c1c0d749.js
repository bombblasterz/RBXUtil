"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6349],{29498:function(n){n.exports=JSON.parse('{"functions":[{"name":"new","desc":"A constructor method which creates and returns a new maid.","params":[],"returns":[{"desc":"","lua_type":"Maid"}],"function_type":"static","source":{"line":83,"path":"packages/Maid/init.lua"}},{"name":"IsA","desc":"A method which is used to check if the given argument is a maid or not.","params":[{"name":"self","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":97,"path":"packages/Maid/init.lua"}},{"name":"AddTask","desc":"Adds a task for the maid to cleanup. \\n\\n:::note\\nIf `table` is passed as a task, it must have a `Destroy` or `Disconnect` method so that it can be cleaned up.\\n:::","params":[{"name":"task","desc":"","lua_type":"function | RBXScriptConnection | table | Instance"}],"returns":[{"desc":"","lua_type":"task"}],"function_type":"method","tags":["Maid"],"source":{"line":113,"path":"packages/Maid/init.lua"}},{"name":"RemoveTask","desc":"Removes the task (assuming it was added as an task for the maid to cleanup) so that it will not be cleaned up. ","params":[{"name":"task","desc":"","lua_type":"task"}],"returns":[],"function_type":"method","tags":["Maid"],"source":{"line":140,"path":"packages/Maid/init.lua"}},{"name":"Cleanup","desc":"Cleans up all the added tasks.\\n\\n| Task      | Type                          |\\n| ----------- | ------------------------------------ |\\n| `function`  | The function will be called.  |\\n| `table`     | Any `Destroy` or `Disconnect` method in the table will be called. |\\n| `Instance`    | The instance will be destroyed. |\\n| `RBXScriptConnection`    | The connection will be disconnected. |","params":[],"returns":[],"function_type":"method","tags":["Maid"],"source":{"line":156,"path":"packages/Maid/init.lua"}},{"name":"Destroy","desc":"Destroys the maid and renders it unusuable, as well as cleans up all tasks.","params":[],"returns":[],"function_type":"method","tags":["Maid"],"source":{"line":166,"path":"packages/Maid/init.lua"}},{"name":"LinkToInstance","desc":"Links the given instance to the maid so that the maid will be destroyed once the instance has been removed from the game i.e parented to `nil`.\\nIf `callback` is specified, it will be called before destroying the maid (when the instance is parented to `nil`) and \\nif the function upon being called doesn\'t return a truthy value, the maid will not be destroyed.\\n\\nFor e.g:\\n\\n```lua\\nlocal instance = ... -- some instance parented to workspace\\nlocal maid = Maid.new()\\n\\nmaid:AddTask(function()\\n\\twarn(\\"cleaned up\\")\\nend)\\n\\nmaid:LinkToInstance(instance)\\ninstance.Parent = nil\\n-- Now the maid will cleanup as the instance is parented to nil.\\n```\\n\\nHere\'s an alternate case:\\n\\n```lua\\nlocal instance = ... -- some instance parented to workspace\\nlocal maid = Maid.new()\\n\\nmaid:AddTask(function()\\n\\twarn(\\"cleaned up\\")\\nend)\\n\\nmaid:LinkToInstance(instance, function()\\n\\treturn not instance:GetAttribute(\\"DontHaveTheMaidCleanedupYetPlease\\") \\nend))\\n\\ninstance:SetAttribute(\\"DontHaveTheMaidCleanedupYetPlease\\", true)\\ninstance.Parent = nil\\n-- The instance is parented to nil, but the maid hasn\'t cleaned up!\\n```\\n\\nA connection is returned so that once it is disconnected, the maid will unlink from the instance. The connection \\nwill automatically be disconnected once the maid is destroyed and contains the following methods:\\n\\n| Methods      | Description                          |\\n| ----------- | ------------------------------------ |\\n| `Disconnect`  | The connection will be disconnected and the maid will unlink to the instance it was linked to.  |\\n| `IsConnected` | Returns a boolean indicating if the connection has been disconnected. |","params":[{"name":"instance","desc":"","lua_type":"Instance"},{"name":"callback","desc":"","lua_type":"function ?"}],"returns":[{"desc":"","lua_type":"Instance, Connection"}],"function_type":"method","source":{"line":232,"path":"packages/Maid/init.lua"}}],"properties":[],"types":[],"name":"Maid","desc":"Maids track tasks and clean them when needed.\\n\\nFor e.g:\\n```lua\\nlocal maid = Maid.new()\\nlocal connection = workspace.ChildAdded:Connect(function()\\n\\nend)\\nmaid:AddTask(connection)\\nmaid:Cleanup()\\n\\ntask.defer(function()\\n\\tprint(connection.Connected) --\x3e false\\nend)\\n```","source":{"line":40,"path":"packages/Maid/init.lua"}}')}}]);