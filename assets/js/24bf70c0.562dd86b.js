"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[758],{60244:function(e){e.exports=JSON.parse('{"functions":[{"name":"IsA","desc":"A method which returns a boolean indicating if `self` is a remote property or not.","params":[{"name":"self","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":102,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"new","desc":"Creates and returns a new remote property, with the initial value of the remote property being `initialValue`.\\n\\n`clientValueSetValidatorCallback` can be a function which will be run when a client requests to set their value to something\\nthey desire, _if this remote property is binded to the client through a communication signal_. For e.g:\\n\\n```lua\\n-- On the server\\nlocal remoteProp = RemoteProperty.new(3, function(player, valueTheyWantToSet)\\n\\tif IsValueValid(valueTheyWantToSet) then\\n\\t\\treturn true\\n\\tend\\nend)\\n-- Bind the remote prop to the client through a communication signal..\\n\\n-- On the client:\\nlocal remoteProp = ...\\n\\n-- This will tell the serverside remote property to set the value of the client to 50 by first\\n-- calling the onServerInvokeCallback and if it returns true, then the remote property sets the value \\n-- of the client to 50. If onServerInvokeCallback is not specified, then this won\'t work.\\nremoteProp:SetValue(50) \\n```","params":[{"name":"initialValue","desc":"","lua_type":"any"},{"name":"clientValueSetValidatorCallback","desc":"","lua_type":"function ?"}],"returns":[{"desc":"","lua_type":"RemoteProperty"}],"function_type":"static","source":{"line":135,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"IsBoundToClient","desc":"Returns a boolean indicating if the remote property is bound to the client.","params":[],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","tags":["RemoteProperty"],"source":{"line":172,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"BindToClient","desc":"","params":[],"returns":[],"function_type":"method","ignore":true,"source":{"line":180,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"Destroy","desc":"Destroys the remote property and renders it unusable, also destroys the client remote property binded to it.","params":[],"returns":[],"function_type":"method","tags":["RemoteProperty"],"source":{"line":210,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"GetPlayerValue","desc":"Returns the specific value of `player` stored in the remote property, or the current value of the remote property.","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","tags":["RemoteProperty"],"source":{"line":222,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"GetInitialValue","desc":"Returns the initial value of the remote property.\\n\\nFor e.g:\\n\\n```lua\\nlocal remoteProperty = RemoteProperty.new(50) -- 50 is the initial value\\nremoteProperty:SetValue(100)\\nprint(remoteProperty:GetInitialValue()) --\x3e 50\\n```","params":[],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","tags":["RemoteProperty"],"source":{"line":260,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"SetSpecificPlayersValue","desc":"Sets the value of each player (stored in the remote property) in `players` to `newValue`.\\n\\n:::warning\\nThis method is illegal to call if the remote property isn\'t bound to the client.\\n:::","params":[{"name":"players","desc":"","lua_type":"table"},{"name":"newValue","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["RemoteProperty"],"yields":true,"source":{"line":277,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"SetAllPlayerValues","desc":"Sets the value of each player (stored in the remote property) to `newValue` New players will have their client remote property (bound to this remote property) to be\\nupdated this new value automatically. \\n\\n:::warning\\nThis method is illegal to call if the remote property isn\'t bound to the client.\\n:::","params":[{"name":"newValue","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["RemoteProperty"],"yields":true,"source":{"line":320,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"GetValue","desc":"Returns the current value of the remote property.","params":[],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","tags":["RemoteProperty"],"source":{"line":343,"path":"packages/Remote/Server/RemoteProperty.lua"}}],"properties":[{"name":"OnValueUpdate","desc":"A signal which is fired whenever the value stored in the remote property is updated to a new one.\\n\\n```lua\\nremoteProperty.OnValueUpdate:Connect(function(newValue)\\n\\tprint((\\"Value was updated to %s\\"):format(tostring(newValue)))\\nend)\\n```","lua_type":"Signal <newValue: any>","tags":["RemoteProperty"],"readonly":true,"source":{"line":66,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"OnPlayerValueUpdate","desc":"A signal which is fired whenever the value of a player is updated to a new one.\\n\\n```lua\\nremoteProperty.OnPlayerValueUpdate:Connect(function(player, newValue)\\n\\tprint((\\"%s\'s value was updated to %s\\"):format(tostring(newValue)))\\nend)\\n```","lua_type":"Signal <player: Player, newValue: any>","tags":["RemoteProperty"],"readonly":true,"source":{"line":81,"path":"packages/Remote/Server/RemoteProperty.lua"}}],"types":[],"name":"RemoteProperty","desc":"Remote properties are powerful serverside objects  which contain getter and setter methods and\\nstore a value which can be retrieved by those methods, and are also an abstraction of remote functions which\\ncan also be exposed to the client through communication signals. \\n\\nFor e.g:\\n\\n```lua\\n-- On the server\\nlocal remoteProperty = RemoteProperty.new(50)\\n\\n-- On the client:\\nlocal remoteProperty = ...\\nprint(remoteProperty:GetValue()) --\x3e 50\\n```\\n\\n:::note\\nLimitations apply. For more information, see [Remote Functions and Events](https://developer.roblox.com/en-us/articles/Remote-Functions-and-Events).\\n:::","realm":["Server"],"source":{"line":51,"path":"packages/Remote/Server/RemoteProperty.lua"}}')}}]);