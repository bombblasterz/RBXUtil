"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6758],{60244:function(e){e.exports=JSON.parse('{"functions":[{"name":"IsA","desc":"A method which returns a boolean indicating if `self` is a remote property or not.","params":[{"name":"self","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":98,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"new","desc":"Creates and returns a new remote property.","params":[{"name":"initialValue","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"RemoteProperty"}],"function_type":"static","source":{"line":109,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"IsBoundToClient","desc":"Returns a boolean indicating if the remote property is bound to the client (client remote property).","params":[],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","tags":["RemoteProperty"],"source":{"line":133,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"Destroy","desc":"Destroys the remote property and makes it unusable, also destroys the client remote property binded to it.\\n\\n:::warning \\nTrivial errors will occur if your code unintentionally works on a destroyed remote property, only call this method when you\'re done working with it!\\n:::","params":[],"returns":[],"function_type":"method","tags":["RemoteProperty"],"source":{"line":161,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"GetPlayerValue","desc":"Returns the specific value of `player` stored in the remote property, or the current value of the remote property.","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","tags":["RemoteProperty"],"source":{"line":173,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"GetInitialValue","desc":"Returns the initial value of the remote property passed during it\'s creation. \\n\\nFor e.g:\\n\\n```lua\\nlocal remoteProperty = RemoteProperty.new(50)\\nremoteProperty:SetValue(100)\\nprint(remoteProperty:GetInitialValue()) --\x3e 50\\n```","params":[],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","tags":["RemoteProperty"],"source":{"line":208,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"SetSpecificPlayerValues","desc":"Sets the value of each player (stored in the remote property) in `players` to `newValue`. \\n\\n:::warning\\nThis method is illegal to call if the remote property isn\'t bound to the client!\\n:::","params":[{"name":"players","desc":"","lua_type":"table"},{"name":"newValue","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["RemoteProperty"],"yields":true,"source":{"line":225,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"SetAllPlayerValues","desc":"Sets the value of each player (stored in the remote property) to `newValue`. New players who don\'t have their values \\nset, will have it set to this new value. \\n\\n:::note\\n- Remote function limitations apply. For more information, see [Remote Functions and Events](https://developer.roblox.com/en-us/articles/Remote-Functions-and-Events).\\n:::\\n\\n:::warning\\nThis method is illegal to call if the remote property isn\'t bound to the client!\\n:::","params":[{"name":"newValue","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["RemoteProperty"],"yields":true,"source":{"line":258,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"SetPlayerValue","desc":"Sets the value of `player` (stored in the remote property) to `newValue`.\\n\\n:::note\\n- Remote function limitations apply. For more information, see [Remote Functions and Events](https://developer.roblox.com/en-us/articles/Remote-Functions-and-Events).\\n:::\\n\\n:::warning\\nThis method is illegal to call if the remote property isn\'t bound to the client!\\n:::","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"newValue","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["RemoteProperty"],"yields":true,"source":{"line":284,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"GetValue","desc":"Returns the current value of the remote property.","params":[],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","tags":["RemoteProperty"],"source":{"line":314,"path":"packages/Remote/Server/RemoteProperty.lua"}}],"properties":[{"name":"OnValueUpdate","desc":"A signal which is fired whenever the value stored in the remote property is updated to a new one.\\n\\n```lua\\nremoteProperty.ValueUpdate:Connect(function(newValue)\\n\\tprint((\\"Value was updated to %s\\"):format(tostring(newValue)))\\nend)\\n```","lua_type":"Signal <newValue: any>","tags":["RemoteProperty"],"readonly":true,"source":{"line":62,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"OnPlayerValueUpdate","desc":"A signal which is fired whenever the value of a player is updated to a new one.\\n\\n```lua\\nremoteProperty.OnPlayerValueUpdate:Connect(function(player, newValue)\\n\\tprint((\\"%s\'s value was updated to %s\\"):format(tostring(newValue)))\\nend)\\n```","lua_type":"Signal <player: Player, newValue: any>","tags":["RemoteProperty"],"readonly":true,"source":{"line":77,"path":"packages/Remote/Server/RemoteProperty.lua"}}],"types":[],"name":"RemoteProperty","desc":"Remote properties are serverside properties which contain getter and setter methods and\\nstore a value which can be retrieved by those methods, and are also an abstraction of remote functions. They can \\nalso be exposed to the client through communication signals.\\n\\n:::tip\\nRemote properties can also store in player specific values. Making them great for replicating and storing\\nvalues separate to each player!\\n\\n```lua\\n-- Set value 50, but only game.Players.SilentsReplacement should see it.\\nremoteProperty:SetValue(50, {game.Players.SilentsReplacement})\\n```\\n:::","realm":["Server"],"source":{"line":47,"path":"packages/Remote/Server/RemoteProperty.lua"}}')}}]);