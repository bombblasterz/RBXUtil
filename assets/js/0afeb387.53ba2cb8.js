"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[299],{80159:function(e){e.exports=JSON.parse('{"functions":[{"name":"IsRay","desc":"A method which is used to check if the given argument is a ray or not.","params":[{"name":"self","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":156,"path":"packages/Ray/init.lua"}},{"name":"new","desc":"A constructor which creates and returns a new ray from `origin`, `direction` and `params` (if provided).","params":[{"name":"origin","desc":"","lua_type":"Vector3"},{"name":"direction","desc":"","lua_type":"Vector3"},{"name":"params","desc":"","lua_type":"RaycastParams | nil"}],"returns":[{"desc":"","lua_type":"Ray"}],"function_type":"static","source":{"line":169,"path":"packages/Ray/init.lua"}},{"name":"Visualize","desc":"Visualizes the ray.","params":[],"returns":[],"function_type":"method","tags":["Ray"],"source":{"line":212,"path":"packages/Ray/init.lua"}},{"name":"SetVisualizerThickness","desc":"Sets the thickness of the ray visualizer.","params":[],"returns":[],"function_type":"method","tags":["Ray"],"source":{"line":222,"path":"packages/Ray/init.lua"}},{"name":"Unvisualize","desc":"Unvisualizes the ray.","params":[],"returns":[],"function_type":"method","tags":["Ray"],"source":{"line":242,"path":"packages/Ray/init.lua"}},{"name":"GetTouchingParts","desc":"Gets and returns all the parts the ray is touching within a specified limit `maxTouchingParts` (or `10` if not provided), \\nrespecting the raycast params provided to the constructor.","params":[{"name":"maxTouchingParts","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"table"}],"function_type":"method","tags":["Ray"],"source":{"line":255,"path":"packages/Ray/init.lua"}},{"name":"Update","desc":"A very useful method which is used for dynamically updating the origin, direction or the size of the ray. \\n\\n| Data members      | Description                          |\\n| ----------- | ------------------------------------ |\\n| `Origin`  | If specified, must be a Vector3.  |\\n| `Direction`     | If specified, must be a Vector3. |\\n| `Size`    | If specified, must be a number. |\\n\\n:::note \\nNote that at least 1 of the members must be specified.\\n:::\\n\\n:::tip \\nOther neccesary data (such as the ray visualizer and other properties) wil be updated as well to accommodate the new changes.\\n:::","params":[{"name":"data","desc":"","lua_type":"table"}],"returns":[],"function_type":"method","tags":["Ray"],"source":{"line":329,"path":"packages/Ray/init.lua"}},{"name":"Destroy","desc":"Destroys the ray by first destroying all signals and then setting all the keys in the object to `nil` and lastly,\\nsets the metatable of the object to `nil`. \\n\\n:::warning \\nTrivial errors will occur if your code unintentionally works on a destroyed ray, only call this method when you\'re done working with the ray!\\n:::","params":[],"returns":[],"function_type":"method","tags":["Ray"],"source":{"line":372,"path":"packages/Ray/init.lua"}}],"properties":[{"name":"Origin","desc":"The origin of the ray.","lua_type":"Vector3","tags":["Ray"],"source":{"line":50,"path":"packages/Ray/init.lua"}},{"name":"Direction","desc":"The direction of the ray, relative to it\'s origin.","lua_type":"Vector3","tags":["Ray"],"source":{"line":58,"path":"packages/Ray/init.lua"}},{"name":"Unit","desc":"The unit vector of the direction. Note that in a certain edge case where the direction is `Vector3.new(0, 0, 0)`, then this will be\\n`Vector3.new(0, 1, 0`).","lua_type":"Vector3","tags":["Ray"],"source":{"line":67,"path":"packages/Ray/init.lua"}},{"name":"Size","desc":"The size of the ray from it\'s origin to it\'s final position.","lua_type":"number","tags":["Ray"],"source":{"line":75,"path":"packages/Ray/init.lua"}},{"name":"OnInstanceHit","desc":"A signal which is fired whenever an instance \\"hits\\" the ray, respecting raycast params (if provided).","lua_type":"Signal","tags":["Ray"],"source":{"line":83,"path":"packages/Ray/init.lua"}},{"name":"Visualizer","desc":"An instance which is used to visualize the ray. \\n\\n:::note\\nRay visualizers will never be 100% accurate, due to how small rays actually are. However, they will be accurate up to\\n99.2% if their thickness is the default (i.e not set through `Ray:SetVisualizerThickness`).\\n:::","lua_type":"Instance","tags":["Ray"],"source":{"line":96,"path":"packages/Ray/init.lua"}},{"name":"Results","desc":"A table of raycast results.\\n\\n| Results      | Description                          |\\n| ----------- | ------------------------------------ |\\n| `Instance`  | The BasePart or Terrain cell that the ray intersected.  |\\n| `Position`  | The world space point at which the intersection occurred, usually a point directly on the surface of the instance. |\\n| `Material`  | The Material at the intersection point. For normal parts this is the BasePart.Material; for Terrain this can vary depending on terrain data. |\\n| `Normal`    | The normal vector of the intersected face. |","lua_type":"table","tags":["Ray"],"source":{"line":111,"path":"packages/Ray/init.lua"}}],"types":[],"name":"Ray","desc":"Rays are objects which extend and abstract the functionality of existing raycast features Roblox has given us.\\n\\nA common use case would be to visualize rays, for e.g:\\n\\n```lua\\nlocal ray = Ray.new(Vector3.new(), Vector3.new(35, 0, 75))\\nray:Visualize() -- Visualize the ray!\\n```","source":{"line":42,"path":"packages/Ray/init.lua"}}')}}]);