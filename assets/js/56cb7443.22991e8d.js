"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[800],{17461:function(e){e.exports=JSON.parse('{"functions":[{"name":"IsRemoteSignal","desc":"A method which is used to check if `self` is a remote signal or not.","params":[{"name":"self","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":43,"path":"packages/Remote/RemoteSignal.lua"}},{"name":"new","desc":"Creates and returns a new remote signal.","params":[],"returns":[{"desc":"","lua_type":"RemoteSignal"}],"function_type":"static","source":{"line":53,"path":"packages/Remote/RemoteSignal.lua"}},{"name":"Destroy","desc":"Destroys the remote signal by first destroying all the remote event internally binded to it and then setting all the keys in the remote signal to `nil` and lastly,\\nsets the metatable of the remote signal to `nil`. \\n\\n:::warning \\nTrivial errors will occur if your code unintentionally works on a destroyed remote signal, only call this method when you\'re done working with it!\\n:::","params":[],"returns":[],"function_type":"method","tags":["RemoteSignal"],"source":{"line":87,"path":"packages/Remote/RemoteSignal.lua"}},{"name":"Connect","desc":"Works the same as `remoteEvent:Connect(callback)`.  ","params":[],"returns":[{"desc":"","lua_type":"RBXScriptConnection"}],"function_type":"method","tags":["RemoteSignal"],"source":{"line":98,"path":"packages/Remote/RemoteSignal.lua"}},{"name":"FireClient","desc":"Works the same as `remoteEvent:FireClient(client, ...)`.  ","params":[{"name":"client","desc":"","lua_type":"Player"},{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["RemoteSignal"],"source":{"line":115,"path":"packages/Remote/RemoteSignal.lua"}},{"name":"FireAllClients","desc":"Works the same as `remoteEvent:FireAllClients(...)`.  ","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["RemoteSignal"],"source":{"line":131,"path":"packages/Remote/RemoteSignal.lua"}},{"name":"FireClients","desc":"Works the same as `remoteEvent:FireClient(player, ...`), but only for players in the `clients` table.","params":[{"name":"clients","desc":"","lua_type":"table"},{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["RemoteSignal"],"source":{"line":143,"path":"packages/Remote/RemoteSignal.lua"}}],"properties":[],"types":[],"name":"RemoteSignal","desc":"Remote signals are an abstraction of remote events i.e they can be created on the server and be\\nexposed to the client as well.","realm":["Server"],"source":{"line":27,"path":"packages/Remote/RemoteSignal.lua"}}')}}]);