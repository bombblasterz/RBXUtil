"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[758],{60244:function(e){e.exports=JSON.parse('{"functions":[{"name":"IsA","desc":"A method which returns a boolean indicating if `self` is a remote property or not.","params":[{"name":"self","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":102,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"new","desc":"Creates and returns a new remote property, with the initial value of the remote property being `initialValue`.\\n\\n`clientValueSetValidatorCallback` can be a function which will be run when a client requests to set their value to something\\nthey desire, _if this remote property is binded to the client through a communication signal_. For e.g:\\n\\n```lua\\n-- On the server\\nlocal remoteProperty = RemoteProperty.new(3, function(player, valueTheyWantToSet)\\n\\tif IsValueValid(valueTheyWantToSet) then\\n\\t\\treturn true\\n\\tend\\nend)\\n\\n-- On the client:\\nlocal clientRemoteProperty = ...\\n\\n-- This will tell the serverside remote property to set the value of the client to 50 by first\\n-- calling the onServerInvokeCallback and if it returns true, then the remote property sets the value \\n-- of the client to 50. If onServerInvokeCallback is not specified, then this won\'t work.\\nclientRemoteProperty:SetValue(50) \\n```","params":[{"name":"initialValue","desc":"","lua_type":"any"},{"name":"clientValueSetValidatorCallback","desc":"","lua_type":"function ?"}],"returns":[{"desc":"","lua_type":"RemoteProperty"}],"function_type":"static","source":{"line":134,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"IsBoundToClient","desc":"Returns a boolean indicating if the remote property is bound to the client.","params":[],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","tags":["RemoteProperty"],"source":{"line":172,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"BindToClient","desc":"","params":[],"returns":[],"function_type":"method","ignore":true,"source":{"line":180,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"Destroy","desc":"Destroys the remote property, renders it unusable and cleans up everything.","params":[],"returns":[],"function_type":"method","tags":["RemoteProperty"],"source":{"line":202,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"GetPlayerValue","desc":"Returns the specific value of `player` stored in the remote property, or the current value of the remote property.\\n\\n:::note\\nIf a player has their own specific value stored in the remote property, it will be flushed (cleared out) when they leave. \\n:::","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","tags":["RemoteProperty"],"source":{"line":218,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"GetInitialValue","desc":"Returns the initial value of the remote property.\\n\\nFor e.g:\\n\\n```lua\\nlocal remoteProperty = RemoteProperty.new(50) -- 50 is the initial value\\nremoteProperty:SetValue(100)\\nprint(remoteProperty:GetInitialValue()) --\x3e 50\\n```","params":[],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","tags":["RemoteProperty"],"source":{"line":256,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"SetSpecificPlayersValue","desc":"Sets the value of each player (stored in the remote property) in `players` to `newValue` and updates\\ntheir client remote property (the one that is bound to this remote property) to `newValue`.\\n\\n:::warning\\nThis method is illegal to call if the remote property isn\'t bound to the client.\\n:::","params":[{"name":"players","desc":"","lua_type":"table"},{"name":"newValue","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["RemoteProperty"],"yields":true,"source":{"line":274,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"SetPlayerValue","desc":"Sets the value of `player` (stored in the remote property) to `newValue` and updates\\ntheir client remote property (the one that is bound to this remote property) to `newValue`. \\n\\n:::warning\\nThis method is illegal to call if the remote property isn\'t bound to the client.\\n:::","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"newValue","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["RemoteProperty"],"yields":true,"source":{"line":317,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"SetAllPlayersValue","desc":"Sets the value of each player (stored in the remote property) to `newValue` and updates\\ntheir remote property to `newValue`. \\n\\nNew players will have their client remote property (the one that is bound to this remote property) to be\\nupdated this new value automatically and also updates the current value of the remote remote property to `newValue`. \\n\\n:::warning\\nThis method is illegal to call if the remote property isn\'t bound to the client.\\n:::","params":[{"name":"newValue","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["RemoteProperty"],"yields":true,"source":{"line":349,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"SetValue","desc":"Sets the value of the remote property to `newValue`.\\n\\n:::warning\\nThis method is illegal to call if the remote property is bound to the client, as \\nideally a remote property bound to the client ideally should never have a value of it\'s own.\\n:::","params":[{"name":"newValue","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["RemoteProperty"],"source":{"line":370,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"GetValue","desc":"Returns the current value of the remote property.\\n\\n:::warning\\nThis method is illegal to call if the remote property is bound to the client, as \\nideally a remote property bound to the client ideally should never have a value of it\'s own.\\n:::","params":[],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","tags":["RemoteProperty"],"source":{"line":391,"path":"packages/Remote/Server/RemoteProperty.lua"}}],"properties":[{"name":"OnValueUpdate","desc":"A signal which is fired whenever the value stored in the remote property is updated to a new one.\\n\\n```lua\\nremoteProperty.OnValueUpdate:Connect(function(newValue)\\n\\tprint((\\"Value was updated to %s\\"):format(tostring(newValue)))\\nend)\\n```","lua_type":"Signal <newValue: any>","tags":["RemoteProperty"],"readonly":true,"source":{"line":66,"path":"packages/Remote/Server/RemoteProperty.lua"}},{"name":"OnPlayerValueUpdate","desc":"A signal which is fired whenever the value of a player is updated to a new one.\\n\\n```lua\\nremoteProperty.OnPlayerValueUpdate:Connect(function(player, newValue)\\n\\tprint((\\"%s\'s value was updated to %s\\"):format(tostring(newValue)))\\nend)\\n```","lua_type":"Signal <player: Player, newValue: any>","tags":["RemoteProperty"],"readonly":true,"source":{"line":81,"path":"packages/Remote/Server/RemoteProperty.lua"}}],"types":[],"name":"RemoteProperty","desc":"Remote properties are powerful serverside objects  which contain getter and setter methods and\\nstore a value which can be retrieved by those methods, and are also an abstraction of remote functions which\\ncan also be exposed to the client through communication signals. \\n\\nFor e.g:\\n\\n```lua\\n-- On the server\\nlocal remoteProperty = RemoteProperty.new(50)\\n\\n-- On the client:\\nlocal remoteProperty = ...\\nprint(remoteProperty:GetValue()) --\x3e 50\\n```\\n:::note\\nRemote function limitations and behavior edge cases apply. For more information, see [Remote Functions and Events](https://developer.roblox.com/en-us/articles/Remote-Functions-and-Events).\\n:::","realm":["Server"],"source":{"line":51,"path":"packages/Remote/Server/RemoteProperty.lua"}}')}}]);