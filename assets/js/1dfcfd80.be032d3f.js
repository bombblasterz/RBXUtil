"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4832],{25825:function(e){e.exports=JSON.parse('{"functions":[{"name":"IsA","desc":"A method which returns a boolean indicating if `self` is a client remote property or not.","params":[{"name":"self","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":66,"path":"packages/Remote/Client/ClientRemoteProperty.lua"}},{"name":"new","desc":"Creates and returns a new client remote property.","params":[{"name":"currentValue","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"ClientRemoteProperty"}],"function_type":"static","source":{"line":77,"path":"packages/Remote/Client/ClientRemoteProperty.lua"}},{"name":"IsBoundToServer","desc":"Returns a boolean indicating if the client remote property is bound to the server (remote property).","params":[],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","tags":["ClientRemoteProperty"],"source":{"line":98,"path":"packages/Remote/Client/ClientRemoteProperty.lua"}},{"name":"BindToRemote","desc":"","params":[],"returns":[],"function_type":"method","ignore":true,"source":{"line":106,"path":"packages/Remote/Client/ClientRemoteProperty.lua"}},{"name":"Destroy","desc":"Destroys the client remote property and renders it unusable.\\n\\n:::note\\nThe client remote property will also be destroyed if the remote property it was bound to is destroyed.\\n:::","params":[],"returns":[],"function_type":"method","tags":["ClientRemoteProperty"],"source":{"line":130,"path":"packages/Remote/Client/ClientRemoteProperty.lua"}},{"name":"SetValue","desc":"Sets the value of the client remote property to `newValue`.\\n\\n:::warning \\nThis method is illegal to call if the client remote property is bound to the server.\\n:::","params":[{"name":"newValue","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","tags":["ClientRemoteProperty"],"source":{"line":145,"path":"packages/Remote/Client/ClientRemoteProperty.lua"}},{"name":"GetValue","desc":"Returns the value of the client remote property. If bound to the server (remote property), \\nthen it will retrieve the value of the local player from that serverside remote property and if there is no value \\nset specifically for the local player, then the value returned will be the current value of that\\nserverside remote property.\\n\\n:::tip \\nThis method will return `nil` if the serverside remote property (the one that this client\\nremote property is bound to) is destroyed, to prevent memory leaks.\\n\\nFor e.g:\\n\\n```lua\\n-- On the server:\\nserversideRemoteProp:Destroy()\\n\\n-- On the client:\\nprint(clientRemoteProp:GetValue()) --\x3e nil\\n```\\n:::\\t","params":[],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","tags":["ClientRemoteProperty"],"yields":true,"source":{"line":180,"path":"packages/Remote/Client/ClientRemoteProperty.lua"}}],"properties":[{"name":"OnValueUpdate","desc":" \\nA signal which is fired whenever the value of the client remote property is updated, either on the client\\nor on the server if the client remote property is bound to the server.","lua_type":"Signal <newValue: any>","tags":["ClientRemoteProperty"],"readonly":true,"source":{"line":47,"path":"packages/Remote/Client/ClientRemoteProperty.lua"}}],"types":[],"name":"ClientRemoteProperty","desc":"Client remote properties are clientside objects which work like remote properties in general and can either be\\nbinded to their server counterparts (for server-client relationship) or just work between the client only.\\n\\n```lua\\nlocal clientRemoteProperty = ClientRemoteProperty.new(50)\\nprint(clientRemoteProperty:GetValue()) --\x3e 50\\nclientRemoteProperty:SetValue(clientRemoteProperty:GetValue() + 100)\\nprint(clientRemoteProperty:GetValue()) --\x3e 150\\n```","realm":["Client"],"source":{"line":37,"path":"packages/Remote/Client/ClientRemoteProperty.lua"}}')}}]);