"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[319],{60244:function(e){e.exports=JSON.parse('{"functions":[{"name":"IsRemoteProperty","desc":"A method which is used to check if `self` is a remote property or not.","params":[{"name":"self","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":83,"path":"packages/Remote/RemoteProperty.lua"}},{"name":"new","desc":"Creates and returns a new remote property.","params":[{"name":"defaultValue","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"RemoteProperty"}],"function_type":"static","source":{"line":94,"path":"packages/Remote/RemoteProperty.lua"}},{"name":"Destroy","desc":"Destroys the remote property and makes it unusable.\\n\\n:::warning \\nTrivial errors will occur if your code unintentionally works on a destroyed remote property, only call this method when you\'re done working with it!\\n:::","params":[],"returns":[],"function_type":"method","tags":["RemoteProperty"],"source":{"line":138,"path":"packages/Remote/RemoteProperty.lua"}},{"name":"GetPlayerValue","desc":"Returns the value of `player` stored in the remote property, or the current value of the remote property.","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","tags":["RemoteProperty"],"source":{"line":150,"path":"packages/Remote/RemoteProperty.lua"}},{"name":"GetDefaultValue","desc":"Returns the default (initial) value of the remote property.","params":[],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","tags":["RemoteProperty"],"source":{"line":177,"path":"packages/Remote/RemoteProperty.lua"}},{"name":"SetValue","desc":"Sets the value of the remote property to `newValue`, if the current value isn\'t the same as `newValue`. If `specificPlayers`\\nis provided, only the values of the players in the table will be set. Otherwise if not specified, `specificPlayers` will be\\nassumed to be `game.Players:GetPlayers()`.\\n\\n```lua\\nlocal specificPlayers = {game.Players.boboYaya}\\nremoteProperty:SetValue(50, specificPlayers)\\n\\nprint(remoteProperty:GetCurrentValue()) --\x3e nil (or some value) \\nprint(remoteProperty:GetPlayerValue(game.Players.boboYaya)) --\x3e 50\\n```","params":[{"name":"newValue","desc":"","lua_type":"any"},{"name":"specificPlayers","desc":"","lua_type":"table | nil"}],"returns":[],"function_type":"method","tags":["RemoteProperty"],"source":{"line":199,"path":"packages/Remote/RemoteProperty.lua"}},{"name":"GetValue","desc":"Returns the current value of the remote property.","params":[],"returns":[{"desc":"","lua_type":"any"}],"function_type":"method","tags":["RemoteProperty"],"source":{"line":245,"path":"packages/Remote/RemoteProperty.lua"}}],"properties":[{"name":"OnValueUpdate","desc":"A signal which is fired whenever the value stored in the remote property is updated to a new one.\\n\\n```lua\\nremoteProperty.ValueUpdate:Connect(function(newValue)\\n\\tprint((\\"Value was updated to %s\\"):format(tostring(newValue)))\\nend)\\n```","lua_type":"Signal <newValue: any>","tags":["RemoteProperty"],"source":{"line":51,"path":"packages/Remote/RemoteProperty.lua"}},{"name":"OnPlayerValueUpdate","desc":"A signal which is fired whenever the value of a player is updated to a new one.\\n\\n```lua\\nremoteProperty.OnPlayerValueUpdate:Connect(function(player, newValue)\\n\\tprint((\\"%s\'s value was updated to %s\\"):format(tostring(newValue)))\\nend)\\n```","lua_type":"Signal <player: Player, newValue: any>","tags":["RemoteProperty"],"source":{"line":65,"path":"packages/Remote/RemoteProperty.lua"}}],"types":[],"name":"RemoteProperty","desc":"Remote properties are serverside objects which contain getter and setter methods and\\nstore a value which can be retrieved by those methods. \\n\\n:::tip\\nRemote properties can also store in player specific values. Making them great for replicating and storing\\nvalues separate to each player!\\n:::","realm":["Server"],"source":{"line":37,"path":"packages/Remote/RemoteProperty.lua"}}')}}]);