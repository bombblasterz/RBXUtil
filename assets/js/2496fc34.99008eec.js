"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2225],{95972:function(e){e.exports=JSON.parse('{"functions":[{"name":"GetDispatchedSignal","desc":"Returns a promise which is resolved once the serverside dispatched signal is found. If `timeout` is specified, then \\nthe method will wait for `timeout` seconds for the serverside dispatched signal to exist before assuming that it doesn\'t.\\n\\n```lua\\n-- On the server:\\nlocal signal = CommunicationSignal.new(\\"Signal\\")\\nsignal:Bind(\\"bo\\", true)\\n\\n-- On the client:\\nCommunicationSignal.GetDispatchedSignal(\\"Signal\\"):andThen(function(signal)\\n\\tprint(signal.Members.bo) --\x3e true\\nend)\\n```\\n\\n:::warning\\nThe returned communication signal will be unsuable once the signal\'s serverside counterpart is destroyed. \\n\\nFor e.g:\\n\\n```lua\\n-- On the server:\\nlocal signal = CommunicationSignal.new(\\"Signal\\")\\nsignal:Bind(\\"test\\", 1)\\ntask.delay(5, function() signal:Destroy() end))\\n\\n-- On the client\\nlocal sig = CommunicationSignal.GetSignal(\\"Signal\\"):expect()\\nprint(CommunicationSignal.Members.test) --\x3e 1\\ntask.wait(5) -- wait for it to be destroyed on the server\\nprint(CommunicationSignal) --\x3e {} empty\\n```\\n:::","params":[{"name":"identifier","desc":"","lua_type":"string"},{"name":"timeout","desc":"","lua_type":"number | nil"}],"returns":[{"desc":"","lua_type":"Promise"}],"function_type":"static","yields":true,"source":{"line":145,"path":"packages/Remote/CommunicationSignal/Client.lua"}},{"name":"IsA","desc":"A method which returns a boolean indicating if `self` is a client communication signal or not.","params":[{"name":"self","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":221,"path":"packages/Remote/CommunicationSignal/Client.lua"}},{"name":"Build","desc":"A method which builds the communication signal for client-side use.\\n\\nFor e.g:\\n\\n```lua\\n-- On the server:\\nlocal signal = CommunicationSignal.new(\\"Signal\\")\\nsignal:Bind(\\"Table\\", {1,2,3})\\n\\n-- On the client:\\nlocal clientCommunicationSignal = CommunicationSignal.GetSignal(\\"Signal\\"):expect()\\nlocal builtDispatchedSignal = clientCommunicationSignal:BuildDispatchedSignal()\\n\\n-- Normally to access members you would do:\\nprint(clientCommunicationSignal.Members.Table) --\x3e {1, 2, 3}\\n\\n-- Via dispatched signal:\\nprint(builtDispatchedSignal.Table) --\x3e  {1, 2, 3} \\n```","params":[],"returns":[{"desc":"","lua_type":"table"}],"function_type":"method","source":{"line":250,"path":"packages/Remote/CommunicationSignal/Client.lua"}},{"name":"GetMethod","desc":"A method which returns a method of key `name` in the signal.","params":[{"name":"name","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"function | nil"}],"function_type":"method","source":{"line":272,"path":"packages/Remote/CommunicationSignal/Client.lua"}},{"name":"GetRemoteSignal","desc":"A method which returns a remote signal of key `name` in the signal.","params":[{"name":"name","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"ClientRemoteSignal | nil"}],"function_type":"method","source":{"line":300,"path":"packages/Remote/CommunicationSignal/Client.lua"}},{"name":"GetRemoteProperty","desc":"A method which returns a remote property of key `name` in the signal.","params":[{"name":"name","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"ClientRemotePRoperty | nil"}],"function_type":"method","source":{"line":328,"path":"packages/Remote/CommunicationSignal/Client.lua"}}],"properties":[{"name":"Members","desc":"A dictionary of all members binded to the signal.","lua_type":"table","tags":["ClientCommunicationSignal"],"readonly":true,"source":{"line":68,"path":"packages/Remote/CommunicationSignal/Client.lua"}},{"name":"RemoteSignals","desc":"A dictionary of all remote signals binded to the signal.","lua_type":"table","tags":["ClientCommunicationSignal"],"readonly":true,"source":{"line":77,"path":"packages/Remote/CommunicationSignal/Client.lua"}},{"name":"RemoteProperties","desc":"A dictionary of all remote properties binded to the signal.","lua_type":"table","tags":["ClientCommunicationSignal"],"readonly":true,"source":{"line":86,"path":"packages/Remote/CommunicationSignal/Client.lua"}},{"name":"Members","desc":"A dictionary of all members binded to the signal.","lua_type":"table","tags":["ClientCommunicationSignal"],"readonly":true,"source":{"line":62,"path":"packages/Remote/CommunicationSignal/Server.lua"}},{"name":"RemoteSignals","desc":"A dictionary of all remote signals binded to the signal.","lua_type":"table","tags":["ClientCommunicationSignal"],"readonly":true,"source":{"line":71,"path":"packages/Remote/CommunicationSignal/Server.lua"}},{"name":"RemoteProperties","desc":"A dictionary of all remote properties binded to the signal.","lua_type":"table","tags":["ClientCommunicationSignal"],"readonly":true,"source":{"line":80,"path":"packages/Remote/CommunicationSignal/Server.lua"}}],"types":[],"name":"ClientCommunicationSignal","desc":"A client communication signal contains all the members, remote signals and remote properties binded to it\'s server\\ncounter part.\\n\\n```lua\\n-- On the server:\\nlocal communicationSignal = CommunicationSignal.new(\\"ServersideService\\")\\ncommunicationSignal:Bind(\\"Test\\", 123)\\ncommunicationSignal:Bind(\\"T\\", {1, 2, 3})\\ncommunicationSignal:Bind(\\"Signal\\", RemoteSignal.new())\\n\\n-- On the client:\\nlocal communicationSignal = CommunicationSignal.GetSignal(\\"ServersideService\\")\\n\\nprint(\\n\\tcommunicationSignal.Members.Test,  --\x3e 123\\n\\tcommunicationSignal.Members.T, --\x3e {1, 2, 3}\\n\\tcommunicationRemote.RemoteSignals.Signal \\n)\\n```\\n:::note\\nRemote signals and remote properties (binded to a signal) are represented differently on the client. They are represented\\nas client remote properties and signals, except they are binded to their serverside counter parts. \\n\\nFor e.g:\\n\\n```lua\\n-- On the server\\nlocal communicationSignal = CommunicationSignal.new(\\"ServersideService\\")\\ncommunicationSignal:Bind(\\"Bo\\", RemoteSignal.new())\\n\\n-- On the client\\nlocal communicationSignal = CommunicationSignal.GetSignal(\\"ServersideService\\"):expect() -- as GetSignal returns a promise\\nprint(ClientRemoteProperty.IsA(communicationSignal.RemoteSignals.Bo)) --\x3e true\\n```\\n:::","realm":["Client"],"source":{"line":59,"path":"packages/Remote/CommunicationSignal/Client.lua"}}')}}]);