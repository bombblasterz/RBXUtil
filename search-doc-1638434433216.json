[{"title":"Keyboard","type":0,"sectionRef":"#","url":"api/Keyboard","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"Keyboard","url":"api/Keyboard#functions","content":" "},{"title":"AreAllKeysDown","type":1,"pageTitle":"Keyboard","url":"api/Keyboard#AreAllKeysDown","content":"&lt;/&gt; Keyboard.AreAllKeysDown(...: EnumItem) → boolean A method which returns a boolean indicating if all keys in ... are held down.  "},{"title":"AreAnyKeysDown","type":1,"pageTitle":"Keyboard","url":"api/Keyboard#AreAnyKeysDown","content":"&lt;/&gt; Keyboard.AreAnyKeysDown(...: EnumItem) → boolean A method which returns a boolean indicating if any keys in ... are held down.  "},{"title":"IsKeyDown","type":1,"pageTitle":"Keyboard","url":"api/Keyboard#IsKeyDown","content":"&lt;/&gt; Keyboard.IsKeyDown(keycode: EnumItem) → boolean A method which returns a boolean indicating if keycode is held down. "},{"title":"ClientRemoteSignal","type":0,"sectionRef":"#","url":"api/ClientRemoteSignal","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#functions","content":" "},{"title":"IsA","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#IsA","content":"&lt;/&gt; ClientRemoteSignal.IsA(self: any) → boolean A method which returns a boolean indicating if self is a client remote signal or not.  "},{"title":"new","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#new","content":"&lt;/&gt; ClientRemoteSignal.new() → ClientRemoteSignal Creates and returns a new client remote signal.  "},{"title":"IsBoundToServer","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#IsBoundToServer","content":"ClientRemoteSignal &lt;/&gt; ClientRemoteSignal:IsBoundToServer() → boolean Returns a boolean indicating if the client remote signal is bound to a serverside remote signal.  "},{"title":"Connect","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#Connect","content":"ClientRemoteSignal &lt;/&gt; ClientRemoteSignal:Connect(callback: function) → RBXScriptConnection Same as self._remote:Connect(callback).  "},{"title":"Fire","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#Fire","content":"ClientRemoteSignal &lt;/&gt; ClientRemoteSignal:Fire(...: any) → () Same as self._remote:FireServer(...).  "},{"title":"Destroy","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#Destroy","content":"ClientRemoteSignal &lt;/&gt; ClientRemoteSignal:Destroy(...: any) → () Destroys the client remote signal and makes it unusuable. note The client remote signal will also be destroyed if the remote signal it was bound to was destroyed.  "},{"title":"Wait","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#Wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ClientRemoteSignal:Wait() → ... A method which yields the thread until the remote signal (that this client remote signal is bound to) is fired on the server. tip Any threads yielded through this method which aren't resumed yet, will be resumed with a nil value if the client remote signal is destroyed. This method will automatically return nil without yielding the thread if the remote signal (the one that this client remote signal is bound to) is destroyed. For e.g: -- On the server: remoteSignal:Destroy() -- On the client: print(remoteSignal:Wait()) --&gt; nil print(remoteSignal:Wait()) --&gt; nil print(remoteSignal:Wait()) --&gt; nil  "},{"title":"RemoteSignal","type":0,"sectionRef":"#","url":"api/RemoteSignal","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#functions","content":" "},{"title":"IsA","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#IsA","content":"&lt;/&gt; RemoteSignal.IsA(self: any) → boolean A method which returns a boolean indicating if self is a remote signal or not.  "},{"title":"new","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#new","content":"&lt;/&gt; RemoteSignal.new() → RemoteSignal Creates and returns a new remote signal.  "},{"title":"IsBoundToClient","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#IsBoundToClient","content":"RemoteSignal &lt;/&gt; RemoteSignal:IsBoundToClient() → boolean Returns a boolean indicating if the remote signal is bound to the client.  "},{"title":"Destroy","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#Destroy","content":"RemoteSignal &lt;/&gt; RemoteSignal:Destroy() → () Destroys the remote signal and renders it unusuable, also destroys the client remote signal binded to it.  "},{"title":"Connect","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#Connect","content":"RemoteSignal &lt;/&gt; RemoteSignal:Connect() → RBXScriptConnection Works the same as self._remote:Connect(callback).  "},{"title":"FireAllClients","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#FireAllClients","content":"RemoteSignal &lt;/&gt; RemoteSignal:FireAllClients(...: any) → () Works the same as self._remote:FireAllClients(player, ...).  "},{"title":"FireSpecificClients","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#FireSpecificClients","content":"RemoteSignal &lt;/&gt; RemoteSignal:FireSpecificClients( clients: table, ...: any ) → () Works the same as self._remote:FireClient(player, ...), but for all players in the clients table. "},{"title":"CommunicationSignal","type":0,"sectionRef":"#","url":"api/CommunicationSignal","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#functions","content":" "},{"title":"new","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#new","content":"&lt;/&gt; CommunicationSignal.new(identifier: string) → CommunicationSignal Creates and returns a new communication signal with the identifier of identifier.  "},{"title":"GetCommunicationSignal","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#GetCommunicationSignal","content":"&lt;/&gt; CommunicationSignal.GetCommunicationSignal(identifier: string) → CommunicationSignal Returns the communication signal whose identifier is identifier.  "},{"title":"IsA","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#IsA","content":"&lt;/&gt; CommunicationSignal.IsA(self: any) → boolean A method which returns a boolean indicating if self is a communication signal or not.  "},{"title":"Bind","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#Bind","content":"CommunicationSignal &lt;/&gt; CommunicationSignal:Bind( key: string, value: RemoteSignal | RemoteProperty | function | boolean | string | number | Instance | table ) → () Binds and exposes a new key key with value value to the client. note Remote function limitations apply, see Remote Functions and Events. warning It is not safe to access value if the communication signal has been destroyed as the binded value will also be destroyed (assuming it is a remote signal or remote property).  "},{"title":"DispatchToClient","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#DispatchToClient","content":"CommunicationSignal &lt;/&gt; CommunicationSignal:DispatchToClient() → () Dispatches the communication signal to the client.  "},{"title":"IsDispatchedToClient","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#IsDispatchedToClient","content":"CommunicationSignal &lt;/&gt; CommunicationSignal:IsDispatchedToClient() → boolean Returns a boolean indicating if the communication signal has been dispatched to the client.  "},{"title":"Destroy","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#Destroy","content":"CommunicationSignal &lt;/&gt; CommunicationSignal:Destroy() → () Destroys the communication signal and renders it unusable, also destroys the client counterpart and renders it unusuable. "},{"title":"Maid","type":0,"sectionRef":"#","url":"api/Maid","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"Maid","url":"api/Maid#functions","content":" "},{"title":"new","type":1,"pageTitle":"Maid","url":"api/Maid#new","content":"&lt;/&gt; Maid.new() → Maid A constructor method which creates and returns a new maid.  "},{"title":"IsA","type":1,"pageTitle":"Maid","url":"api/Maid#IsA","content":"&lt;/&gt; Maid.IsA(self: any) → boolean A method which is used to check if the given argument is a maid or not.  "},{"title":"AddTask","type":1,"pageTitle":"Maid","url":"api/Maid#AddTask","content":"Maid &lt;/&gt; Maid:AddTask(task: function | RBXScriptConnection | table | Instance) → task Adds a task for the maid to cleanup. note If table is passed as a task, it must have a Destroy or Disconnect method so that it can be cleaned up.  "},{"title":"RemoveTask","type":1,"pageTitle":"Maid","url":"api/Maid#RemoveTask","content":"Maid &lt;/&gt; Maid:RemoveTask(task: task) → () Removes the task so that it will not be cleaned up when the maid is cleaning up added tasks. For e.g: local task = function() end maid:AddTask(task) -- Okay, i just dont want task to be cleaned up anymore, redundant: maid:RemoveTask(task) maid:Cleanup() -- (nothing, the added task wasn't cleaned up as we removed it just after it was added, lol!)   "},{"title":"Cleanup","type":1,"pageTitle":"Maid","url":"api/Maid#Cleanup","content":"Maid &lt;/&gt; Maid:Cleanup() → () Cleans up all the added tasks. Task Cleanup procedure function The function will be called. table Any Destroy or Disconnect method in the table will be called. Instance The instance will be destroyed. RBXScriptConnection The connection will be disconnected.   "},{"title":"Destroy","type":1,"pageTitle":"Maid","url":"api/Maid#Destroy","content":"Maid &lt;/&gt; Maid:Destroy() → () Destroys the maid and renders it unusuable and cleans up all added tasks. Also unlinks the maid from all instances it was linked to. For e.g: local _, connection = maid:LinkToInstance(instance) print(connection:IsConnected()) --&gt; true maid:Destroy() print(connection:IsConnected()) --&gt; false   "},{"title":"LinkToInstance","type":1,"pageTitle":"Maid","url":"api/Maid#LinkToInstance","content":"&lt;/&gt; Maid:LinkToInstance( instance: Instance, callback: function? ) → ( Instance, Connection ) Links the given instance to the maid so that the maid will be destroyed once the instance has been removed from the game i.e parented to nil. If callback is specified, it will be called before destroying the maid (when the instance is parented to nil) and if the function upon being called doesn't return a truthy value, the maid will not be destroyed. For e.g: local instance = ... -- some instance parented to workspace local maid = Maid.new() maid:AddTask(function() warn(&quot;cleaned up&quot;) end) maid:LinkToInstance(instance) instance.Parent = nil -- Now the maid will cleanup as the instance is parented to nil. Here's an alternate case: local instance = ... -- some instance parented to workspace local maid = Maid.new() maid:AddTask(function() warn(&quot;cleaned up&quot;) end) maid:LinkToInstance(instance, function() return not instance:GetAttribute(&quot;DontHaveTheMaidCleanedupYetPlease&quot;) end)) instance:SetAttribute(&quot;DontHaveTheMaidCleanedupYetPlease&quot;, true) instance.Parent = nil -- The instance is parented to nil, but the maid hasn't cleaned up! A connection is returned so that once it is disconnected, the maid will unlink from the instance, which contains the following methods: Methods Description Disconnect The connection will be disconnected and the maid will unlink to the instance it was linked to. IsConnected Returns a boolean indicating if the connection has been disconnected.  "},{"title":"ClientRemoteProperty","type":0,"sectionRef":"#","url":"api/ClientRemoteProperty","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#properties","content":" "},{"title":"OnValueUpdate","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#OnValueUpdate","content":"This item is read only and cannot be modified. Read Only ClientRemoteProperty &lt;/&gt; ClientRemoteProperty.OnValueUpdate: Signal&lt;newValue: any&gt; A signal which is fired whenever the value of the client remote property is updated, either on the client or on the server if the client remote property is bound to the server. "},{"title":"Functions","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#functions","content":" "},{"title":"IsA","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#IsA","content":"&lt;/&gt; ClientRemoteProperty.IsA(self: any) → boolean A method which returns a boolean indicating if self is a client remote property or not.  "},{"title":"new","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#new","content":"&lt;/&gt; ClientRemoteProperty.new(currentValue: any) → ClientRemoteProperty Creates and returns a new client remote property.  "},{"title":"IsBoundToServer","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#IsBoundToServer","content":"ClientRemoteProperty &lt;/&gt; ClientRemoteProperty:IsBoundToServer() → boolean Returns a boolean indicating if the client remote property is bound to a server remote property.  "},{"title":"Destroy","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#Destroy","content":"ClientRemoteProperty &lt;/&gt; ClientRemoteProperty:Destroy() → () Destroys the client remote property and renders it unusable. note The client remote property will also be destroyed if the remote property it was bound to is destroyed.  "},{"title":"SetValue","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#SetValue","content":"ClientRemoteProperty &lt;/&gt; ClientRemoteProperty:SetValue(newValue: any) → () Sets the value of the client remote property to newValue. If the client remote property is bound to a serverside remote property, then it will ask that remote property to set the value for the client to newValue. note Since this method never yields, if the client remote property is bound to a serverside remote property, then it is not safe to assume that the value will be updated immediately after after this method is called. For e.g: -- On the server: local remoteProp = RemoteProperty.new(0, function(player, value) return true end) -- Bind the remote prop to the client, etc... clientRemoteProp:SetValue(50) print(clientRemoteProp:GetValue()) --&gt; 0 (not updated immediately) task.wait(1) -- give sum time print(clientRemoteProp:GetValue()) --&gt; 50   "},{"title":"GetValue","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#GetValue","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields ClientRemoteProperty &lt;/&gt; ClientRemoteProperty:GetValue() → any Returns the value of the client remote property. If bound to a serverside remote property, then it will retrieve the value of the local player from that serverside remote property and if there is no value set specifically for the local player, then the value returned will be the current value of that serverside remote property. tip This method will return automatically return nil without yielding the thread if the remote property (the one that this client remote property is bound to) is destroyed. For e.g: -- On the server: serversideRemoteProp:Destroy() -- On the client: print(clientRemoteProp:GetValue()) --&gt; nil  "},{"title":"UserInput","type":0,"sectionRef":"#","url":"api/UserInput","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"UserInput","url":"api/UserInput#properties","content":" "},{"title":"OnInputTypeChange","type":1,"pageTitle":"UserInput","url":"api/UserInput#OnInputTypeChange","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; UserInput.OnInputTypeChange: Signal&lt;newInputType: string&gt; A signal which is fired whenever the input type of the client changes.  "},{"title":"Mouse","type":1,"pageTitle":"UserInput","url":"api/UserInput#Mouse","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; UserInput.Mouse: table The required mouse module.  "},{"title":"Keyboard","type":1,"pageTitle":"UserInput","url":"api/UserInput#Keyboard","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; UserInput.Keyboard: table The required keyboard module.  "},{"title":"InputType","type":1,"pageTitle":"UserInput","url":"api/UserInput#InputType","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; UserInput.InputType: table A dictionary of input types. InputTypes Keyboard Mouse Gamepad Touch  "},{"title":"Functions","type":1,"pageTitle":"UserInput","url":"api/UserInput#functions","content":" "},{"title":"GetLastInputType","type":1,"pageTitle":"UserInput","url":"api/UserInput#GetLastInputType","content":"&lt;/&gt; UserInput.GetLastInputType() → string Returns the last input type of the user. "},{"title":"RemoteProperty","type":0,"sectionRef":"#","url":"api/RemoteProperty","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#properties","content":" "},{"title":"OnValueUpdate","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#OnValueUpdate","content":"This item is read only and cannot be modified. Read Only RemoteProperty &lt;/&gt; RemoteProperty.OnValueUpdate: Signal&lt;newValue: any&gt; A signal which is fired whenever the value stored in the remote property is updated to a new one. remoteProperty.ValueUpdate:Connect(function(newValue) print((&quot;Value was updated to %s&quot;):format(tostring(newValue))) end)   "},{"title":"OnPlayerValueUpdate","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#OnPlayerValueUpdate","content":"This item is read only and cannot be modified. Read Only RemoteProperty &lt;/&gt; RemoteProperty.OnPlayerValueUpdate: Signal&lt;player: Player,newValue: any&gt; A signal which is fired whenever the value of a player is updated to a new one. remoteProperty.OnPlayerValueUpdate:Connect(function(player, newValue) print((&quot;%s's value was updated to %s&quot;):format(tostring(newValue))) end)  "},{"title":"Functions","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#functions","content":" "},{"title":"IsA","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#IsA","content":"&lt;/&gt; RemoteProperty.IsA(self: any) → boolean A method which returns a boolean indicating if self is a remote property or not.  "},{"title":"new","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#new","content":"&lt;/&gt; RemoteProperty.new( initialValue: any, onServerInvokeCallback: function? ) → RemoteProperty Creates and returns a new remote property, with the initial value of the remote property being initialValue. onServerInvokeCallback can be a function which will be run when a client requests to set their value to something they desire, if this remote property is binded to the client through a communication signal. For e.g: -- On the server local remoteProp = RemoteProperty.new(3, function(player, valueTheyWantToSet) if IsValueValid(valueTheyWantToSet) then return true end end) -- Bind the remote prop to the client through a communication signal.. -- On the client: local remoteProp = ... -- This will tell the serverside remote property to set the value of the client to 50 by first -- calling the onServerInvokeCallback and if it returns true, then the remote property sets the value -- of the client to 50. If onServerInvokeCallback is not specified, then this won't work. remoteProp:SetValue(50) note It is advised not to yield in onServerInvokeCallback.  "},{"title":"IsBoundToClient","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#IsBoundToClient","content":"RemoteProperty &lt;/&gt; RemoteProperty:IsBoundToClient() → boolean Returns a boolean indicating if the remote property is bound to the client.  "},{"title":"Destroy","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#Destroy","content":"RemoteProperty &lt;/&gt; RemoteProperty:Destroy() → () Destroys the remote property and renders it unusable, also destroys the client remote property binded to it.  "},{"title":"GetPlayerValue","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#GetPlayerValue","content":"RemoteProperty &lt;/&gt; RemoteProperty:GetPlayerValue(player: Player) → any Returns the specific value of player stored in the remote property, or the current value of the remote property.  "},{"title":"GetInitialValue","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#GetInitialValue","content":"RemoteProperty &lt;/&gt; RemoteProperty:GetInitialValue() → any Returns the initial value of the remote property. For e.g: local remoteProperty = RemoteProperty.new(50) -- 50 is the initial value remoteProperty:SetValue(100) print(remoteProperty:GetInitialValue()) --&gt; 50   "},{"title":"SetSpecificPlayersValue","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#SetSpecificPlayersValue","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields RemoteProperty &lt;/&gt; RemoteProperty:SetSpecificPlayersValue( players: table, newValue: any ) → () Sets the value of each player (stored in the remote property) in players to newValue. warning This method is illegal to call if the remote property isn't bound to the client.  "},{"title":"SetAllPlayerValues","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#SetAllPlayerValues","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields RemoteProperty &lt;/&gt; RemoteProperty:SetAllPlayerValues(newValue: any) → () Sets the value of each player (stored in the remote property) to newValue New players will have their client remote property (bound to this remote property) to be updated this new value automatically. warning This method is illegal to call if the remote property isn't bound to the client.  "},{"title":"GetValue","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#GetValue","content":"RemoteProperty &lt;/&gt; RemoteProperty:GetValue() → any Returns the current value of the remote property. "},{"title":"NumberUtil","type":0,"sectionRef":"#","url":"api/NumberUtil","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#properties","content":" "},{"title":"e","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#e","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; NumberUtil.e: number Known as Euler's number, is a mathematical constant approximately equal to 2.7182818284590.  "},{"title":"Tau","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#Tau","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; NumberUtil.Tau: number The circle constant representing the ratio between circumference and radius. The constant is equal to math.pi * 2 approximately.  "},{"title":"Phi","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#Phi","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; NumberUtil.Phi: number An irrational number which is often known as the golden ratio or the most beautiful number in maths. "},{"title":"Functions","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#functions","content":" "},{"title":"Lerp","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#Lerp","content":"&lt;/&gt; NumberUtil.Lerp( number: number, goal: number, alpha: number ) → number Used for smoothly interpolating a number to goal, with alpha being the multiplier. For e.g: local number = 0 local goal = 3 while number &lt; goal do local alpha = task.wait(0.1) * 2 number = NumberUtil.Lerp(number, goal, alpha) print(number) end   "},{"title":"QuadraticLerp","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#QuadraticLerp","content":"&lt;/&gt; NumberUtil.QuadraticLerp( number: number, goal: number, alpha: number ) → number Same as NumberUtil.Lerp, except the lerp is quadratic.  "},{"title":"InverseLerp","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#InverseLerp","content":"&lt;/&gt; NumberUtil.InverseLerp( min: number, max: number, alpha: number ) → number Inversely lerps min to goal, with alpha being the multiplier.  "},{"title":"Map","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#Map","content":"&lt;/&gt; NumberUtil.Map( number: number, inMin: number, inMax: number, outMin: number, outMax: number ) → number Maps number between inMin, inMax, outMin and outMax.  "},{"title":"Round","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#Round","content":"&lt;/&gt; NumberUtil.Round( number: number, to: number ) → number Rounds number to to.  "},{"title":"IsNaN","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#IsNaN","content":"&lt;/&gt; NumberUtil.IsNaN(number: number) → boolean Returns a boolean if the provided number is NaN (Not a Number).  "},{"title":"AreClose","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#AreClose","content":"&lt;/&gt; NumberUtil.AreClose( number: number, to: number, eplison: number? ) → boolean Returns a boolean if the provided number is close to to under eplision (or the default eplison i.e 1e-5). print(0.1 + 0.2 == 0.3) --&gt; false (due to floating point imprecision) print(NumberUtil.AreClose(0.1 + 0.2, 0.3)) --&gt; true   "},{"title":"Root","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#Root","content":"&lt;/&gt; NumberUtil.Root( number: number, root: number ) → number Returns the &quot;root&quot; of the number. print(NumberUtil.Root(2, 2)) --&gt; 1.4142135623731 (Square root) print(NumberUtil.Root(2, 3)) --&gt; 1.2599210498949 (Cube root) print(NumberUtil.Root(2, 4)) --&gt; 1.1892071150027 (Fourth root)   "},{"title":"Factorial","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#Factorial","content":"&lt;/&gt; NumberUtil.Factorial(number: number) → number Returns the factorial of the number.  "},{"title":"Factors","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#Factors","content":"&lt;/&gt; NumberUtil.Factors(number: number) → table Returns all the factors of the number.  "},{"title":"IsInfinite","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#IsInfinite","content":"&lt;/&gt; NumberUtil.IsInfinite(number: number) → boolean Returns a boolean indicating if the number is infinite i.e math.huge. "},{"title":"Signal","type":0,"sectionRef":"#","url":"api/Signal","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"Signal","url":"api/Signal#properties","content":" "},{"title":"ConnectionCount","type":1,"pageTitle":"Signal","url":"api/Signal#ConnectionCount","content":"This item is read only and cannot be modified. Read Only Signal &lt;/&gt; Signal.ConnectionCount: number The number of active connections. "},{"title":"Functions","type":1,"pageTitle":"Signal","url":"api/Signal#functions","content":" "},{"title":"IsA","type":1,"pageTitle":"Signal","url":"api/Signal#IsA","content":"&lt;/&gt; Signal.IsA(self: any) → boolean A method which returns a boolean indicating if self is a signal or not.  "},{"title":"new","type":1,"pageTitle":"Signal","url":"api/Signal#new","content":"&lt;/&gt; Signal.new() → Signal Creates and returns a new signal.  "},{"title":"Connect","type":1,"pageTitle":"Signal","url":"api/Signal#Connect","content":"Signal &lt;/&gt; Signal:Connect(callback: function) → Connection Connects callback to the signal so that it will be called when Signal:Fire or Signal:DeferredFire are called, and the arguments passed to them will be passed to callback. This method returns a connection which contains the following methods: Methods Description Disconnect The connection will be disconnected and callback will be disregarded. IsConnected Returns a boolean indicating if the connection has been disconnected.   "},{"title":"DisconnectConnections","type":1,"pageTitle":"Signal","url":"api/Signal#DisconnectConnections","content":"Signal &lt;/&gt; Signal:DisconnectConnections() → () Disconnects all connections.  "},{"title":"Destroy","type":1,"pageTitle":"Signal","url":"api/Signal#Destroy","content":"Signal &lt;/&gt; Signal:Destroy() → () Destroys the signal and renders it unusuable.  "},{"title":"Wait","type":1,"pageTitle":"Signal","url":"api/Signal#Wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields Signal &lt;/&gt; Signal:Wait() → ... Yields the current Luau thread until the signal is fired through Signal:Fire or Signal:DeferredFire. All arguments passed to those methods (which were called) will be returned by this method. tip Any threads yielded through this method will be automatically resumed with a nil value once the signal is destroyed, to prevent memory leaks. For e.g: local s = Signal.new() task.spawn(function() print(s:Wait()) --&gt; nil end) s:Destroy() local s = Signal.new() task.spawn(function() print(s:Wait()) --&gt; &quot;yoooooo&quot; end) s:Fire(&quot;yoooooo&quot;)   "},{"title":"Fire","type":1,"pageTitle":"Signal","url":"api/Signal#Fire","content":"Signal &lt;/&gt; Signal:Fire(...: any) → () Resumes any yielded threads and calls every connection's callback passing in ... as the argument.  "},{"title":"DeferredFire","type":1,"pageTitle":"Signal","url":"api/Signal#DeferredFire","content":"Signal &lt;/&gt; Signal:DeferredFire(...: any) → () Works the same as Signal:Fire, but calls every connection's callback in the next engine execution step, passing in ... as the argument. "},{"title":"Getting started","type":0,"sectionRef":"#","url":"docs/intro","content":"","keywords":""},{"title":"Wally based workflow","type":1,"pageTitle":"Getting started","url":"docs/intro#wally-based-workflow","content":"Package\tDependency\tDescriptionNumberUtil\t&quot;finobinos/numberutil@1.1.5&quot;\tNumberUtil UserInput\t&quot;finobinos/userinput@1.2.7&quot;\tUserInputUtil TableUtil\t&quot;finobinos/tableutil@1.1.6&quot;\tTableUtil Maid\t&quot;finobinos/Maid@1.2.3&quot;\tMaid class Timer\t&quot;finobinos/timer@1.2.5&quot;\tTimer class Signal\t&quot;finobinos/signal@1.2.0\tSignal class Remote\t&quot;finobinos/remote@1.2.9&quot;\tRemoteUtil Run wally init on your project's directory, and then add the various utility modules through the wally.toml file. For e.g, the following would be a wally.toml file for a project that needs a signal and a maid module: [package]name = &quot;finobinos/Project&quot;version = &quot;0.1.0&quot;registry = &quot;https://github.com/UpliftGames/wally-index&quot;realm = &quot;shared&quot; [dependencies]Signal = &quot;finobinos/signal@1.1.9&quot;Maid = &quot;finobinos/maid@1.2.3&quot; Copy These dependencies can be then installed to your project through wally install, which will create a folder Packages in your project containing the dependencies. The package folder created can then be synced into Roblox Studio through Rojo. The following default.project.json file would be used to sync the package folder into Roblox Studio: { &quot;name&quot;: &quot;Project&quot;, &quot;tree&quot;: { &quot;$className&quot;: &quot;DataModel&quot;, &quot;ReplicatedStorage&quot;: { &quot;$className&quot;: &quot;ReplicatedStorage&quot;, &quot;Packages&quot;: { &quot;$path&quot;: &quot;Packages&quot; } } }} Copy "},{"title":"Roblox based workflow","type":1,"pageTitle":"Getting started","url":"docs/intro#roblox-based-workflow","content":"You can retrieve the packages from here. "},{"title":"ClientCommunicationSignal","type":0,"sectionRef":"#","url":"api/ClientCommunicationSignal","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#properties","content":" "},{"title":"Members","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#Members","content":"This item is read only and cannot be modified. Read Only ClientCommunicationSignal &lt;/&gt; ClientCommunicationSignal.Members: table A dictionary of all members binded to the signal.  "},{"title":"RemoteSignals","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#RemoteSignals","content":"This item is read only and cannot be modified. Read Only ClientCommunicationSignal &lt;/&gt; ClientCommunicationSignal.RemoteSignals: table A dictionary of all remote signals binded to the signal.  "},{"title":"RemoteProperties","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#RemoteProperties","content":"This item is read only and cannot be modified. Read Only ClientCommunicationSignal &lt;/&gt; ClientCommunicationSignal.RemoteProperties: table A dictionary of all remote properties binded to the signal.  "},{"title":"Members","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#Members","content":"This item is read only and cannot be modified. Read Only ClientCommunicationSignal &lt;/&gt; ClientCommunicationSignal.Members: table A dictionary of all members binded to the signal.  "},{"title":"RemoteSignals","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#RemoteSignals","content":"This item is read only and cannot be modified. Read Only ClientCommunicationSignal &lt;/&gt; ClientCommunicationSignal.RemoteSignals: table A dictionary of all remote signals binded to the signal.  "},{"title":"RemoteProperties","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#RemoteProperties","content":"This item is read only and cannot be modified. Read Only ClientCommunicationSignal &lt;/&gt; ClientCommunicationSignal.RemoteProperties: table A dictionary of all remote properties binded to the signal. "},{"title":"Functions","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#functions","content":" "},{"title":"GetDispatchedCommunicationSignal","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#GetDispatchedCommunicationSignal","content":"&lt;/&gt; ClientCommunicationSignal.GetDispatchedCommunicationSignal( identifier: string, timeout: number? ) → Promise Returns a promise which is resolved with the serverside dispatched signal if found. If timeout is specified, then the method will wait for timeout seconds for the serverside dispatched signal to exist before assuming that it doesn't and rejecting with a nil value. -- On the server: local signal = CommunicationSignal.new(&quot;Signal&quot;) signal:Bind(&quot;bo&quot;, true) signal:DispatchToClient() -- On the client: ClientCommunicationSignal.GetDispatchedCommunicationSignal(&quot;Signal&quot;):andThen(function(signal) print(signal.Members.bo) --&gt; true end) tip This method returns cached results if the same dispatched communication signal was previously retrieved. For e.g: -- On the server: local signal = CommunicationSignal.new(&quot;Signal&quot;) signal:DispatchToClient() -- On the client: local clientSignal1 = ClientCommunicationSignal.GetDispatchedCommunicationSignal(&quot;Signal&quot;):expect() local clientSignal2 = ClientCommunicationSignal.GetDispatchedCommunicationSignal(&quot;Signal&quot;):expect() print(clientSignal1 == clientSignal2) --&gt; true   "},{"title":"IsA","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#IsA","content":"&lt;/&gt; ClientCommunicationSignal.IsA(self: any) → boolean A method which returns a boolean indicating if self is a client communication signal or not.  "},{"title":"Build","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#Build","content":"&lt;/&gt; ClientCommunicationSignal:Build() → table A method which builds the communication signal for client-side use. For e.g: -- On the server: local signal = CommunicationSignal.new(&quot;Signal&quot;) signal:Bind(&quot;Table&quot;, {1,2,3}) signal:DispatchToClient() -- On the client: local clientSignal = ClientCommunicationSignal.GetDispatchedCommunicationSignal(&quot;Signal&quot;):expect() local builtSignal = clientCommunicationSignal:Build() -- Normally to access members you would do: print(clientSignal.Members.Table) --&gt; {1, 2, 3} -- Via dispatched signal: print(builtSignal.Table) --&gt; {1, 2, 3} tip This method returns cached results if the client communication signal was already previously built. For e.g: local s = clientCommunicationSignal:Build() local o = clientCommunicationSignal:Build() print(s == o) --&gt; true   "},{"title":"GetMethod","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#GetMethod","content":"&lt;/&gt; ClientCommunicationSignal:GetMethod(name: string) → function? A method which returns a binded method name to the client communication signal. For e.g: -- On the server: local signal = CommunicationSignal.new(&quot;Signal&quot;) signal:Bind(&quot;bo&quot;, function() end) signal:DispatchToClient() -- On the client: local clientSignal = ClientCommunicationSignal.GetDispatchedCommunicationSignal(&quot;Signal&quot;):expect() print(typeof(clientSignal:GetMethod(&quot;bo&quot;))) --&gt; function  "},{"title":"Timer","type":0,"sectionRef":"#","url":"api/Timer","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"Timer","url":"api/Timer#properties","content":" "},{"title":"Boost","type":1,"pageTitle":"Timer","url":"api/Timer#Boost","content":"This item is read only and cannot be modified. Read Only Timer &lt;/&gt; Timer.Boost: number A value which by default is 0. This value is added to the delta time of every approximate frame the timer is updated (or if an update signal was specified, which in case the number fired to the custom update signal). Increasing it will lead to faster timer updates. local timer = Timer.new(5) timer.Boost = 4 timer:Start() timer.OnTick:Connect(function(deltaTime) print(deltaTime) --&gt; 8 (approx) end)   "},{"title":"OnTick","type":1,"pageTitle":"Timer","url":"api/Timer#OnTick","content":"This item is read only and cannot be modified. Read Only Timer &lt;/&gt; Timer.OnTick: Signal&lt;deltaTime: number&gt; A signal which is fired whenever the timer &quot;ticks&quot; (when started). timer.OnTick:Connect(function(deltaTime) warn((&quot;After %d seconds, tick!&quot;):format(deltaTime)) end) timer:Start()  "},{"title":"Functions","type":1,"pageTitle":"Timer","url":"api/Timer#functions","content":" "},{"title":"IsA","type":1,"pageTitle":"Timer","url":"api/Timer#IsA","content":"&lt;/&gt; Timer.IsA(self: any) → boolean A method which returns a boolean indicating if self is a timer or not.  "},{"title":"new","type":1,"pageTitle":"Timer","url":"api/Timer#new","content":"&lt;/&gt; Timer.new( timer: number?, updateSignal: RBXScriptSignal? ) → Timer Creates and returns a new timer. If timer is not specified, it will default to 0 i.e the timer will be updated every frame. If updateSignal is not specified, it will default to RunService.Heartbeat. note If updateSignal is specified, it must be fired with a number as the first argument so that the timer is updated based on that number. For e.g: local updateSignal = Instance.new(&quot;BindableEvent&quot;) local timer = Timer.new(5, updateSignal.Event) while true do -- The timer will be updated by exactly 5 seconds every approx second: updateSignal:Fire(5) task.wait(1) end   "},{"title":"Reset","type":1,"pageTitle":"Timer","url":"api/Timer#Reset","content":"Timer &lt;/&gt; Timer:Reset() → () Resets the timer.  "},{"title":"Start","type":1,"pageTitle":"Timer","url":"api/Timer#Start","content":"Timer &lt;/&gt; Timer:Start() → () Starts the timer.  "},{"title":"IsStarted","type":1,"pageTitle":"Timer","url":"api/Timer#IsStarted","content":"Timer &lt;/&gt; Timer:IsStarted() → boolean Returns a boolean indicating if the timer has started.  "},{"title":"Pause","type":1,"pageTitle":"Timer","url":"api/Timer#Pause","content":"Timer &lt;/&gt; Timer:Pause() → () Pauses the timer.  "},{"title":"Unpause","type":1,"pageTitle":"Timer","url":"api/Timer#Unpause","content":"Timer &lt;/&gt; Timer:Unpause() → () Unpauses the timer.  "},{"title":"IsPaused","type":1,"pageTitle":"Timer","url":"api/Timer#IsPaused","content":"Timer &lt;/&gt; Timer:IsPaused() → boolean Returns a boolean indicating if the timer has being paused.  "},{"title":"Destroy","type":1,"pageTitle":"Timer","url":"api/Timer#Destroy","content":"Timer &lt;/&gt; Timer:Destroy() → () Destroys the timer and renders it unusuable.  "},{"title":"Stop","type":1,"pageTitle":"Timer","url":"api/Timer#Stop","content":"Timer &lt;/&gt; Timer:Stop() → () Stops the timer. "},{"title":"TableUtil","type":0,"sectionRef":"#","url":"api/TableUtil","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#functions","content":" "},{"title":"DeepFreeze","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#DeepFreeze","content":"&lt;/&gt; TableUtil.DeepFreeze(tabl: table) → () Freezes all keys and values in tabl via table.freeze, as well as in all other nested tables in tabl.  "},{"title":"DeepCopy","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#DeepCopy","content":"&lt;/&gt; TableUtil.DeepCopy(tabl: table) → table Returns a deep copy of tabl, also accounting for nested keys and values.  "},{"title":"ShallowCopy","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#ShallowCopy","content":"&lt;/&gt; TableUtil.ShallowCopy(tabl: table) → table Works the same as TableUtil.DeepCopy, but doesn't account for nested keys and values.  "},{"title":"Reconcile","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#Reconcile","content":"&lt;/&gt; TableUtil.Reconcile( tabl: table, templateTable: table ) → () Adds all missing elements from templateTable to tabl. local t1 = {} local templateTable = {1, 2, 3} TableUtil.Reconcile(t1, templateTable) print(t1) --&gt; {1,2,3}   "},{"title":"Shuffle","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#Shuffle","content":"&lt;/&gt; TableUtil.Shuffle( tabl: table, randomObject: Random? ) → () Shuffles tabl such that the indices will have values of other indices in tabl in a random way. If randomObject is specified, it will be used instead to shuffle tabl. note This method assumes that tabl is an array with no holes. local t1 = {1, 2, 3, 4, 5} TableUtil.Shuffle(t1) print(t1) --&gt; {3, 2, 4, 5, 1, 6}   "},{"title":"IsEmpty","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#IsEmpty","content":"&lt;/&gt; TableUtil.IsEmpty(tabl: table) → boolean Returns a boolean indicating if tabl is completely empty.  "},{"title":"Map","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#Map","content":"&lt;/&gt; TableUtil.Map( tabl: table, callback: function ) → () Performs a map against tabl, which can be used to map new values based on the old values at given indices. local t = {1, 2, 3, 4, 5} TableUtil.Map(t, function(key, value) return value * 2 end) print(t2) --&gt; {2, 4, 6, 8, 10}   "},{"title":"Combine","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#Combine","content":"&lt;/&gt; TableUtil.Combine(...: table) → table A method which combines all tables ... into 1 single mega table. local t = {1, 2, 3, 4, 5} local t1 = {7, 8, 9} local t2 = {10, 11, 12} local combinedTable = TableUtil.Combine(t, t1, t2) print(combinedTable) --&gt; {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}   "},{"title":"Empty","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#Empty","content":"&lt;/&gt; TableUtil.Empty(tabl: table) → () Clears out all keys in tabl. local t = {1, 2, 3, 4, 5} TableUtil.Empty(t) print(t) --&gt; {}   "},{"title":"Reverse","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#Reverse","content":"&lt;/&gt; TableUtil.Reverse(tabl: table) → () A method which reverses tabl. note This method assumes that tabl is an array with no holes. local t = {1, 2, 3, 4, 5} TableUtil.Reverse(t) print(t) --&gt; {5, 4, 3, 2, 2, 1}   "},{"title":"GetElementCount","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#GetElementCount","content":"&lt;/&gt; TableUtil.GetElementCount(tabl: table) → number A method which returns a number of all the elements in tabl. local t = {1, 2, 3, 4, 5, a = 5, b = 6} print(TableUtil.GetElementCount(t)) --&gt; 7   "},{"title":"GetKeyFromValue","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#GetKeyFromValue","content":"&lt;/&gt; TableUtil.GetKeyFromValue( tabl: table, value: any ) → any? A method which returns the key in which value is stored at in tabl. local t = {a = 5, b = 10} print(TableUtil.GetKeyFromValue(t, 5)) --&gt; &quot;a&quot; note This method will not work well for different keys which have the same value, and doesn't account for nested key and values.  "},{"title":"AreEqual","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#AreEqual","content":"&lt;/&gt; TableUtil.AreEqual( tabl1: table, tabl2: table ) → boolean A method which checks if both tabl and otherTable are equal in terms of values. local t1 = {1, 2, 3, 4, 5, {a = 4}} local t2 = {1, 2, 3, 4, 5, {a = 3}} print(TableUtil.AreEqual(t1, t2)) --&gt; false local t1 = {1, 2, 3, 4, 5, {a = 4}} local t2 = {1, 2, 3, 4, 5, {a = 4}} print(TableUtil.AreEqual(t1, t2)) --&gt; true note This method works well on tables that contain only primitive values except for userdata and thread. This method also doesn't check keys. For e.g: local t = { [{}] = 5, } local b = { [{}] = 5, } print(TableUtil.AreEqual(t, b)) --&gt; false  "},{"title":"Mouse","type":0,"sectionRef":"#","url":"api/Mouse","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"Mouse","url":"api/Mouse#properties","content":" "},{"title":"OnLeftClick","type":1,"pageTitle":"Mouse","url":"api/Mouse#OnLeftClick","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Mouse.OnLeftClick: Signal&lt;isInputProcessed: boolean&gt; A signal fired whenever the user left clicks on their mouse.  "},{"title":"OnRightClick","type":1,"pageTitle":"Mouse","url":"api/Mouse#OnRightClick","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Mouse.OnRightClick: Signal&lt;isInputProcessed: boolean&gt; A signal fired whenever the user right clicks on their mouse.  "},{"title":"OnScrollClick","type":1,"pageTitle":"Mouse","url":"api/Mouse#OnScrollClick","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Mouse.OnScrollClick: Signal&lt;isInputProcessed: boolean&gt; A signal fired whenever the user scroll clicks on their mouse.  "},{"title":"OnMove","type":1,"pageTitle":"Mouse","url":"api/Mouse#OnMove","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Mouse.OnMove: Signal&lt;deltaPosition: Vector3&gt; A signal fired whenever the user moves their mouse.  "},{"title":"OnTargetChange","type":1,"pageTitle":"Mouse","url":"api/Mouse#OnTargetChange","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Mouse.OnTargetChange: Signal&lt;newTarget: Instance?&gt; A signal which is fired whenever Mouse.Target changes.  "},{"title":"TargetFilterType","type":1,"pageTitle":"Mouse","url":"api/Mouse#TargetFilterType","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Mouse.TargetFilterType: EnumItem By default, the value is Enum.RaycastFilterType.Blacklist. Used as the filter type in retrieving Mouse.Target and Mouse.Hit. note This member should only be set to Enum.RaycastFilterType.Blacklist or Enum.RaycastFilterType.Whitelist.  "},{"title":"Hit","type":1,"pageTitle":"Mouse","url":"api/Mouse#Hit","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Mouse.Hit: CFrame The cframe the mouse hit in the 3D world.  "},{"title":"UnitRay","type":1,"pageTitle":"Mouse","url":"api/Mouse#UnitRay","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Mouse.UnitRay: Ray The unit ray from the mouse's 2D position to the 3D world.  "},{"title":"X","type":1,"pageTitle":"Mouse","url":"api/Mouse#X","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Mouse.X: number The X coordinate of the mouse's 2D position on the screen.  "},{"title":"X","type":1,"pageTitle":"Mouse","url":"api/Mouse#X","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Mouse.X: number The Y coordinate of the mouse's 2D position on the screen.  "},{"title":"Target","type":1,"pageTitle":"Mouse","url":"api/Mouse#Target","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Mouse.Target: Instance? The instance the mouse hit in the 3D world.  "},{"title":"Origin","type":1,"pageTitle":"Mouse","url":"api/Mouse#Origin","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Mouse.Origin: Vector3 The origin of the mouse i.e Workspace.CurrentCamera.CFrame.Position. "},{"title":"Functions","type":1,"pageTitle":"Mouse","url":"api/Mouse#functions","content":" "},{"title":"GetDeltaPosition","type":1,"pageTitle":"Mouse","url":"api/Mouse#GetDeltaPosition","content":"&lt;/&gt; Mouse.GetDeltaPosition() → Vector3 Returns the position of the mouse from the last frame to the current.  "},{"title":"CastRay","type":1,"pageTitle":"Mouse","url":"api/Mouse#CastRay","content":"&lt;/&gt; Mouse.CastRay( raycastParams: RaycastParams?, distance: number ) → RaycastResult? Casts a ray from the mouse's current position to it's position extended distance studs, respecting raycastParams if provided.  "},{"title":"LockToCurrentPosition","type":1,"pageTitle":"Mouse","url":"api/Mouse#LockToCurrentPosition","content":"&lt;/&gt; Mouse.LockToCurrentPosition() → () Locks the mouse to it's current position.  "},{"title":"Unlock","type":1,"pageTitle":"Mouse","url":"api/Mouse#Unlock","content":"&lt;/&gt; Mouse.Unlock() → () Unlocks the mouse.  "},{"title":"LockToCenter","type":1,"pageTitle":"Mouse","url":"api/Mouse#LockToCenter","content":"&lt;/&gt; Mouse.LockToCenter() → () Locks the mouse to the center.  "},{"title":"AddTargetFilter","type":1,"pageTitle":"Mouse","url":"api/Mouse#AddTargetFilter","content":"&lt;/&gt; Mouse.AddTargetFilter(targetFilter: Instance) → () Adds targetFilter to the filter list so that they will be filtered out when calculating Mouse.Hit and Mouse.Target.  "},{"title":"SetTargetFilterType","type":1,"pageTitle":"Mouse","url":"api/Mouse#SetTargetFilterType","content":"&lt;/&gt; Mouse.SetTargetFilterType(targetFilterType: EnumItem) → () Sets the filter type to targetFilterType which is used internally in filtering instances added through Mouse.AddTargetFilter when calculating Mouse.Hit and Mouse.Target. EnumItem Description Enum.RaycastFilterType.Whitelist Only the instance added through Mouse.AddTargetFilter will be respected. Enum.RaycastFilterType.Blacklist The instance added through Mouse.AddTargetFilter will be ignored. By default, the filter type is Enum.RaycastFilterType.Blacklist.  "},{"title":"RemoveTargetFilter","type":1,"pageTitle":"Mouse","url":"api/Mouse#RemoveTargetFilter","content":"&lt;/&gt; Mouse.RemoveTargetFilter(targetFilter: Instance) → () Removes targetFilter from the filter list so that it will not be filtered out when calculating Mouse.Hit and Mouse.Target. "}]