[{"title":"ClientRemoteSignal","type":0,"sectionRef":"#","url":"api/ClientRemoteSignal","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#functions","content":" "},{"title":"IsClientRemoteSignal","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#IsClientRemoteSignal","content":"&lt;/&gt; ClientRemoteSignal.IsClientRemoteSignal(self: any) → boolean A method which is used to check if self is a client remote signal or not.  "},{"title":"new","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#new","content":"&lt;/&gt; ClientRemoteSignal.new() → ClientRemoteSignal Creates and returns a new client remote signal.  "},{"title":"Connect","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#Connect","content":"ClientRemoteSignal &lt;/&gt; ClientRemoteSignal:Connect(callback: function) → RBXScriptConnection Same as self._remoteEvent:Connect(callback).  "},{"title":"Destroy","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#Destroy","content":"ClientRemoteSignal &lt;/&gt; ClientRemoteSignal:Destroy(...: any) → () Destroys the client remote signal and makes it unusuable. warning Trivial errors will occur if your code unintentionally works on a destroyed client remote signal, only call this method when you're done working with it!  "},{"title":"Fire","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#Fire","content":"ClientRemoteSignal &lt;/&gt; ClientRemoteSignal:Fire(...: any) → () Same as self._remoteEvent:FireServer(...).  "},{"title":"Wait","type":1,"pageTitle":"ClientRemoteSignal","url":"api/ClientRemoteSignal#Wait","content":"&lt;/&gt; ClientRemoteSignal:Wait() → ...any Same as self._remoteEvent.OnClientEvent:Wait(). "},{"title":"CommunicationSignal","type":0,"sectionRef":"#","url":"api/CommunicationSignal","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#functions","content":" "},{"title":"IsSignal","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#IsSignal","content":"&lt;/&gt; CommunicationSignal.IsSignal(self: any) → boolean A method which is used to check if self is a communication signal or not.  "},{"title":"IsSignal","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#IsSignal","content":"&lt;/&gt; CommunicationSignal.IsSignal(self: any) → boolean A method which is used to check if self is a communication signal or not.  "},{"title":"new","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#new","content":"&lt;/&gt; CommunicationSignal.new(identifier: string) → CommunicationSignal Creates and returns a new communication signal with the identifier of identifier.  "},{"title":"BindMember","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#BindMember","content":"CommunicationSignal &lt;/&gt; CommunicationSignal:BindMember( key: any, value: value ) → () Binds and exposes a new member of name key with value value to the client.  "},{"title":"BindMethod","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#BindMethod","content":"CommunicationSignal &lt;/&gt; CommunicationSignal:BindMethod( methodName: string, method: function ) → () Binds and exposes method of name methodName to the client.  "},{"title":"BindRemoteProperty","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#BindRemoteProperty","content":"CommunicationSignal &lt;/&gt; CommunicationSignal:BindRemoteProperty( remotePropertyName: string, remoteProperty: RemoteProperty ) → () Binds and exposes a remoteSignal of name remotePropertyName to the client.  "},{"title":"BindRemoteSignal","type":1,"pageTitle":"CommunicationSignal","url":"api/CommunicationSignal#BindRemoteSignal","content":"CommunicationSignal &lt;/&gt; CommunicationSignal:BindRemoteSignal( remoteSignalName: string, remoteSignal: RemoteSignal ) → () Binds and exposes a remoteSignal of name remoteSignalName to the client. "},{"title":"ClientRemoteProperty","type":0,"sectionRef":"#","url":"api/ClientRemoteProperty","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#functions","content":" "},{"title":"IsClientRemoteProperty","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#IsClientRemoteProperty","content":"&lt;/&gt; ClientRemoteProperty.IsClientRemoteProperty(self: any) → boolean A method which is used to check if self is a client remote property or not.  "},{"title":"new","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#new","content":"&lt;/&gt; ClientRemoteProperty.new() → ClientRemoteProperty Creates and returns a new client remote property.  "},{"title":"Destroy","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#Destroy","content":"ClientRemoteProperty &lt;/&gt; ClientRemoteProperty:Destroy() → () Destroys the client remote property and makes it unusable. warning Trivial errors will occur if your code unintentionally works on a destroyed client remote property, only call this method when you're done working with it!  "},{"title":"GetValue","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#GetValue","content":"ClientRemoteProperty &lt;/&gt; ClientRemoteProperty:GetValue() → any Returns the value of the client remote property. If bound by the server, then it will retrieve the value of it's serverside counter part, and that value will be the value of the client (if there is no value set specifically for the client, then the value retured will be the current value of the serverside counter part (remote property)).  "},{"title":"SetValue","type":1,"pageTitle":"ClientRemoteProperty","url":"api/ClientRemoteProperty#SetValue","content":"ClientRemoteProperty &lt;/&gt; ClientRemoteProperty:SetValue(newValue: any) → () Sets the value of the client remote property to newValue. warning This method is illegal if the client remote property is bound by the server. "},{"title":"ClientCommunicationSignal","type":0,"sectionRef":"#","url":"api/ClientCommunicationSignal","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#properties","content":" "},{"title":"Members","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#Members","content":"ClientCommunicationSignal &lt;/&gt; ClientCommunicationSignal.Members: table A table of all members exposed to the communication signal. tip This table is updated whenever a server exposes a member to the communication signal.  "},{"title":"Methods","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#Methods","content":"ClientCommunicationSignal &lt;/&gt; ClientCommunicationSignal.Methods: table A table of all methods exposed to the communication signal. tip This table is updated whenever a server exposes a new method to the communication signal.  "},{"title":"OnMemberBinded","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#OnMemberBinded","content":"ClientCommunicationSignal &lt;/&gt; ClientCommunicationSignal.OnMemberBinded: Signal A signal which is fired whenever a new member is binded to the communication signal. The name of the member and it's value are passed as 2 arguments. communicationSignal.OnMemberBinded:Connect(function(name, value) end)   "},{"title":"OnMethodBinded","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#OnMethodBinded","content":"ClientCommunicationSignal &lt;/&gt; ClientCommunicationSignal.OnMethodBinded: Signal A signal which is fired whenever a new method is binded to the communication signal. The name of the method and the method it self are passed as 2 arguments. communicationSignal.OnMethodBinded:Connect(function(name, method) end)   "},{"title":"OnRemotePropertyBinded","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#OnRemotePropertyBinded","content":"ClientCommunicationSignal &lt;/&gt; ClientCommunicationSignal.OnRemotePropertyBinded: Signal A signal which is fired whenever a new remote property is binded to the communication signal. The name of the remote property and it's object are passed as 2 arguments. communicationSignal.OnRemotePropertyBinded:Connect(function(name, remoteProperty) end)   "},{"title":"OnRemoteSignalBinded","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#OnRemoteSignalBinded","content":"ClientCommunicationSignal &lt;/&gt; ClientCommunicationSignal.OnRemoteSignalBinded: Signal A signal which is fired whenever a new remote signal is binded to the communication signal. The name of the remote signal and it's object are passed as 2 arguments. communicationSignal.OnRemoteSignalBinded:Connect(function(name, remoteSignal) end)   "},{"title":"RemoteProperties","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#RemoteProperties","content":"ClientCommunicationSignal &lt;/&gt; ClientCommunicationSignal.RemoteProperties: table A table of all remote properties exposed to the communication signal. tip This table is updated whenever a server exposes a new remote property to the communication signal.  "},{"title":"RemoteSignals","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#RemoteSignals","content":"ClientCommunicationSignal &lt;/&gt; ClientCommunicationSignal.RemoteSignals: table A table of all remote signals exposed to the communication signal. tip This table is updated whenever a server exposes a new remote signal to the communication signal. "},{"title":"Functions","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#functions","content":" "},{"title":"GetSignal","type":1,"pageTitle":"ClientCommunicationSignal","url":"api/ClientCommunicationSignal#GetSignal","content":"&lt;/&gt; ClientCommunicationSignal.GetSignal(identifier: string) → ClientCommunicationSignal Gets a new serverside communication signal with the identifier of identifier. "},{"title":"Maid","type":0,"sectionRef":"#","url":"api/Maid","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"Maid","url":"api/Maid#functions","content":" "},{"title":"IsMaid","type":1,"pageTitle":"Maid","url":"api/Maid#IsMaid","content":"&lt;/&gt; Maid.IsMaid(self: any) → boolean A method which is used to check if the given argument is a maid or not.  "},{"title":"new","type":1,"pageTitle":"Maid","url":"api/Maid#new","content":"&lt;/&gt; Maid.new() → Maid A constructor method which creates a new maid.  "},{"title":"AddTask","type":1,"pageTitle":"Maid","url":"api/Maid#AddTask","content":"Maid &lt;/&gt; Maid:AddTask(task: function | RBXScriptConnection | table | Instance) → task Adds a task for the maid to cleanup. note If table is passed as a task, it must have a Destroy or Disconnect method!  "},{"title":"Cleanup","type":1,"pageTitle":"Maid","url":"api/Maid#Cleanup","content":"Maid &lt;/&gt; Maid:Cleanup() → () Cleans up all the added tasks. Task Type function The function will be called. table Any Destroy or Disconnect method in the table will be called. Instance The instance will be destroyed. RBXScriptConnection The connection will be disconnected.   "},{"title":"Destroy","type":1,"pageTitle":"Maid","url":"api/Maid#Destroy","content":"Maid &lt;/&gt; Maid:Destroy() → () Destroys the maid and makes it unusuable. warning Trivial errors will occur if your code unintentionally works on a destroyed maid, only call this method when you're done working with the maid.  "},{"title":"LinkToInstance","type":1,"pageTitle":"Maid","url":"api/Maid#LinkToInstance","content":"&lt;/&gt; Maid:LinkToInstance(instance: Instance) → Connection Links the given instance to the maid so that the maid will clean up all the tasks once the instance has been destroyed via Instance:Destroy. The connection returned by this maid contains the following methods: Methods Description Disconnect The connection will be disconnected and the maid will unlink to the instance it was linked to. IsConnected Returns a boolean indicating if the connection has been disconnected. Note that the maid will still unlink to the given instance if it has been cleaned up!  "},{"title":"RemoveTask","type":1,"pageTitle":"Maid","url":"api/Maid#RemoveTask","content":"Maid &lt;/&gt; Maid:RemoveTask(task: function | RBXScriptConnection | table | Instance) → () Removes the task so that it will not be cleaned up. "},{"title":"Component","type":0,"sectionRef":"#","url":"api/Component","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"Component","url":"api/Component#properties","content":" "},{"title":"Objects","type":1,"pageTitle":"Component","url":"api/Component#Objects","content":"Component &lt;/&gt; Component.Objects: table A table which contains all the active objects of the component.  "},{"title":"OnComponentAdded","type":1,"pageTitle":"Component","url":"api/Component#OnComponentAdded","content":"&lt;/&gt; Component.OnComponentAdded: Signal A signal which is fired whenever a component is added. Passing in the component added as the argument.  "},{"title":"OnComponentDestroyed","type":1,"pageTitle":"Component","url":"api/Component#OnComponentDestroyed","content":"&lt;/&gt; Component.OnComponentDestroyed: Signal A signal which is fired whenever a component is destroyed. Passing in the component destroyed as the argument.  "},{"title":"OnObjectAdded","type":1,"pageTitle":"Component","url":"api/Component#OnObjectAdded","content":"Component &lt;/&gt; Component.OnObjectAdded: Signal A signal which is fired whenever a new object is created in the component. Passing in the object added as the argument.  "},{"title":"OnObjectDestroyed","type":1,"pageTitle":"Component","url":"api/Component#OnObjectDestroyed","content":"Component &lt;/&gt; Component.OnObjectDestroyed: Signal A signal which is fired whenever an object of the component is destroyed. Passing in the object destroyed as the argument.  "},{"title":"Tags","type":1,"pageTitle":"Component","url":"api/Component#Tags","content":"Component &lt;/&gt; Component.Tags: table A table which contains the tags of the component i.e Component.RequiredTags or Component.OptionalTags. "},{"title":"Functions","type":1,"pageTitle":"Component","url":"api/Component#functions","content":" "},{"title":"BindComponentsFolder","type":1,"pageTitle":"Component","url":"api/Component#BindComponentsFolder","content":"&lt;/&gt; Component.BindComponentsFolder(componentsFolder: Folder) → () Binds all the children (module scripts) in componentsFolder such that each will binded to it's own component through Component.new when Component.Start is called.  "},{"title":"GetComponentFromTags","type":1,"pageTitle":"Component","url":"api/Component#GetComponentFromTags","content":"&lt;/&gt; Component.GetComponentFromTags(tags: table) → table | nil A method which returns a component whose RequiredTags or OptionalTags match tags. Tag members Description OptionalTags This member will be compared against the OptionalTags member of the component (if it has one). If they are equal, the component will be returned. RequiredTags This member will be compared against the RequiredTags member of the component (if it has one). If they are equal, the component will be returned. note The tags table must contain only of these members which must be a table. local tags = { RequiredTags = { &quot;A&quot;, &quot;B&quot; } } -- Will get a component whose RequiredTags is the same as tags.RequiredTags local component = Component.GetComponentFromTags(tags)   "},{"title":"GetComponentObjectFromInstance","type":1,"pageTitle":"Component","url":"api/Component#GetComponentObjectFromInstance","content":"&lt;/&gt; Component.GetComponentObjectFromInstance( instance: Instance, component: Component | nil ) → table | nil A method which returns an component object binded to instance. If component is provided, then the method will return an object only in the component binded to instance.  "},{"title":"IsComponent","type":1,"pageTitle":"Component","url":"api/Component#IsComponent","content":"&lt;/&gt; Component.IsComponent(self: any) → boolean Returns a boolean indicating if the given argument is a component or not.  "},{"title":"new","type":1,"pageTitle":"Component","url":"api/Component#new","content":"&lt;/&gt; Component.new(module: ModuleScript) → () Creates and binds module to a new component, module must have these members and methods: Required members and methods Description .new A constructor method which will be called whenever a new object is to be binded to the component. :Destroy A method which will be called on a object to be destroyed. OptionalTags or RequiredTags The tags that an instance must have in order to be binded to the component module can also have these optional lifecycle methods and members: Optional lifecycle methods and members Description RenderUpdatePriority An EnumItem. Learn more about it here. :Init A method which will be called on an object added, after .new is called for it. :Deinit A method which will be called on an object just before it's destroyed. HeartbeatUpdate A method called every RunService.Heartbeat on an object. PhysicsUpdate A method called every RunService.Stepped on an object. RenderUpdate A method called every RunService.RenderStepped on an object.   "},{"title":"Start","type":1,"pageTitle":"Component","url":"api/Component#Start","content":"&lt;/&gt; Component.Start() → () Creates and binds a component to each module script in the folder provided as argument to Component.BindComponentsFolder.  "},{"title":"WaitForComponentFromTags","type":1,"pageTitle":"Component","url":"api/Component#WaitForComponentFromTags","content":"&lt;/&gt; Component.WaitForComponentFromTags( tags: tags, timeout: number | nil ) → Component | nil Works the same as Component.GetComponentFromTags, except yields the thread until a valid component is found under timeout seconds (if provided).  "},{"title":"Destroy","type":1,"pageTitle":"Component","url":"api/Component#Destroy","content":"Component &lt;/&gt; Component:Destroy() → () Destroys the component it self i.e cleaning up all signals and destroying all objects.  "},{"title":"DestroyAllObjects","type":1,"pageTitle":"Component","url":"api/Component#DestroyAllObjects","content":"Component &lt;/&gt; Component:DestroyAllObjects() → () Destroys all objects in the component.  "},{"title":"GetAllObjects","type":1,"pageTitle":"Component","url":"api/Component#GetAllObjects","content":"Component &lt;/&gt; Component:GetAllObjects() → table Returns all the objects in the component. "},{"title":"NumberUtil","type":0,"sectionRef":"#","url":"api/NumberUtil","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#properties","content":" "},{"title":"e","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#e","content":"&lt;/&gt; NumberUtil.e: number Known as Euler's number, is a mathematical constant approximately equal to 2.7182818284590.  "},{"title":"NaN","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#NaN","content":"&lt;/&gt; NumberUtil.NaN: NaN An NaN (Not a Number) value.  "},{"title":"Phi","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#Phi","content":"&lt;/&gt; NumberUtil.Phi: number An irrational number which is often known as the golden ratio or the most beautiful number in maths.  "},{"title":"Tau","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#Tau","content":"&lt;/&gt; NumberUtil.Tau: number The circle constant representing the ratio between circumference and radius. The constant is equal to math.pi * 2 approximately. "},{"title":"Functions","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#functions","content":" "},{"title":"Factorial","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#Factorial","content":"&lt;/&gt; NumberUtil.Factorial(number: number) → number Returns the factorial of the number.  "},{"title":"GetFactorsOf","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#GetFactorsOf","content":"&lt;/&gt; NumberUtil.GetFactorsOf(number: number) → table Returns all the factors of the number.  "},{"title":"InverseLerp","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#InverseLerp","content":"&lt;/&gt; NumberUtil.InverseLerp( min: number, max: number, alpha: number ) → number Inversely lerps min to goal, with alpha being the multiplier.  "},{"title":"IsCloseTo","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#IsCloseTo","content":"&lt;/&gt; NumberUtil.IsCloseTo( number: number, to: number, eplison: number | nil ) → boolean Returns a boolean if the provided number is close to to under eplision (or the default eplison i.e 1e-5). print(0.1 + 0.2 == 0.3) --&gt; false (due to floating point imprecision) print(NumberUtil.IsCloseTo(0.1 + 0.2, 0.3)) --&gt; true   "},{"title":"IsInfinite","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#IsInfinite","content":"&lt;/&gt; NumberUtil.IsInfinite(number: number) → boolean Returns a boolean indicating if the number is infinite (math.huge) or not.  "},{"title":"IsNaN","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#IsNaN","content":"&lt;/&gt; NumberUtil.IsNaN(number: number) → boolean Returns a boolean if the provided number is NaN (Not a Number).  "},{"title":"Lerp","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#Lerp","content":"&lt;/&gt; NumberUtil.Lerp( number: number, goal: number, alpha: number ) → number Used for smoothly interpolating a number to goal, with alpha being the multiplier. For e.g: local number = 0 local goal = 3 while number &lt; goal do local alpha = task.wait(0.1) * 2 number = NumberUtil.Lerp(number, goal, alpha) print(number) end   "},{"title":"Map","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#Map","content":"&lt;/&gt; NumberUtil.Map( number: number, inMin: number, inMax: number, outMin: number, outMax: number ) → number Maps number between inMin, inMax, outMin and outMax.  "},{"title":"QuadraticLerp","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#QuadraticLerp","content":"&lt;/&gt; NumberUtil.QuadraticLerp( number: number, goal: number, alpha: number ) → number Same as NumberUtil.Lerp, except the lerp is quadratic.  "},{"title":"Root","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#Root","content":"&lt;/&gt; NumberUtil.Root( number: number, root: number ) → number Returns the root of the number. print(NumberUtil.Root(2, 2)) --&gt; 1.4142135623731 (Square root) print(NumberUtil.Root(2, 3)) --&gt; 1.2599210498949 (Cube root)   "},{"title":"RoundTo","type":1,"pageTitle":"NumberUtil","url":"api/NumberUtil#RoundTo","content":"&lt;/&gt; NumberUtil.RoundTo( number: number, to: number ) → number Rounds number to to. "},{"title":"Ray","type":0,"sectionRef":"#","url":"api/Ray","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"Ray","url":"api/Ray#properties","content":" "},{"title":"Direction","type":1,"pageTitle":"Ray","url":"api/Ray#Direction","content":"Ray &lt;/&gt; Ray.Direction: Vector3 The direction of the ray, relative to it's origin.  "},{"title":"OnInstanceHit","type":1,"pageTitle":"Ray","url":"api/Ray#OnInstanceHit","content":"Ray &lt;/&gt; Ray.OnInstanceHit: Signal A signal which is fired whenever an instance &quot;hits&quot; the ray, respecting raycast params (if provided).  "},{"title":"Origin","type":1,"pageTitle":"Ray","url":"api/Ray#Origin","content":"Ray &lt;/&gt; Ray.Origin: Vector3 The origin of the ray.  "},{"title":"Results","type":1,"pageTitle":"Ray","url":"api/Ray#Results","content":"Ray &lt;/&gt; Ray.Results: table A table of raycast results. Results Description Instance The BasePart or Terrain cell that the ray intersected. Position The world space point at which the intersection occurred, usually a point directly on the surface of the instance. Material The Material at the intersection point. For normal parts this is the BasePart.Material; for Terrain this can vary depending on terrain data. Normal The normal vector of the intersected face.   "},{"title":"Size","type":1,"pageTitle":"Ray","url":"api/Ray#Size","content":"Ray &lt;/&gt; Ray.Size: number The size of the ray from it's origin to it's final position.  "},{"title":"Unit","type":1,"pageTitle":"Ray","url":"api/Ray#Unit","content":"Ray &lt;/&gt; Ray.Unit: Vector3 The unit vector of the direction. Note that in a certain edge case where the direction is Vector3.new(0, 0, 0), then this will be Vector3.new(0, 1, 0).  "},{"title":"Visualizer","type":1,"pageTitle":"Ray","url":"api/Ray#Visualizer","content":"Ray &lt;/&gt; Ray.Visualizer: Instance An instance which is used to visualize the ray. note Ray visualizers will never be 100% accurate, due to how small rays actually are. However, they will be accurate up to 99.2% if their thickness is the default (i.e not set through Ray:SetVisualizerThickness). "},{"title":"Functions","type":1,"pageTitle":"Ray","url":"api/Ray#functions","content":" "},{"title":"IsRay","type":1,"pageTitle":"Ray","url":"api/Ray#IsRay","content":"&lt;/&gt; Ray.IsRay(self: any) → boolean A method which is used to check if self is a ray or not.  "},{"title":"new","type":1,"pageTitle":"Ray","url":"api/Ray#new","content":"&lt;/&gt; Ray.new( origin: Vector3 | nil, direction: Vector3, params: RaycastParams | nil ) → Ray A constructor which creates and returns a new ray from origin, direction and params (if provided).  "},{"title":"Destroy","type":1,"pageTitle":"Ray","url":"api/Ray#Destroy","content":"Ray &lt;/&gt; Ray:Destroy() → () Destroys the ray and makes it unusable. warning Trivial errors will occur if your code unintentionally works on a destroyed ray, only call this method when you're done working with the ray!  "},{"title":"GetTouchingParts","type":1,"pageTitle":"Ray","url":"api/Ray#GetTouchingParts","content":"Ray &lt;/&gt; Ray:GetTouchingParts(maxTouchingParts: number) → table Gets and returns all the parts the ray is touching within a specified limit maxTouchingParts (or 10 if not provided), respecting the raycast params provided to the constructor.  "},{"title":"SetVisualizerThickness","type":1,"pageTitle":"Ray","url":"api/Ray#SetVisualizerThickness","content":"Ray &lt;/&gt; Ray:SetVisualizerThickness() → () Sets the thickness of the ray visualizer.  "},{"title":"Unvisualize","type":1,"pageTitle":"Ray","url":"api/Ray#Unvisualize","content":"Ray &lt;/&gt; Ray:Unvisualize() → () Unvisualizes the ray.  "},{"title":"Update","type":1,"pageTitle":"Ray","url":"api/Ray#Update","content":"Ray &lt;/&gt; Ray:Update(data: table) → () A very useful method which is used for dynamically updating the origin, direction or the size of the ray. Data members Description Origin If specified, must be a Vector3. Direction If specified, must be a Vector3. Size If specified, must be a number. note Note that at least 1 of the members must be specified. tip Other neccesary data (such as the ray visualizer and other properties) wil be updated as well to accommodate the new changes.  "},{"title":"Visualize","type":1,"pageTitle":"Ray","url":"api/Ray#Visualize","content":"Ray &lt;/&gt; Ray:Visualize() → () Visualizes the ray. "},{"title":"RemoteProperty","type":0,"sectionRef":"#","url":"api/RemoteProperty","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#properties","content":" "},{"title":"OnPlayerValueUpdate","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#OnPlayerValueUpdate","content":"RemoteProperty &lt;/&gt; RemoteProperty.OnPlayerValueUpdate: Signal A signal which is fired whenever the value of a player is updated to a new one. remoteProperty.OnPlayerValueUpdate:Connect(function(player, newValue) print((&quot;%s's value was updated to %s&quot;):format(tostring(newValue))) end)   "},{"title":"OnValueUpdate","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#OnValueUpdate","content":"RemoteProperty &lt;/&gt; RemoteProperty.OnValueUpdate: Signal A signal which is fired whenever the value stored in the remote property is updated to a new one. Whenever the signal is fired, it passes in the new value. remoteProperty.ValueUpdate:Connect(function(newValue) print((&quot;Value was updated to %s&quot;):format(tostring(newValue))) end)  "},{"title":"Functions","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#functions","content":" "},{"title":"IsRemoteProperty","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#IsRemoteProperty","content":"&lt;/&gt; RemoteProperty.IsRemoteProperty(self: any) → boolean A method which is used to check if self is a remote property or not.  "},{"title":"new","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#new","content":"&lt;/&gt; RemoteProperty.new(defaultValue: any) → RemoteProperty Creates and returns a new remote property.  "},{"title":"Destroy","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#Destroy","content":"RemoteProperty &lt;/&gt; RemoteProperty:Destroy() → () Destroys the remote property and makes it unusable. warning Trivial errors will occur if your code unintentionally works on a destroyed remote property, only call this method when you're done working with it!  "},{"title":"GetDefaultValue","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#GetDefaultValue","content":"RemoteProperty &lt;/&gt; RemoteProperty:GetDefaultValue() → any Returns the default (initial) value of the remote property.  "},{"title":"GetPlayerValue","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#GetPlayerValue","content":"RemoteProperty &lt;/&gt; RemoteProperty:GetPlayerValue(player: Player) → any Returns the value of player stored in the remote property, or the current value of the remote property.  "},{"title":"GetValue","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#GetValue","content":"RemoteProperty &lt;/&gt; RemoteProperty:GetValue() → any Returns the current value of the remote property.  "},{"title":"SetValue","type":1,"pageTitle":"RemoteProperty","url":"api/RemoteProperty#SetValue","content":"RemoteProperty &lt;/&gt; RemoteProperty:SetValue( newValue: any, specificPlayers: table | nil ) → () Sets the value of the remote property to newValue, if the current value isn't the same as newValue. If specificPlayers is provided, only the values of the players in the table will be set. Otherwise if not specified, specificPlayers will be assumed to be game.Players:GetPlayers(). local specificPlayers = {game.Players.boboYaya} remoteProperty:SetValue(50, specificPlayers) print(remoteProperty:GetCurrentValue()) --&gt; nil (or some value) print(remoteProperty:GetPlayerValue(game.Players.boboYaya)) --&gt; 50  "},{"title":"Signal","type":0,"sectionRef":"#","url":"api/Signal","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"Signal","url":"api/Signal#properties","content":" "},{"title":"ActiveConnectionCount","type":1,"pageTitle":"Signal","url":"api/Signal#ActiveConnectionCount","content":"Signal &lt;/&gt; Signal.ActiveConnectionCount: number The number of active connections. "},{"title":"Functions","type":1,"pageTitle":"Signal","url":"api/Signal#functions","content":" "},{"title":"IsSignal","type":1,"pageTitle":"Signal","url":"api/Signal#IsSignal","content":"&lt;/&gt; Signal.IsSignal(self: any) → boolean Returns a boolean indicating if the provided argument is a signal or not.  "},{"title":"new","type":1,"pageTitle":"Signal","url":"api/Signal#new","content":"&lt;/&gt; Signal.new() → Signal Creates and returns a new signal.  "},{"title":"CleanupConnections","type":1,"pageTitle":"Signal","url":"api/Signal#CleanupConnections","content":"Signal &lt;/&gt; Signal:CleanupConnections() → () Disconnects all active connections.  "},{"title":"Connect","type":1,"pageTitle":"Signal","url":"api/Signal#Connect","content":"Signal &lt;/&gt; Signal:Connect(callback: function) → Connection Connects callback to the signal so that it will be called when Signal:Fire or Signal:DeferredFire are called, and the arguments passed to them will be passed to callback. This method returns a connection which contains the following methods: Methods Description Disconnect The connection will be disconnected and callback will be disregarded. IsConnected Returns a boolean indicating if the connection has been disconnected.   "},{"title":"DeferredFire","type":1,"pageTitle":"Signal","url":"api/Signal#DeferredFire","content":"Signal &lt;/&gt; Signal:DeferredFire(...: any) → () Works the same as Signal:Fire, but calls every connection's callback in the next engine execution step, passing in ... as the argument.  "},{"title":"Destroy","type":1,"pageTitle":"Signal","url":"api/Signal#Destroy","content":"Signal &lt;/&gt; Signal:Destroy() → () Destroys the signal and makes it unusuable. warning Trivial errors will occur if your code unintentionally works on a destroyed signal, only call this method when you're done working with the signal.  "},{"title":"Fire","type":1,"pageTitle":"Signal","url":"api/Signal#Fire","content":"Signal &lt;/&gt; Signal:Fire(...: any) → () Resumes any yielded threads and calls every connection's callback passing in ... as the argument.  "},{"title":"Wait","type":1,"pageTitle":"Signal","url":"api/Signal#Wait","content":"Signal &lt;/&gt; Signal:Wait() → () Yields the current Luau thread that called it until the signal is fired through Signal:Fire or Signal:DeferredFire. All arguments passed to them will be returned.  "},{"title":"WaitUntilArgumentsPassed","type":1,"pageTitle":"Signal","url":"api/Signal#WaitUntilArgumentsPassed","content":"Signal &lt;/&gt; Signal:WaitUntilArgumentsPassed(...: any) → ...any Works the same as Signal:Wait, but will only resume the Luau thread when ... have been passed as arguments to Signal:Fire or Signal:DeferredFire. "},{"title":"RemoteSignal","type":0,"sectionRef":"#","url":"api/RemoteSignal","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#functions","content":" "},{"title":"IsRemoteSignal","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#IsRemoteSignal","content":"&lt;/&gt; RemoteSignal.IsRemoteSignal(self: any) → boolean A method which is used to check if self is a remote signal or not.  "},{"title":"new","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#new","content":"&lt;/&gt; RemoteSignal.new() → RemoteSignal Creates and returns a new remote signal.  "},{"title":"Connect","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#Connect","content":"RemoteSignal &lt;/&gt; RemoteSignal:Connect() → RBXScriptConnection Works the same as self._remoteEvent:Connect(callback).  "},{"title":"Destroy","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#Destroy","content":"RemoteSignal &lt;/&gt; RemoteSignal:Destroy() → () Destroys the remote signal and makes it unusuable. warning Trivial errors will occur if your code unintentionally works on a destroyed remote signal, only call this method when you're done working with it!  "},{"title":"FireAllClients","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#FireAllClients","content":"RemoteSignal &lt;/&gt; RemoteSignal:FireAllClients(...: any) → () Works the same as self._remoteEvent:FireAllClients(...).  "},{"title":"FireClient","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#FireClient","content":"RemoteSignal &lt;/&gt; RemoteSignal:FireClient( client: Player, ...: any ) → () Works the same as self._remoteEvent:FireClient(client, ...).  "},{"title":"FireClients","type":1,"pageTitle":"RemoteSignal","url":"api/RemoteSignal#FireClients","content":"RemoteSignal &lt;/&gt; RemoteSignal:FireClients( clients: table, ...: any ) → () Works the same as self._remoteEvent:FireClient(player, ...), but only for players in the clients table. "},{"title":"UserInput","type":0,"sectionRef":"#","url":"api/UserInput","content":"On this page UserInput note Documentation is under work!","keywords":""},{"title":"Timer","type":0,"sectionRef":"#","url":"api/Timer","content":"","keywords":""},{"title":"Properties","type":1,"pageTitle":"Timer","url":"api/Timer#properties","content":" "},{"title":"OnTick","type":1,"pageTitle":"Timer","url":"api/Timer#OnTick","content":"Timer &lt;/&gt; Timer.OnTick: Signal A signal which is fired whenever the timer &quot;ticks&quot; (when started). timer.OnTick:Connect(function(deltaTime) warn((&quot;After %d seconds, tick!&quot;):format(deltaTime)) end) timer:Start()  "},{"title":"Functions","type":1,"pageTitle":"Timer","url":"api/Timer#functions","content":" "},{"title":"IsTimer","type":1,"pageTitle":"Timer","url":"api/Timer#IsTimer","content":"&lt;/&gt; Timer.IsTimer(self: any) → boolean Returns a boolean indicating if the provided argument is a timer or not.  "},{"title":"new","type":1,"pageTitle":"Timer","url":"api/Timer#new","content":"&lt;/&gt; Timer.new( timer: number, customUpdateSignal: RBXScriptSignal | nil ) → Timer Creates and returns a new timer. If customUpdateSignal is specified, it will be used to update the timer when started. Else if not specified, RunService.Heartbeat will be used instead.  "},{"title":"Destroy","type":1,"pageTitle":"Timer","url":"api/Timer#Destroy","content":"Timer &lt;/&gt; Timer:Destroy() → () Destroys the timer and makes it unusuable. warning Trivial errors will occur if your code unintentionally works on a destroyed timer, only call this method when you're done working with the timer.  "},{"title":"IsPaused","type":1,"pageTitle":"Timer","url":"api/Timer#IsPaused","content":"Timer &lt;/&gt; Timer:IsPaused() → boolean Returns a boolean indicating if the timer has being paused.  "},{"title":"IsStopped","type":1,"pageTitle":"Timer","url":"api/Timer#IsStopped","content":"Timer &lt;/&gt; Timer:IsStopped() → boolean Returns a boolean indicating if the timer has stopped.  "},{"title":"Pause","type":1,"pageTitle":"Timer","url":"api/Timer#Pause","content":"Timer &lt;/&gt; Timer:Pause() → () Pauses the timer.  "},{"title":"Reset","type":1,"pageTitle":"Timer","url":"api/Timer#Reset","content":"Timer &lt;/&gt; Timer:Reset() → () Resets the timer.  "},{"title":"Start","type":1,"pageTitle":"Timer","url":"api/Timer#Start","content":"Timer &lt;/&gt; Timer:Start() → () Starts the timer.  "},{"title":"Stop","type":1,"pageTitle":"Timer","url":"api/Timer#Stop","content":"Timer &lt;/&gt; Timer:Stop() → () Stops the timer.  "},{"title":"Unpause","type":1,"pageTitle":"Timer","url":"api/Timer#Unpause","content":"Timer &lt;/&gt; Timer:Unpause() → () Unpauses the timer. "},{"title":"SafeWaitUtil","type":0,"sectionRef":"#","url":"api/SafeWaitUtil","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"SafeWaitUtil","url":"api/SafeWaitUtil#functions","content":" "},{"title":"WaitForChild","type":1,"pageTitle":"SafeWaitUtil","url":"api/SafeWaitUtil#WaitForChild","content":"&lt;/&gt; SafeWaitUtil.WaitForChild( instance: Instance, childName: string, timeout: number | nil ) → Instance | nil A method which yields the current Luau thread until an instance with the name of childName has been found in instance. If no valid instance has been found in under timeout seconds (if specified), the method will return nil. note If no valid instance has been found in under 5 seconds, a infinite yield warning will be thrown as a precaution. tip If instance has been destroyed, the method will return nil and not leak the thread! "},{"title":"Getting started","type":0,"sectionRef":"#","url":"docs/intro","content":"","keywords":""},{"title":"Wally Setup","type":1,"pageTitle":"Getting started","url":"docs/intro#wally-setup","content":"Run wally init on your project's directory, and then add the various utility modules through the wally.toml file. For e.g, the following would be a wally.toml file for a project that needs a signal and a maid module: [package]name = &quot;finobinos/Project&quot;version = &quot;0.1.0&quot;registry = &quot;https://github.com/UpliftGames/wally-index&quot;realm = &quot;shared&quot; [dependencies]Signal = &quot;finobinos/signal@3.0.1&quot;Maid = &quot;finobinos/maid@3.0.0&quot; Copy These dependencies can be then installed to your project through wally install, which will create a folder Packages in your project containing the dependencies. "},{"title":"Rojo setup","type":1,"pageTitle":"Getting started","url":"docs/intro#rojo-setup","content":"The package folder created can then be synced into Roblox Studio through Rojo. The following default.project.json file would be used to sync the package folder into Roblox Studio: { &quot;name&quot;: &quot;Project&quot;, &quot;tree&quot;: { &quot;$className&quot;: &quot;DataModel&quot;, &quot;ReplicatedStorage&quot;: { &quot;$className&quot;: &quot;ReplicatedStorage&quot;, &quot;Packages&quot;: { &quot;$path&quot;: &quot;Packages&quot; } } }} Copy "},{"title":"TableUtil","type":0,"sectionRef":"#","url":"api/TableUtil","content":"","keywords":""},{"title":"Functions","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#functions","content":" "},{"title":"CombineTables","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#CombineTables","content":"&lt;/&gt; TableUtil.CombineTables(...: table) → table A method which combines all tables ... into 1 single mega table. local t = {1, 2, 3, 4, 5} local t1 = {7, 8, 9} local t2 = {10, 12, 12} local combinedTable = TableUtil.CombineTables(t, t1, t2) print(combinedTable) --&gt; {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}   "},{"title":"ConvertTableIndicesToStartFrom","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#ConvertTableIndicesToStartFrom","content":"&lt;/&gt; TableUtil.ConvertTableIndicesToStartFrom( tabl: table, index: number ) → table A method which maps all numerical indices of the values in tabl to start from index. This method also accounts for nested tables. Returns tabl. local t = {1, 2, 3, 4, 5} TableUtil.ConvertTableIndicesToStartFrom(t, 0) print(t[0], t[1], t[2], t[3]) --&gt; 1, 2, 3, 4 tip This method accounts for cyclic tables.  "},{"title":"DeepCopyTable","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#DeepCopyTable","content":"&lt;/&gt; TableUtil.DeepCopyTable(tabl: table) → table Unfreezes tabl via table.unfreeze, and all other nested tables in tabl. tip This method accounts for cyclic tables.  "},{"title":"DeepFreezeTable","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#DeepFreezeTable","content":"&lt;/&gt; TableUtil.DeepFreezeTable(tabl: table) → table Freezes tabl via table.freeze, and all other nested tables in tabl. tip This method accounts for cyclic tables.  "},{"title":"GetCount","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#GetCount","content":"&lt;/&gt; TableUtil.GetCount(tabl: table) → number A method which returns a number of all the elements in tabl. local t = {1, 2, 3, 4, 5, a = 5, b = 6} print(TableUtil.GetCount(t)) --&gt; 7   "},{"title":"IsTableEmpty","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#IsTableEmpty","content":"&lt;/&gt; TableUtil.IsTableEmpty(tabl: table) → ( boolean, table ) Returns a boolean indicating if tabl is empty i.e it is basically {}. For arrays with no holes, the # operator should be used instead.  "},{"title":"IsTableEqualTo","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#IsTableEqualTo","content":"&lt;/&gt; TableUtil.IsTableEqualTo( tabl: table, otherTable: table ) → boolean A method which checks if both tabl and otherTable are exactly equal. Also accounts for nested values. local t1 = {1, 2, 3, 4, 5, {a = 4}} local t2 = {1, 2, 3, 4, 5, {a = 3}} print(TableUtil.IsTableEqualTo(t1, t2)) --&gt; false local t1 = {1, 2, 3, 4, 5, {a = 4}} local t1 = {1, 2, 3, 4, 5, {a = 4}} print(TableUtil.IsTableEqualTo(t1, t2)) --&gt; true tip This method accounts for cyclic tables.  "},{"title":"Map","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#Map","content":"&lt;/&gt; TableUtil.Map( tabl: table, callback: function ) → table Performs a map against tabl, which can be used to map new values based on the old values at given indices. Returns tabl. local t = {1, 2, 3, 4, 5} local t2 = TableUtil.Map(t, function(key, value) return value * 2 end) print(t2) --&gt; {2, 4, 6, 8, 10}   "},{"title":"ReconcileTable","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#ReconcileTable","content":"&lt;/&gt; TableUtil.ReconcileTable( tabl: table, templateTable: table ) → table Adds all missing elements from templateTable to tabl, and also sets the metatable of tabl to templateTable. Returns tabl. local t1 = {} local templateTable = {1, 2, 3} TableUtil.ReconcileTable(t1, templateTable) print(t1) --&gt; {1, 2, 3}   "},{"title":"ReverseTable","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#ReverseTable","content":"&lt;/&gt; TableUtil.ReverseTable(tabl: table) → table A method which reverses tabl. Returns tabl. note This method assumes that tabl is an array with no holes. local t = {1, 2, 3, 4, 5} TableUtil.ReverseTable(t) print(t) --&gt; {5, 4, 3, 2, 2, 1}   "},{"title":"ShallowCopyTable","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#ShallowCopyTable","content":"&lt;/&gt; TableUtil.ShallowCopyTable(tabl: table) → table Shallow copies all elements in tabl to a new table, i.e only the &quot;children&quot; of tabl are considered and not their descendants. local t1 = { 1, 2, 3, { a = {} } } print(TableUtil.ShallowCopyTable(t1))   "},{"title":"ShuffleTable","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#ShuffleTable","content":"&lt;/&gt; TableUtil.ShuffleTable( tabl: table, randomObject: Random | nil ) → table Shuffles tabl such that the indices will have values of other indices in tabl in a random way. If randomObject is specified, it will be used instead to shuffle tabl. Returns tabl. note This method assumes that tabl is an array with no holes. local t1 = {1, 2, 3, 4, 5} local shuffledTable = TableUtil.ShuffleTable(t1) print(shuffledTable) --&gt; {3, 2, 4, 5, 1, 6}   "},{"title":"SyncTable","type":1,"pageTitle":"TableUtil","url":"api/TableUtil#SyncTable","content":"&lt;/&gt; TableUtil.SyncTable( tabl: table, templateSyncTable: table ) → table Syncs tabl to templateSyncTable such that tabl will have exactly the same keys and values that are in templateSyncTable. Returns tabl. local t = {a = 5, b = {}} local templateT = {a = {}, b = 5} TableUtil.SyncTable(t, templateT) print(t) --&gt; {a = {}, b = 5} tip This method accounts for cyclic tables. "}]